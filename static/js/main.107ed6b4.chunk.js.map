{"version":3,"sources":["utils/dataConstants.js","utils/dataUtils.js","components/mapboxGLMap/mapUtils.js","components/tooltip/index.js","utils/stringUtils.js","components/mapboxGLMap/index.js","components/sidebar/kindessCard.js","components/sidebar/loadingSpinner.js","components/sidebar/infoCard.js","components/sidebar/traceStepper.js","components/sidebar/index.js","App.js","reportWebVitals.js","index.js"],"names":["ID_KEY_NAME","CENTER_LNG_KEY_NAME","CENTER_LAT_KEY_NAME","LNG_KEY","LAT_KEY","formatFieldsForDisplay","node","streetNumber","street","address","city","state","cityState","zip","location","kindness","dateString","dateTime","toLocaleString","DateTime","DATETIME_SHORT","showTooltip","e","d","d3","transition","duration","style","pageX","pageY","resetAllCircleColors","fill","uniqueCircleId","index","circleClass","DataConstants","projectLngLatToXY","map","project","mapboxgl","LngLat","mapRender","attr","x","y","getBoudingObjectForTraceList","trace","lngLatPoints","paddingMiles","isRatioPadding","paddingDegreesLng","paddingDegreesLat","leftPadConstant","extractKey","key","maxLng","Math","max","minLng","min","maxLat","minLat","topRight","lng","lat","bottomLeft","DataUtils","length","TooltipContents","isSelected","console","log","inp","substring","accessToken","workerClass","MapboxWorker","MapboxGLMap","one","two","setIsLoading","selectedNode","setSelectedNode","hoveredNode","setHoveredNode","isTracing","setTrace","resetTrace","useState","setMap","boundingObject","setBoundingObject","mapContainer","useRef","useEffect","myMap","Map","container","current","center","zoom","on","MapUtils","getCanvasContainer","append","resize","selectAll","data","join","enter","callback","update","exit","remove","boundingObjectNew","fitBounds","traceNew","id","filter","sort","a","b","toMillis","ref","el","className","KindnessCard","LoadingSpinner","SidebarInfoCard","fontSize","TraceStepper","setIsTracing","traceIndex","indexOf","n","Button","variant","color","disabled","onClick","backgroundColor","Sidebar","isLoading","href","target","src","App","setData","window","innerWidth","alert","Tabletop","init","simpleSheet","then","dataProc","i","fromFormat","numericalFields","forEach","f","catch","warn","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.107ed6b4.chunk.js","sourcesContent":["// const TIMESTAMP_KEY_NAME = 'Timestamp'\n// const ID_KEY_NAME = 'ID NUMBER on kindness card'\n// const CITY_KEY_NAME = 'CITY where act of kindness took place'\n// const STATE_KEY_NAME = 'STATE'\n// const ZIP_KEY_NAME = '[OPTIONAL] ZIP CODE'\n// const STREET_KEY_NAME = '[Optional] STREET NAME'\n// const KINDNESS_KEY_NAME = '[Optional] Tell us about the act of kindness you received!'\n// const CENTER_LNG_KEY_NAME = 'CenterLon'\n// const CENTER_LAT_KEY_NAME = 'CenterLat'\n\nconst REAL_DATA_URL = 'https://docs.google.com/spreadsheets/d/1IqEBIcnFZ_BFCrD8jhk11yVoOjfxzZpiZLdL4cL3oK0/pubhtml'\nconst SPOOF_DATA_URL = 'https://docs.google.com/spreadsheets/d/1BvBwyy1xYYhdiokMfbyxssu5nlB0arRMvxyuQLCzsH4/pubhtml'\n\n// this is the format used by Google sheets\nconst TIMESTAMP_FORMAT = 'M/d/yyyy H:mm:ss'\n// 4/28/2021 13:36:45\n\n// this is the format that was originally used by Jack in spoof data\n// const TIMESTAMP_FORMAT = 'MM/dd/yy h:mm a'\n\n// TOOD add constants for new parsed geo fields when those are avaiable\nconst TIMESTAMP_KEY_NAME = 'Timestamp'\nconst ID_KEY_NAME = 'ID Number on kindness card'\nconst STREET_NUMBER_KEY_NAME = 'street_number'\nconst STREET_KEY_NAME = 'street_name'\nconst CITY_KEY_NAME = 'admin_level_3'\nconst STATE_KEY_NAME = 'admin_level_1'\nconst ZIP_KEY_NAME = 'zip_code'\nconst KINDNESS_KEY_NAME = '(Optional) Tell us about the act of kindness you received!'\nconst CENTER_LNG_KEY_NAME = 'center_lng'\nconst CENTER_LAT_KEY_NAME = 'center_lat'\n\n// also add a constant for the root ID\nconst ROOT_ACT_ID = 0\n\nexport {\n    TIMESTAMP_KEY_NAME,\n    ID_KEY_NAME,\n    STREET_NUMBER_KEY_NAME,\n    STREET_KEY_NAME,\n    CITY_KEY_NAME,\n    STATE_KEY_NAME,\n    ZIP_KEY_NAME,\n    KINDNESS_KEY_NAME,\n    CENTER_LNG_KEY_NAME,\n    CENTER_LAT_KEY_NAME,\n\n    REAL_DATA_URL,\n    SPOOF_DATA_URL,\n\n    TIMESTAMP_FORMAT,\n\n    ROOT_ACT_ID,\n}\n","import { DateTime } from  'luxon'\nimport * as DataConstants from './dataConstants'\n\nconst DEGREES_TO_MILES = 69\nconst LNG_KEY = 'lng'\nconst LAT_KEY = 'lat'\n\nconst processRawSheetsData = (data) => {\n    const dataProc = data ? data.map((d, i) => ({\n        ...d,\n        index: i,\n        dateTime: DateTime.fromFormat(d[DataConstants.TIMESTAMP_KEY_NAME], DataConstants.TIMESTAMP_FORMAT),\n    })) : null\n\n    // convert certain fields to numbers\n    const numericalFields = [\n        DataConstants.ID_KEY_NAME,\n        DataConstants.CENTER_LNG_KEY_NAME,\n        DataConstants.CENTER_LAT_KEY_NAME,\n    ]\n\n    const dataProcNumerical = dataProc.map(d => {\n        numericalFields.forEach(f => {\n            d[f] = +d[f]\n        })\n        return d\n    })\n    return dataProcNumerical\n}\n\nconst nodesAreEqual = (one, two) => {\n    if (! one || ! two)\n        return false\n        \n    return one.index == two.index\n}\n\nconst computeLngLatBoundingBox = (lngLatPoints, paddingMiles, isRatioPadding = false, padLeft = true) => {\n    // compute top right and bottom left\n    // then, add some padding amount in miles\n    var paddingDegreesLng = 0\n    var paddingDegreesLat = 0\n    if (! isRatioPadding)\n        paddingDegreesLng = paddingMiles / DEGREES_TO_MILES\n        paddingDegreesLat = paddingDegreesLng\n    \n    // TODO fix hard coding here\n    const leftPadConstant = padLeft ? 5 : 1\n\n    const extractKey = key => lngLatPoints.map((d => d[key]))\n\n    const maxLng = Math.max(...extractKey(LNG_KEY))\n    const minLng = Math.min(...extractKey(LNG_KEY))\n    const maxLat = Math.max(...extractKey(LAT_KEY))\n    const minLat = Math.min(...extractKey(LAT_KEY))\n\n    if (isRatioPadding) {\n        paddingDegreesLng = (maxLng - minLng) * paddingMiles\n        paddingDegreesLat = (maxLat - minLat) * paddingMiles\n    }\n\n    return {\n        topRight: {\n            lng: maxLng + paddingDegreesLng,\n            lat: minLat + paddingDegreesLat,\n        },\n        bottomLeft: {\n            lng: minLng - paddingDegreesLng * leftPadConstant,\n            lat: maxLat - paddingDegreesLat,\n        }\n    }\n}\n\nconst filterTraceListForNode = (data, node) => {\n    let dataFilt;\n    const id = node[DataConstants.ID_KEY_NAME]\n    if (id === DataConstants.ROOT_ACT_ID) {\n        // if the id is the root note, just select all of data\n        dataFilt = data\n    } else {\n        // select this id, and the root\n        dataFilt = data\n            .filter(d => \n                (d[DataConstants.ID_KEY_NAME] === id) ||\n                (d[DataConstants.ID_KEY_NAME] === DataConstants.ROOT_ACT_ID)\n            )\n    }\n\n    // apply sorting by date\n    const traceNew = dataFilt.sort((a, b) => a.dateTime.toMillis() - b.dateTime.toMillis())\n    return traceNew\n}\n\nconst formatFieldsForDisplay = (node) => {\n    const streetNumber = node[DataConstants.STREET_NUMBER_KEY_NAME]\n    const street = node[DataConstants.STREET_KEY_NAME]\n    const address = (streetNumber && street) ? `${(streetNumber ? `${streetNumber} ` : null)}${street}` : null\n    const city = node[DataConstants.CITY_KEY_NAME]\n    const state = node[DataConstants.STATE_KEY_NAME]\n    const cityState = (city || state) ? `${city}${city ? `, ${state}` : null}` : null\n    const zip = node[DataConstants.ZIP_KEY_NAME]\n    const location = `${address || 'No street address provided'}\\n${cityState || 'No city/state provided'}${zip ? `\\n${zip}` : ''}`\n    const kindness = node[DataConstants.KINDNESS_KEY_NAME]\n\n    // apply necessary parsing for date\n    const date = node.dateTime\n    const dateString = date.toLocaleString(DateTime.DATETIME_SHORT)\n\n    return {\n        kindness,\n        dateString,\n        location,\n        cityState,\n    }\n}\n\nexport {\n    processRawSheetsData,\n    nodesAreEqual,\n    computeLngLatBoundingBox,\n    filterTraceListForNode,\n    formatFieldsForDisplay,\n}\n","import * as d3 from 'd3'\nimport mapboxgl from \"mapbox-gl\"\nimport * as DataConstants from '../../utils/dataConstants'\nimport * as DataUtils from '../../utils/dataUtils'\n\nconst POINT_ZOOM = 12\nconst ZOOM_EASE_MILLIS = 3000\nconst POINT_ZOOM_MILES = 1\nconst RATIO_PAD = 0.1\n\nconst initializeMap = ({ setMap, mapContainer }) => {\n    const myMap = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/light-v10',\n        center: [-100, 40],\n        zoom: 3,\n    })\n\n    // immediately center based on the bounding box of our data points\n    // zoomMapToBoundingObject(myMap, boundingObject)\n\n    myMap.on(\"load\", () => {\n        setMap(myMap)\n        // setBoundingObject(boundingObject)\n    })\n}\n\nconst zoomMapToBoundingObject = (map, boundingObject) => {\n    const { topRight, bottomLeft } = boundingObject\n    map.fitBounds([\n        [bottomLeft.lng, bottomLeft.lat],\n        [topRight.lng, topRight.lat]\n    ], {\n        duration: ZOOM_EASE_MILLIS,\n    })\n}\n\nconst showTooltip = (e, d) => {\n    const tooltip = d3.select('.map-tooltip')\n    tooltip\n        .transition()\n        .duration(0)\n        .style('opacity', 0.8)\n        .style('left', `${e.pageX + 50}px`)\n        .style('top', `${e.pageY - 50}px`)\n}\n\nconst hideTooltip = (callback) => {\n    const tooltip = d3.select('.map-tooltip')\n    tooltip\n        .transition().duration(500)\n        .style(\"opacity\", 0)\n        .on('end', callback)\n}\n\nconst resetAllCircleColors = (fill = 'steelblue') => {\n    return d3.selectAll('.circle')\n        .transition()\n        .duration(500)\n        .style('fill', fill)\n}\n\nconst clearAllEventHandlers = (selection) => {\n    selection\n        .on('mouseover', null)\n        .on('mousemove', null)\n        .on('mouseout', null)\n        .on('click', null)\n}\n\n// write function to generate ID of circle\nconst uniqueCircleId = d => `circle-${d.index}`\n\n// write function to generate class of circle based off id key\nconst circleClass = d => `circle circle-${d[DataConstants.ID_KEY_NAME]}`\n\n// write function to quickly convert a data array to the fomat for lat lng\nconst generateLngLatArray = data => data.map(d => ({\n    lng: d[DataConstants.CENTER_LNG_KEY_NAME],\n    lat: d[DataConstants.CENTER_LAT_KEY_NAME],\n}))\n\n// write projection function for map\nconst projectLngLatToXY = (map, d) => {\n    return map.project(\n        new mapboxgl.LngLat(d[DataConstants.CENTER_LNG_KEY_NAME], d[DataConstants.CENTER_LAT_KEY_NAME])\n    )\n}\n\nconst zoomToDataPoint = (map, d) => {\n    map.flyTo({\n        center: [\n            d[DataConstants.CENTER_LNG_KEY_NAME],\n            d[DataConstants.CENTER_LAT_KEY_NAME],\n        ],\n        zoom: POINT_ZOOM,\n        essential: true\n    })\n}\n\nconst mapRender = (map) => {\n    d3.selectAll('.circle')\n        .attr('cx', d => projectLngLatToXY(map, d).x)\n        .attr('cy', d => projectLngLatToXY(map, d).y)\n}\n\nconst getBoudingObjectForTraceList = (trace) => {\n    return DataUtils.computeLngLatBoundingBox(\n        generateLngLatArray(trace),\n        trace.length > 1 ? RATIO_PAD : POINT_ZOOM_MILES,\n        trace.length > 1 ? true : false,\n        trace.length > 1 ? true : false,\n    )\n}\n\nexport {\n    initializeMap,\n    zoomMapToBoundingObject,\n    showTooltip,\n    hideTooltip,\n    resetAllCircleColors,\n    clearAllEventHandlers,\n    uniqueCircleId,\n    circleClass,\n    generateLngLatArray,\n    projectLngLatToXY,\n    zoomToDataPoint,\n    mapRender,\n    getBoudingObjectForTraceList,\n}\n","import * as DataConstants from '../../utils/dataConstants'\nimport * as StringUtils from '../../utils/stringUtils'\nimport * as DataUtils from '../../utils/dataUtils'\n\nconst TooltipContents = ({ node, isSelected }) => {\n    // handle null node case\n    if (! node) {\n        return null;\n    }\n\n    console.log('rendering tooltip')\n\n    const {\n        kindness,\n        cityState,\n    } = DataUtils.formatFieldsForDisplay(node)\n\n\n    return (\n        <div>\n            <p><b>{StringUtils.trimWithElipses(kindness, 140)}</b></p>\n            <p><i>{cityState}</i></p>\n            <p>{! isSelected ? 'Click for more info!' : null}</p>\n        </div>\n    )\n}\n\nexport default TooltipContents\n","const trimWithElipses = (inp, length) => {\n    if (inp.length > length) {\n        return `${inp.substring(0, length)}...`\n    }\n    \n    return inp\n}\n\nexport {\n    trimWithElipses\n}","import React, { useEffect, useRef, useState } from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport * as d3 from 'd3'\nimport * as MapUtils from './mapUtils'\nimport * as DataConstants from '../../utils/dataConstants'\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';\nimport TooltipContents from '../tooltip'\nimport * as DataUtils from '../../utils/dataUtils'\n\nimport '../../styles/Map.css'\n\nconst DEFAULT_RADIUS = 10\nconst BIG_RADIUS = 30\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiY21vcm9uZXkiLCJhIjoiY2tudGNscDJjMDFldDJ3b3pjMTh6ejJyayJ9.YAPmFkdy_Eh9K20cFlIvaQ'\nmapboxgl.workerClass = MapboxWorker;\n\nconst MapboxGLMap = ({ trace, setIsLoading, selectedNode, setSelectedNode, hoveredNode, setHoveredNode, isTracing, setTrace, resetTrace }) => {\n    const [map, setMap] = useState(null)\n    const [boundingObject, setBoundingObject] = useState(null)\n    const mapContainer = useRef(null)\n\n    // let's init our map first again\n    useEffect(() => {\n        if (map === null) {\n            // need to init the map since it is null\n            MapUtils.initializeMap({ setMap, mapContainer })\n        } else {\n            // also append an svg to the map for later use\n            // TODO put this in css\n            var container = map.getCanvasContainer()\n            d3.select(container)\n                .append('svg')\n                .attr('class', 'map-svg')\n                .attr('width', '100%')\n                .attr('height', '100%')\n                .style('position', 'absolute')\n                .style('z-index', 2)\n                .style('top', 0)\n                .style('left', 0)\n            \n            // also set up map events for re-render\n            map.on('viewreset', () => MapUtils.mapRender(map))\n            map.on('move', () => MapUtils.mapRender(map))\n            map.on('moveend', () => MapUtils.mapRender(map))\n            map.on('load', () => map.resize())\n        }\n    }, [map])\n\n    // here is where we do our data join for trace points\n    useEffect(() => {\n        if (map && trace) {\n            // do a data join on all the trace points with d3\n            d3.select('.map-svg')\n                .selectAll('circle')\n                .data(trace, d => d.index)\n                .join(\n                    enter => enter\n                        .append('circle')\n                        .attr('id', MapUtils.uniqueCircleId)\n                        .attr('class', MapUtils.circleClass)\n                        .attr('r', DEFAULT_RADIUS)\n                        .style('fill', 'steelblue')\n                        .on('click', (e, d) => setSelectedNode(d))\n                        .on('mouseover', (e, d) => {\n                            setHoveredNode(d)\n                            MapUtils.showTooltip(e, d)\n                        })\n                        .on('mousemove', (e, d) => {\n                            MapUtils.showTooltip(e, d)\n                        })\n                        .on('mouseout', (e, d) => {\n                            MapUtils.hideTooltip(() => setHoveredNode(null))\n                        }),\n                    update => update,\n                    exit => exit.remove()\n                )\n\n            // perform initial render\n            MapUtils.mapRender(map)\n\n            // also complete loading\n            setIsLoading(false)\n\n            // update bounding box with the initial view\n            const boundingObjectNew = MapUtils.getBoudingObjectForTraceList(trace)\n            setBoundingObject(boundingObjectNew)\n        }\n    }, [map, trace])\n\n    // THE PURPOSE OF THIS EFFECT IS TO ZOOM ON THE MAP\n    // WE RE-ZOOM WHEN:\n    // 1. BOUNDING BOX CHANGES\n    // 2. SELECTED NODE BECOMES NULL \n    // listen for changes in the bounding box\n    useEffect(() => {\n        if (boundingObject) {\n            MapUtils.zoomMapToBoundingObject(map, boundingObject)\n        }\n    }, [boundingObject])\n\n    // listen for changes in the selected node\n    // IF GENERAL NON TRACE MODE\n    //     IF SELECTED NODE NON NULL, ZOOM TO IT AND MAKE IT RED\n    //     ELSE, RESET TO ALL POINTS AND MAKE ALL POINTS BLUE\n    // IF TRACE MODE\n    //     MAKE IT GREEN, ALL OTHERS PURPLE\n    useEffect(() => {\n        if (! isTracing) {\n            if (selectedNode) {\n                // handle colors\n                // make other circles not red\n                MapUtils.resetAllCircleColors()\n                \n                // make this circle red\n                d3.select(`#${MapUtils.uniqueCircleId(selectedNode)}`)\n                    .transition()\n                    .duration(500)\n                    .style('fill', 'red')\n                    .attr('r', DEFAULT_RADIUS)\n                \n                // update bounding box\n                const boundingObjectNew = MapUtils.getBoudingObjectForTraceList([selectedNode])\n                setBoundingObject(boundingObjectNew)\n            } else if (trace) {\n                // reset the bounding box to original trace points\n                const boundingObjectNew = MapUtils.getBoudingObjectForTraceList(trace)\n                setBoundingObject(boundingObjectNew)\n    \n                // also clear the color\n                MapUtils.resetAllCircleColors()\n            }\n        } else {\n            // if we have selected the root node, we need to be sure to zoom to original trace\n            if (selectedNode[DataConstants.ID_KEY_NAME] === DataConstants.ROOT_ACT_ID) {\n                const boundingObjectNew = MapUtils.getBoudingObjectForTraceList(trace)\n                setBoundingObject(boundingObjectNew)\n            }\n\n            // we are tracing - selected node should NEVER be null\n            // reset all nodes to the original color\n            MapUtils.resetAllCircleColors('purple')\n                .attr('r', DEFAULT_RADIUS)\n            \n            // make the selected node bigger and green\n            d3.select(`#${MapUtils.uniqueCircleId(selectedNode)}`)\n                .transition()\n                .duration(500)\n                .style('fill', 'green')\n                .attr('r', BIG_RADIUS)\n        }\n        \n    }, [selectedNode, isTracing])\n\n    // listen for changes in the isTracing state\n    // if we become tracing, we want to set the trace to the selectedNode's id set\n    useEffect(() => {\n        if (isTracing) {\n            // filter on the current node\n            const traceNew = DataUtils.filterTraceListForNode(trace, selectedNode)\n            setTrace(traceNew)\n        } else {\n            // reset trace back to original data array\n            resetTrace()\n        }\n    }, [isTracing])\n\n    return <div ref={el => (mapContainer.current = el)} className='map-container-div'>\n        <div className='map-tooltip' style={{ 'opacity': 0 }}>\n            <TooltipContents node={hoveredNode} isSelected={DataUtils.nodesAreEqual(hoveredNode, selectedNode)} />\n        </div>\n    </div>\n}\n\nexport default MapboxGLMap\n","import * as DataUtils from '../../utils/dataUtils'\n\nconst KindnessCard = ({ node }) => {\n    console.log('rendering card')\n    // handle null node case\n    if (! node) {\n        return null;\n    }\n\n    const {\n        kindness,\n        dateString,\n        location,\n    } = DataUtils.formatFieldsForDisplay(node)\n\n    return (\n        <div className=\"kindness-card-inner\">\n            <p>Act of Kindness:</p>\n            <div className=\"kindess-card-description\">\n                <p><b>{kindness || 'No kindess description provided!'}</b></p>\n            </div>\n            <p>Location:</p>\n            <p><b>{location}</b></p>\n            <p>Date & Time:</p>\n            <p><b>{dateString}</b></p>\n        </div>\n    )\n}\n\nexport default KindnessCard","import '../../styles/Loading.css'\n\nconst LoadingSpinner = () => {\n    console.log('rendering loading')\n    return (\n        <div className=\"loading-wrapper\">\n            <div className=\"la-ball-clip-rotate la-2x\">\n                <div></div>\n            </div>\n            <p>Loading...</p>\n        </div>\n    )\n}\n\nexport default LoadingSpinner\n","import MouseIcon from '@material-ui/icons/Mouse'\nimport ExploreIcon from '@material-ui/icons/Explore'\n\n/*\n    Simple component to render some useful info when no node is selected.\n*/\nconst SidebarInfoCard = () => {\n    console.log('rendering side info card')\n    return (\n        <div>\n            <hr className=\"sidebar-divider\" />\n            <div className=\"sidebar-info-row\">\n                <div className=\"sidebar-info-left\">\n                    <MouseIcon fontSize=\"large\" />\n                </div>\n                <div className=\"sidebar-info-right\">\n                    <p><b>Click</b> a circle to explore that act of kindness further!</p>\n                </div>\n            </div>\n            <div className=\"sidebar-info-row\">\n                <div className=\"sidebar-info-left\">\n                    <ExploreIcon fontSize=\"large\" />\n                </div>\n                <div className=\"sidebar-info-right\">\n                    <p>Then, you can <b>trace</b> that act of kindess to see how may people have paid it forward.</p>\n                </div>\n            </div>\n        </div >\n    )\n}\n\nexport default SidebarInfoCard","import KindnessCard from './kindessCard'\nimport { Button } from '@material-ui/core'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward'\n\nconst TraceStepper = ({ isTracing, setIsTracing, trace, selectedNode, setSelectedNode }) => {\n    console.log('rendering trace')\n\n    if (!isTracing) {\n        return null\n    }\n\n    // find the trace index\n    const traceIndex = trace.indexOf(selectedNode)\n\n    const n = trace.length\n\n    return (\n        <div className=\"trace-stepper-wrapper\">\n            <div className=\"trace-stepper-button-horizontal\">\n                <Button\n                    className=\"trace-stepper-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={traceIndex === 0}\n                    onClick={() => setSelectedNode(trace[0])}\n                >\n                    First\n                </Button>\n                <Button\n                    className=\"trace-stepper-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={traceIndex === 0}\n                    onClick={() => setSelectedNode(trace[traceIndex - 1])}\n                >\n                    <ArrowBackIcon />\n                </Button>\n                <Button\n                    className=\"trace-stepper-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={traceIndex === n - 1}\n                    onClick={() => setSelectedNode(trace[traceIndex + 1])}\n                >\n                    <ArrowForwardIcon />\n                </Button>\n                <Button\n                    className=\"trace-stepper-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={traceIndex === n - 1}\n                    onClick={() => setSelectedNode(trace[n - 1])}\n                >\n                    Last\n                </Button>\n            </div>\n            <p>{`${traceIndex + 1} / ${trace.length}`}</p>\n            <KindnessCard node={selectedNode} />\n            <div className=\"trace-stepper-button-below\">\n                <Button variant=\"contained\" style={{ backgroundColor: 'red' }} onClick={() => {\n                    setIsTracing(false)\n                }}>\n                    Exit Trace Mode\n                </Button>\n            </div>\n\n        </div>\n    )\n}\n\nexport default TraceStepper\n","import React from 'react'\nimport { Button } from '@material-ui/core'\nimport '../../styles/Sidebar.css'\nimport KindessCard from './kindessCard'\nimport LoadingSpinner from './loadingSpinner'\nimport SidebarInfoCard from './infoCard'\nimport TraceStepper from './traceStepper'\n\nconst Sidebar = ({ isLoading, selectedNode, setSelectedNode, isTracing, setIsTracing, trace }) => {\n    console.log('rendering sidebar')\n    return (\n        <div className=\"sidebar-flex\">\n            <h1>Kindess Tracker</h1>\n            {\n                isLoading ? <LoadingSpinner /> : null\n            }\n            {\n                !isLoading && !selectedNode ? <SidebarInfoCard /> : null\n            }\n            <div className=\"sidebar-clear-div\">\n                {\n                    selectedNode && !isTracing ? (\n                        <Button variant=\"contained\" style={{ backgroundColor: 'red' }} className=\"sidebar-button-below\" onClick={() => {\n                            setSelectedNode(null)\n                            setIsTracing(false)\n                        }}>Reset View</Button>\n                    ) : null\n                }\n                {\n                    (selectedNode && !isTracing) ? (\n                        <Button variant=\"contained\" style={{ backgroundColor: 'green', color: 'white' }} className=\"sidebar-button-below\" onClick={() => setIsTracing(true)}>Trace this Act!</Button>\n                    ) : null\n                }\n            </div>\n            { !isTracing ? (\n                <div className=\"selected-card-wrapper\">\n                    <KindessCard node={selectedNode} />\n                </div>\n            ) : null\n            }\n            <TraceStepper\n                isTracing={isTracing}\n                setIsTracing={setIsTracing}\n                trace={trace}\n                selectedNode={selectedNode}\n                setSelectedNode={setSelectedNode}\n            />\n            <div className=\"sidebar-bottom-content\">\n                <p className=\"sidebar-small-text\">Christian Moroney, Jackson Bernatchez, Kevin Lyons</p>\n                <p className=\"sidebar-small-text\">6.859 Final Project Spring 2021</p>\n                <div>\n                    <a href=\"https://github.com/6859-sp21/final-project-kindness-tracker\" target=\"_blank\">\n                        <img className=\"sidebar-git-image\" src=\"https://image.flaticon.com/icons/png/512/25/25231.png\"></img>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Sidebar\n","import React, { useEffect, useState } from 'react'\nimport Tabletop from 'tabletop'\nimport { Sidebar, MapboxGLMap } from './components'\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp'\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker'\nimport * as DataConstants from './utils/dataConstants'\nimport * as DataUtils from './utils/dataUtils'\n\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiY21vcm9uZXkiLCJhIjoiY2tudGNscDJjMDFldDJ3b3pjMTh6ejJyayJ9.YAPmFkdy_Eh9K20cFlIvaQ'\nmapboxgl.workerClass = MapboxWorker\nmapboxgl.accessToken = MAPBOX_ACCESS_TOKEN\n\nimport './styles/App.css'\n\nconst App = () => {\n  const [data, setData] = useState(null)\n  const [trace, setTrace] = useState(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const [selectedNode, setSelectedNode] = useState(null)\n  const [hoveredNode, setHoveredNode] = useState(null)\n  const [isTracing, setIsTracing] = useState(false)\n\n  useEffect(() => {\n    // on first render, check the width\n    // if less than 800, provide alert about screen size\n    if (window.innerWidth < 800) {\n      alert('We see you\\'re on mobile! Rotate your phone sideways for the best experience. Check out our app on your computer too!')\n    }\n  }, [])\n\n  useEffect(() => {\n    if (data === null) {\n      Tabletop.init({\n        key: DataConstants.REAL_DATA_URL,\n        simpleSheet: true,\n      })\n        .then(data => {\n          // process data right away\n          const dataProc = DataUtils.processRawSheetsData(data)\n          console.log(dataProc)\n          setData(dataProc)\n          setTrace(dataProc)\n        })\n        .catch(console.warn)\n    }\n  }, [data])\n\n  // define function to set trace back to original data array\n  const resetTrace = () => setTrace(data)\n\n  return (\n    <div className=\"App\">\n      <div className=\"horizontal-stack\">\n        <div className=\"left-sidebar\">\n          <Sidebar\n            isLoading={isLoading}\n            selectedNode={selectedNode}\n            setSelectedNode={setSelectedNode}\n            isTracing={isTracing}\n            setIsTracing={setIsTracing}\n            trace={trace}\n          />\n        </div>\n        <div className=\"map-wrapper\">\n          <MapboxGLMap\n            trace={trace}\n            setIsLoading={setIsLoading}\n            selectedNode={selectedNode}\n            setSelectedNode={setSelectedNode}\n            hoveredNode={hoveredNode}\n            setHoveredNode={setHoveredNode}\n            isTracing={isTracing}\n            setTrace={setTrace}\n            resetTrace={resetTrace}\n          />\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}