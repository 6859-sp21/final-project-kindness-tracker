{"version":3,"sources":["utils/dataConstants.js","utils/dataUtils.js","components/mapboxGLMap/mapUtils.js","triangle.png","components/mapboxGLMap/lineUtils.js","components/tooltip/index.js","utils/stringUtils.js","utils/appMode.js","components/mapboxGLMap/index.js","components/sidebar/kindnessCard.js","components/sidebar/loadingSpinner.js","components/sidebar/infoCard.js","components/sidebar/traceStepper.js","components/sidebar/dataToggle.js","components/sidebar/traceStatistics.js","components/sidebar/index.js","components/search/index.js","App.js","reportWebVitals.js","index.js"],"names":["REAL_DATA_URL","ID_KEY_NAME","STREET_KEY_NAME","CITY_KEY_NAME","STATE_KEY_NAME","ZIP_KEY_NAME","KINDNESS_KEY_NAME","CENTER_LNG_KEY_NAME","CENTER_LAT_KEY_NAME","LNG_KEY","LAT_KEY","nodesAreEqual","one","two","index","filterTraceListForNode","data","node","id","DataConstants","filter","d","sort","a","b","dateTime","toMillis","formatFieldsForDisplay","streetNumber","street","address","city","state","cityState","zip","location","kindness","dateString","toLocaleString","DateTime","DATETIME_SHORT","generateLngLatArray","map","lng","lat","hideTooltip","callback","d3","transition","duration","style","on","resetAllCircleColors","fill","uniqueCircleId","circleClass","projectLngLatToXY","project","mapboxgl","LngLat","mapRender","attr","x","y","getBoudingObjectForTraceList","trace","lngLatPoints","paddingMiles","isRatioPadding","paddingDegreesLng","paddingDegreesLat","leftPadConstant","extractKey","key","maxLng","Math","max","minLng","min","maxLat","minLat","topRight","bottomLeft","DataUtils","length","bringCircleWithIdToFront","setTimeout","selectAll","remove","append","convertDatumToLngLatArray","computePointId","drawArcBetweenNodes","origin","destination","hash","idPoint","getSource","route","constructFeatureCollection","arcifyResult","lineDistance","turf","features","numSteps","floor","arc","i","segment","push","geometry","coordinates","arcifyFeatureCollection","routeProc","console","log","point","addSource","addLayer","hasImage","loadImage","triangleImage","error","image","addImage","counter","animatePoint","start","end","properties","bearing","source","setData","requestAnimationFrame","clearArcsForId","removeLayer","removeSource","TooltipContents","isSelected","inp","substring","DEFAULT","SELECTED","SEARCHING","TRACING","TRACE_STATS","accessToken","workerClass","MapboxWorker","MapboxGLMap","setIsLoading","selectedNode","setSelectedNode","hoveredNode","setHoveredNode","mode","setTrace","resetTrace","useState","setMap","boundingObject","setBoundingObject","mapContainer","useRef","prevLineId","setPrevLineId","nextLineId","setNextLineId","useEffect","Map","container","current","center","zoom","MapUtils","getCanvasContainer","join","enter","e","pageX","pageY","update","exit","boundingObjectNew","fitBounds","AppMode","nodes","newPrevLineId","newNextLineId","traceIndex","indexOf","prevNode","nextNode","LineUtils","drawAndZoomLines","traceNew","ref","el","className","KindnessCard","LoadingSpinner","SidebarInfoCard","fontSize","TraceStepper","exitTraceMode","n","Button","variant","color","disabled","onClick","DataToggle","dataUrl","setDataUrl","checked","label","FormControlLabel","control","Switch","onChange","event","eventChecked","target","labelPlacement","TraceStatistics","traceCount","lngLat","distance","firstDate","days","diff","toObject","toFixed","Sidebar","isLoading","clearSelectedNode","setMode","filterText","backgroundColor","href","src","KindnessSearchBar","filterNodes","setFilterText","value","cancelOnEscape","onRequestSearch","onCancelSearch","placeholder","App","trie","setTrie","window","innerWidth","alert","fetchData","Tabletop","init","simpleSheet","then","dataProc","fromFormat","numericalFields","forEach","f","ts","TrieSearch","idFieldOrFunction","addAll","catch","warn","text","dataFiltSearch","get","split","UNION_REDUCER","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e104b190.chunk.js","sourcesContent":["// const TIMESTAMP_KEY_NAME = 'Timestamp'\n// const ID_KEY_NAME = 'ID NUMBER on kindness card'\n// const CITY_KEY_NAME = 'CITY where act of kindness took place'\n// const STATE_KEY_NAME = 'STATE'\n// const ZIP_KEY_NAME = '[OPTIONAL] ZIP CODE'\n// const STREET_KEY_NAME = '[Optional] STREET NAME'\n// const KINDNESS_KEY_NAME = '[Optional] Tell us about the act of kindness you received!'\n// const CENTER_LNG_KEY_NAME = 'CenterLon'\n// const CENTER_LAT_KEY_NAME = 'CenterLat'\n\nconst REAL_DATA_URL = 'https://docs.google.com/spreadsheets/d/1IqEBIcnFZ_BFCrD8jhk11yVoOjfxzZpiZLdL4cL3oK0/pubhtml'\n\n// Massachusetts spoof data\nconst MASS_SPOOF_DATA_URL = 'https://docs.google.com/spreadsheets/d/1ILNeaJC675bNSCWHgAK-2hD6MNZB38PYh7Y90MncF50/pubhtml'\n\n// USA spoof data\nconst USA_SPOOF_DATA_URL = 'https://docs.google.com/spreadsheets/d/1BvBwyy1xYYhdiokMfbyxssu5nlB0arRMvxyuQLCzsH4/pubhtml'\n\nconst SPOOF_DATA_URL = MASS_SPOOF_DATA_URL\n\n// this is the format used by Google sheets\nconst TIMESTAMP_FORMAT = 'M/d/yyyy H:mm:ss'\n// 4/28/2021 13:36:45\n\n// this is the format that was originally used by Jack in spoof data\n// const TIMESTAMP_FORMAT = 'MM/dd/yy h:mm a'\n\n// TOOD add constants for new parsed geo fields when those are avaiable\nconst TIMESTAMP_KEY_NAME = 'Timestamp'\nconst ID_KEY_NAME = 'What is the ID Number on your kindness card? (We need this to track the spread of kindness!)'\nconst STREET_NUMBER_KEY_NAME = 'street_number'\nconst STREET_KEY_NAME = 'street_name'\nconst CITY_KEY_NAME = 'admin_level_3'\nconst STATE_KEY_NAME = 'admin_level_1'\nconst ZIP_KEY_NAME = 'zip_code'\nconst KINDNESS_KEY_NAME = 'Tell us about the act of kindness you received!'\nconst CENTER_LNG_KEY_NAME = 'center_lng'\nconst CENTER_LAT_KEY_NAME = 'center_lat'\n\n// also add a constant for the root ID\nconst ROOT_ACT_ID = 0\n\nexport {\n    TIMESTAMP_KEY_NAME,\n    ID_KEY_NAME,\n    STREET_NUMBER_KEY_NAME,\n    STREET_KEY_NAME,\n    CITY_KEY_NAME,\n    STATE_KEY_NAME,\n    ZIP_KEY_NAME,\n    KINDNESS_KEY_NAME,\n    CENTER_LNG_KEY_NAME,\n    CENTER_LAT_KEY_NAME,\n\n    REAL_DATA_URL,\n    SPOOF_DATA_URL,\n\n    TIMESTAMP_FORMAT,\n\n    ROOT_ACT_ID,\n}\n","import { DateTime } from  'luxon'\nimport * as DataConstants from './dataConstants'\n\nconst DEGREES_TO_MILES = 69\nconst LNG_KEY = 'lng'\nconst LAT_KEY = 'lat'\n\nconst processRawSheetsData = (data) => {\n    const dataProc = data ? data.map((d, i) => ({\n        ...d,\n        index: i,\n        dateTime: DateTime.fromFormat(d[DataConstants.TIMESTAMP_KEY_NAME], DataConstants.TIMESTAMP_FORMAT),\n        hash: `${i}-${d[DataConstants.TIMESTAMP_KEY_NAME]}`\n    })) : null\n\n    // convert certain fields to numbers\n    const numericalFields = [\n        DataConstants.ID_KEY_NAME,\n        DataConstants.CENTER_LNG_KEY_NAME,\n        DataConstants.CENTER_LAT_KEY_NAME,\n    ]\n\n    const dataProcNumerical = dataProc.map(d => {\n        numericalFields.forEach(f => {\n            d[f] = +d[f]\n        })\n        return d\n    })\n    return dataProcNumerical\n}\n\nconst nodesAreEqual = (one, two) => {\n    if (! one || ! two)\n        return false\n        \n    return one.index == two.index\n}\n\nconst computeLngLatBoundingBox = (lngLatPoints, paddingMiles, isRatioPadding = false, padLeft = true) => {\n    // compute top right and bottom left\n    // then, add some padding amount in miles\n    var paddingDegreesLng = 0\n    var paddingDegreesLat = 0\n    if (! isRatioPadding)\n        paddingDegreesLng = paddingMiles / DEGREES_TO_MILES\n        paddingDegreesLat = paddingDegreesLng\n    \n    // TODO fix hard coding here\n    const leftPadConstant = padLeft ? 5 : 1\n\n    const extractKey = key => lngLatPoints.map((d => d[key]))\n\n    const maxLng = Math.max(...extractKey(LNG_KEY))\n    const minLng = Math.min(...extractKey(LNG_KEY))\n    const maxLat = Math.max(...extractKey(LAT_KEY))\n    const minLat = Math.min(...extractKey(LAT_KEY))\n\n    if (isRatioPadding) {\n        paddingDegreesLng = (maxLng - minLng) * paddingMiles\n        paddingDegreesLat = (maxLat - minLat) * (paddingMiles * 12)\n    }\n\n    return {\n        topRight: {\n            lng: maxLng + paddingDegreesLng,\n            lat: minLat + paddingDegreesLat,\n        },\n        bottomLeft: {\n            lng: minLng - paddingDegreesLng * leftPadConstant,\n            lat: maxLat - paddingDegreesLat,\n        }\n    }\n}\n\nconst filterTraceListForNode = (data, node) => {\n    let dataFilt;\n    const id = node[DataConstants.ID_KEY_NAME]\n    if (id === DataConstants.ROOT_ACT_ID) {\n        // if the id is the root note, just select all of data\n        dataFilt = data\n    } else {\n        // select this id, and the root\n        dataFilt = data\n            .filter(d => \n                (d[DataConstants.ID_KEY_NAME] === id) ||\n                (d[DataConstants.ID_KEY_NAME] === DataConstants.ROOT_ACT_ID)\n            )\n    }\n\n    // apply sorting by date\n    const traceNew = dataFilt.sort((a, b) => a.dateTime.toMillis() - b.dateTime.toMillis())\n    return traceNew\n}\n\nconst formatFieldsForDisplay = (node) => {\n    const streetNumber = node[DataConstants.STREET_NUMBER_KEY_NAME]\n    const street = node[DataConstants.STREET_KEY_NAME]\n    const address = (streetNumber && street) ? `${(streetNumber ? `${streetNumber} ` : null)}${street}` : null\n    const city = node[DataConstants.CITY_KEY_NAME]\n    const state = node[DataConstants.STATE_KEY_NAME]\n    const cityState = (city || state) ? `${city}${city ? `, ${state}` : state}` : null\n    const zip = node[DataConstants.ZIP_KEY_NAME]\n    const location = `${address || 'No street address provided'}\\n${cityState || 'No city/state provided'}${zip ? `\\n${zip}` : ''}`\n    const kindness = node[DataConstants.KINDNESS_KEY_NAME]\n\n    // apply necessary parsing for date\n    const date = node.dateTime\n    const dateString = date.toLocaleString(DateTime.DATETIME_SHORT)\n\n    return {\n        kindness,\n        dateString,\n        location,\n        cityState,\n    }\n}\n\n// write function to quickly convert a data array to the fomat for lat lng\nconst generateLngLatArray = data => data.map(d => ({\n    lng: d[DataConstants.CENTER_LNG_KEY_NAME],\n    lat: d[DataConstants.CENTER_LAT_KEY_NAME],\n}))\n\nexport {\n    processRawSheetsData,\n    nodesAreEqual,\n    computeLngLatBoundingBox,\n    filterTraceListForNode,\n    formatFieldsForDisplay,\n    generateLngLatArray,\n}\n","import * as d3 from 'd3'\nimport mapboxgl from \"mapbox-gl\"\nimport * as DataConstants from '../../utils/dataConstants'\nimport * as DataUtils from '../../utils/dataUtils'\n\nconst POINT_ZOOM = 12\nconst ZOOM_EASE_MILLIS = 3000\nconst POINT_ZOOM_MILES = 1\nconst RATIO_PAD = 0.1\n\nconst initializeMap = ({ setMap, mapContainer }) => {\n    const map = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/light-v10',\n        center: [-100, 40],\n        zoom: 3,\n    })\n\n    map.on(\"load\", () => {\n        setMap(map)\n    })\n}\n\nconst zoomMapToBoundingObject = (map, boundingObject) => {\n    const { topRight, bottomLeft } = boundingObject\n    map.fitBounds([\n        [bottomLeft.lng, bottomLeft.lat],\n        [topRight.lng, topRight.lat]\n    ], {\n        duration: ZOOM_EASE_MILLIS,\n    })\n}\n\nconst showTooltip = (e, d) => {\n    const tooltip = d3.select('.map-tooltip')\n    tooltip\n        .transition()\n        .duration(0)\n        .style('opacity', 0.8)\n        .style('left', `${e.pageX + 50}px`)\n        .style('top', `${e.pageY - 50}px`)\n}\n\nconst hideTooltip = (callback) => {\n    const tooltip = d3.select('.map-tooltip')\n    tooltip\n        .transition().duration(500)\n        .style(\"opacity\", 0)\n        .on('end', callback)\n}\n\nconst resetAllCircleColors = (fill = 'steelblue') => {\n    return d3.selectAll('.circle')\n        .transition()\n        .duration(500)\n        .style('fill', fill)\n        .style('opacity', 1)\n}\n\nconst clearAllEventHandlers = (selection) => {\n    selection\n        .on('mouseover', null)\n        .on('mousemove', null)\n        .on('mouseout', null)\n        .on('click', null)\n}\n\n// write function to generate ID of circle\nconst uniqueCircleId = d => `circle-${d.index}`\n\n// write function to generate class of circle based off id key\nconst circleClass = d => `circle circle-${d[DataConstants.ID_KEY_NAME]}`\n\n// write projection function for map\nconst projectLngLatToXY = (map, d) => {\n    return map.project(\n        new mapboxgl.LngLat(d[DataConstants.CENTER_LNG_KEY_NAME], d[DataConstants.CENTER_LAT_KEY_NAME])\n    )\n}\n\nconst zoomToDataPoint = (map, d) => {\n    map.flyTo({\n        center: [\n            d[DataConstants.CENTER_LNG_KEY_NAME],\n            d[DataConstants.CENTER_LAT_KEY_NAME],\n        ],\n        zoom: POINT_ZOOM,\n        essential: true\n    })\n}\n\nconst mapRender = (map) => {\n    d3.selectAll('.circle')\n        .attr('cx', d => projectLngLatToXY(map, d).x)\n        .attr('cy', d => projectLngLatToXY(map, d).y)\n}\n\nconst getBoudingObjectForTraceList = (trace) => {\n    return DataUtils.computeLngLatBoundingBox(\n        DataUtils.generateLngLatArray(trace),\n        trace.length > 1 ? RATIO_PAD : POINT_ZOOM_MILES,\n        trace.length > 1 ? true : false,\n        trace.length > 1 ? true : false,\n    )\n}\n\nconst bringCircleWithIdToFront = (id) => {\n    setTimeout(() => {\n        d3.select('.map-svg')\n            .selectAll('use')\n            .remove()\n\n        d3.select('.map-svg')\n            .append('use')\n            .attr('xlink:href', id)\n    }, 500)\n}\n\nconst getPrevAndNextNodes = (trace, selectedNode) => {\n    const traceIndex = trace.indexOf(selectedNode)\n    const prevNode = traceIndex > 0 ? trace[traceIndex - 1] : null\n    const nextNode = traceIndex < trace.length - 1 ? trace[traceIndex + 1] : null\n    return {\n        prevNode,\n        nextNode,\n    }\n}\n\nexport {\n    initializeMap,\n    zoomMapToBoundingObject,\n    showTooltip,\n    hideTooltip,\n    resetAllCircleColors,\n    clearAllEventHandlers,\n    uniqueCircleId,\n    circleClass,\n    projectLngLatToXY,\n    zoomToDataPoint,\n    mapRender,\n    getBoudingObjectForTraceList,\n    bringCircleWithIdToFront,\n    getPrevAndNextNodes,\n}\n","export default __webpack_public_path__ + \"static/media/triangle.c5a97129.png\";","import * as turf from '@turf/turf'\nimport * as DataConstants from '../../utils/dataConstants'\nimport triangleImage from '../../triangle.png'\n\nconst MILES_PER_STEP = 10\nconst MIN_NUM_STEPS = 100\n\nconst convertDatumToLngLatArray = d => [\n    d[DataConstants.CENTER_LNG_KEY_NAME],\n    d[DataConstants.CENTER_LAT_KEY_NAME],\n]\n\nconst computePointId = (id) => `${id}-point`\n\nconst constructFeatureCollection = (origin, destination) => ({\n    'type': 'FeatureCollection',\n    'features': [\n        {\n            'type': 'Feature',\n            'geometry': {\n                'type': 'LineString',\n                'coordinates': [\n                    convertDatumToLngLatArray(origin),\n                    convertDatumToLngLatArray(destination),\n                ],\n            },\n        },\n    ],\n})\n\nconst arcifyFeatureCollection = (route) => {\n    // src: https://docs.mapbox.com/mapbox-gl-js/example/animate-point-along-route/\n    // Calculate the distance in kilometers between route start/end point.\n    const lineDistance = turf.length(route.features[0])\n    const numSteps = Math.max(Math.floor(lineDistance / MILES_PER_STEP), MIN_NUM_STEPS)\n\n    const arc = []\n\n    // Draw an arc between the `origin` & `destination` of the two points\n    for (var i = 0; i < lineDistance; i += lineDistance / numSteps) {\n        const segment = turf.along(route.features[0], i)\n        arc.push(segment.geometry.coordinates)\n    }\n\n    // append a final segment\n    const segment = turf.along(route.features[0], lineDistance)\n    arc.push(segment.geometry.coordinates)\n\n    // Update the route with calculated arc coordinates\n    route.features[0].geometry.coordinates = arc\n    return {\n        route,\n        numSteps,\n    }\n}\n\nconst drawArcBetweenNodes = (map, origin, destination) => {\n    const id = `${origin.hash} -> ${destination.hash}`\n    const idPoint = computePointId(id)\n\n    // if already exists, just return\n    if (map.getSource(id)) {\n        return id\n    }\n\n    const route = constructFeatureCollection(origin, destination)\n    const arcifyResult = arcifyFeatureCollection(route)\n    const routeProc = arcifyResult.route\n    const { numSteps } = arcifyResult\n\n    console.log(numSteps, '!!!!!!')\n\n    // set up point to animate\n    // A single point that animates along the route.\n    // Coordinates are initially set to origin.\n    const point = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': convertDatumToLngLatArray(origin),\n                },\n            },\n        ],\n    }\n\n    map.addSource(id, {\n        'type': 'geojson',\n        'data': routeProc\n    })\n\n    map.addLayer({\n        'id': id,\n        'source': id,\n        'type': 'line',\n        'paint': {\n            'line-width': 5,\n            'line-color': 'black'\n        },\n        'layout': {\n            'line-cap': 'round',\n            'line-join': 'round',\n        },\n    })\n\n    if (!map.hasImage('triangle')) {\n        map.loadImage(\n            triangleImage,\n            function (error, image) {\n                if (error) throw error;\n\n                // Add the image to the map style.\n                map.addImage('triangle', image)\n            }\n        )\n    }\n\n    map.addSource(idPoint, {\n        'type': 'geojson',\n        'data': point\n    })\n\n    map.addLayer({\n        'id': idPoint,\n        'source': idPoint,\n        'type': 'symbol',\n        'layout': {\n            // This icon is a part of the Mapbox Streets style.\n            // To view all images available in a Mapbox style, open\n            // the style in Mapbox Studio and click the \"Images\" tab.\n            // To add a new image to the style at runtime see\n            // https://docs.mapbox.com/mapbox-gl-js/example/add-image/\n            'icon-image': 'triangle', // works: heliport-15\n            // doesn't work: rectangle-blue-2\n            'icon-rotate': ['get', 'bearing'],\n            'icon-rotation-alignment': 'map',\n            'icon-allow-overlap': true,\n            'icon-ignore-placement': true,\n            'icon-size': .02,\n        }\n    })\n\n    let counter = 0\n\n    const animatePoint = () => {\n        var start =\n            route.features[0].geometry.coordinates[\n            counter >= numSteps ? counter - 1 : counter\n            ]\n        var end =\n            route.features[0].geometry.coordinates[\n            counter >= numSteps ? counter : counter + 1\n            ]\n        if (!start || !end) return;\n\n        // Update point geometry to a new position based on counter denoting\n        // the index to access the arc\n        point.features[0].geometry.coordinates =\n            route.features[0].geometry.coordinates[counter]\n\n        // Calculate the bearing to ensure the icon is rotated to match the route arc\n        // The bearing is calculated between the current point and the next point, except\n        // at the end of the arc, which uses the previous point and the current point\n        point.features[0].properties.bearing = turf.bearing(\n            turf.point(start),\n            turf.point(end)\n        )\n\n        // Update the source with this new data\n        const source = map.getSource(idPoint)\n        if (!source) {\n            // this has been removed - stop the animation\n            return\n        }\n\n        source.setData(point)\n\n        // Request the next frame of animation as long as the end has not been reached\n        if (counter < numSteps) {\n            setTimeout(() => requestAnimationFrame(animatePoint), 500)\n        } else {\n            counter = 0\n            setTimeout(() => requestAnimationFrame(animatePoint), 500)\n        }\n\n        counter = counter + 10\n    }\n\n    // start the animation\n    animatePoint()\n\n    return id\n}\n\nconst clearArcsForId = (map, id) => {\n    if (!id) {\n        return\n    }\n\n    map.removeLayer(id)\n    map.removeSource(id)\n\n    // also clear the associated point\n    const idPoint = computePointId(id)\n    map.removeLayer(idPoint)\n    map.removeSource(idPoint)\n}\n\nexport {\n    drawArcBetweenNodes,\n    clearArcsForId,\n}\n","import * as DataConstants from '../../utils/dataConstants'\nimport * as StringUtils from '../../utils/stringUtils'\nimport * as DataUtils from '../../utils/dataUtils'\n\nconst TooltipContents = ({ node, isSelected }) => {\n    // handle null node case\n    if (! node) {\n        return null;\n    }\n\n    console.log('rendering tooltip')\n\n    const {\n        kindness,\n        cityState,\n    } = DataUtils.formatFieldsForDisplay(node)\n\n\n    return (\n        <div>\n            <p><b>{StringUtils.trimWithElipses(kindness, 140)}</b></p>\n            <p><i>{cityState}</i></p>\n            <p>{! isSelected ? 'Click for more info!' : null}</p>\n        </div>\n    )\n}\n\nexport default TooltipContents\n","const trimWithElipses = (inp, length) => {\n    if (inp.length > length) {\n        return `${inp.substring(0, length)}...`\n    }\n    \n    return inp\n}\n\nexport {\n    trimWithElipses\n}","const DEFAULT = 'default'\nconst SELECTED = 'selected'\nconst SEARCHING = 'searching'\nconst TRACING = 'tracing'\nconst TRACE_STATS = 'trace-stats'\n\nexport {\n    DEFAULT,\n    SELECTED,\n    SEARCHING,\n    TRACING,\n    TRACE_STATS,\n}\n","import React, { useEffect, useRef, useState } from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport * as d3 from 'd3'\nimport * as MapUtils from './mapUtils'\nimport * as LineUtils from './lineUtils'\nimport * as DataConstants from '../../utils/dataConstants'\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker'\nimport TooltipContents from '../tooltip'\nimport * as DataUtils from '../../utils/dataUtils'\nimport * as AppMode from '../../utils/appMode'\n\nimport '../../styles/Map.css'\n\nconst DEFAULT_RADIUS = 10\nconst BIG_RADIUS = 20\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiY21vcm9uZXkiLCJhIjoiY2tudGNscDJjMDFldDJ3b3pjMTh6ejJyayJ9.YAPmFkdy_Eh9K20cFlIvaQ'\nmapboxgl.workerClass = MapboxWorker\n\nconst MapboxGLMap = ({ trace, setIsLoading, selectedNode, setSelectedNode, hoveredNode, setHoveredNode, mode, setTrace, resetTrace }) => {\n    const [map, setMap] = useState(null)\n    const [boundingObject, setBoundingObject] = useState(null)\n    const mapContainer = useRef(null)\n    const [prevLineId, setPrevLineId] = useState(null)\n    const [nextLineId, setNextLineId] = useState(null)\n\n    // todo refactor\n    const drawAndZoomLines = () => {\n        const {\n            prevNode,\n            nextNode,\n        } = MapUtils.getPrevAndNextNodes(trace, selectedNode)\n\n        let newPrevLineId, newNextLineId\n\n        if (prevNode) {\n            newPrevLineId = LineUtils.drawArcBetweenNodes(map, prevNode, selectedNode)\n        }\n        if (nextNode) {\n            newNextLineId = LineUtils.drawArcBetweenNodes(map, selectedNode, nextNode)\n        }\n\n        // delete any arcs that are not currently drawn\n        if (prevLineId !== newPrevLineId && prevLineId !== newNextLineId) {\n            LineUtils.clearArcsForId(map, prevLineId)\n        }\n        if (nextLineId !== newPrevLineId && nextLineId !== newNextLineId) {\n            LineUtils.clearArcsForId(map, nextLineId)\n        }\n\n        // update our ids\n        setPrevLineId(newPrevLineId)\n        setNextLineId(newNextLineId)\n\n        // update the bounding box to include current, prev and next\n        const nodes = [selectedNode]\n        if (prevNode) {\n            nodes.push(prevNode)\n        }\n        if (nextNode) {\n            nodes.push(nextNode)\n        }\n        const boundingObjectNew = MapUtils.getBoudingObjectForTraceList(nodes)\n        setBoundingObject(boundingObjectNew)\n\n        // return the prev and next for reference\n        return {\n            nodes,\n        }\n    }\n\n    const clearAllLines = () => {\n        if (!map)\n            return\n\n        // clear any previous ids\n        LineUtils.clearArcsForId(map, prevLineId)\n        LineUtils.clearArcsForId(map, nextLineId)\n\n        // clear the ids\n        setPrevLineId(null)\n        setNextLineId(null)\n    }\n\n    // let's init our map first again\n    useEffect(() => {\n        if (map === null) {\n            // need to init the map since it is null\n            MapUtils.initializeMap({ setMap, mapContainer })\n        } else {\n            // also append an svg to the map for later use\n            // TODO put this in css\n            var container = map.getCanvasContainer()\n            d3.select(container)\n                .append('svg')\n                .attr('class', 'map-svg')\n                .attr('width', '100%')\n                .attr('height', '100%')\n                .style('position', 'absolute')\n                .style('z-index', 2)\n                .style('top', 0)\n                .style('left', 0)\n\n            // also set up map events for re-render\n            map.on('viewreset', () => MapUtils.mapRender(map))\n            map.on('move', () => MapUtils.mapRender(map))\n            map.on('moveend', () => MapUtils.mapRender(map))\n        }\n    }, [map])\n\n    // here is where we do our data join for trace points\n    useEffect(() => {\n        if (map && trace) {\n            // do a data join on all the trace points with d3\n            console.log('>>> JOINING')\n            d3.select('.map-svg')\n                .selectAll('circle')\n                .data(trace, d => d.hash)\n                .join(\n                    enter => enter\n                        .append('circle')\n                        .attr('id', MapUtils.uniqueCircleId)\n                        .attr('class', MapUtils.circleClass)\n                        .attr('r', DEFAULT_RADIUS)\n                        .style('fill', 'steelblue')\n                        .style('opacity', d => {\n                            if (selectedNode && DataUtils.nodesAreEqual(d, selectedNode)) {\n                                return 1\n                            } else if (selectedNode && !DataUtils.nodesAreEqual(d, selectedNode)) {\n                                return 0.5\n                            } else {\n                                return 1\n                            }\n                        })\n                        .on('click', (e, d) => setSelectedNode(d))\n                        .on('mouseover', (e, d) => {\n                            setHoveredNode(d)\n                            MapUtils.showTooltip(e, d)\n                        })\n                        .on('mouseout', (e, d) => {\n                            MapUtils.hideTooltip(() => setHoveredNode(null))\n                        }),\n                    update => update,\n                    exit => exit.remove()\n                )\n\n            // perform initial render\n            MapUtils.mapRender(map)\n\n            // also complete loading\n            setIsLoading(false)\n\n            // update bounding box with the initial view\n            const boundingObjectNew = MapUtils.getBoudingObjectForTraceList(trace)\n            setBoundingObject(boundingObjectNew)\n        }\n    }, [map, trace])\n\n    // THE PURPOSE OF THIS EFFECT IS TO ZOOM ON THE MAP\n    // WE RE-ZOOM WHEN:\n    // 1. BOUNDING BOX CHANGES\n    // 2. SELECTED NODE BECOMES NULL \n    // listen for changes in the bounding box\n    useEffect(() => {\n        if (map && boundingObject) {\n            MapUtils.zoomMapToBoundingObject(map, boundingObject)\n\n            // always clear the tooltip and hovered node in this case\n            setTimeout(() => MapUtils.hideTooltip(() => setHoveredNode(null)), 500)\n        }\n    }, [map, boundingObject])\n\n    // listen for changes in the selected node\n    // IF GENERAL NON TRACE MODE\n    //     IF SELECTED NODE NON NULL, ZOOM TO IT AND MAKE IT RED\n    //     ELSE, RESET TO ALL POINTS AND MAKE ALL POINTS BLUE\n    // IF TRACE MODE\n    //     MAKE IT GREEN, ALL OTHERS PURPLE\n    useEffect(() => {\n        if (mode === AppMode.SELECTED && selectedNode) {\n            // handle colors\n            // make other circles not red, and less opaque\n            MapUtils.resetAllCircleColors()\n                .style('opacity', 0.5)\n\n            // make this circle red and dark\n            const id = `#${MapUtils.uniqueCircleId(selectedNode)}`\n            d3.select(id)\n                .transition()\n                .duration(500)\n                .style('fill', 'red')\n                .style('opacity', 1)\n                .attr('r', DEFAULT_RADIUS)\n\n            // draw it over all other circles\n            MapUtils.bringCircleWithIdToFront(id)\n\n            // update bounding box\n            const boundingObjectNew = MapUtils.getBoudingObjectForTraceList([selectedNode])\n            setBoundingObject(boundingObjectNew)\n        } else if ((mode === AppMode.DEFAULT || mode === AppMode.SEARCHING || mode === AppMode.TRACE_STATS) && trace) {\n            // reset the bounding box to original trace points\n            const boundingObjectNew = MapUtils.getBoudingObjectForTraceList(trace)\n            setBoundingObject(boundingObjectNew)\n\n            // also clear the color\n            MapUtils.resetAllCircleColors()\n                .attr('r', DEFAULT_RADIUS)\n        } else if (mode === AppMode.TRACING) {\n            // if we have selected the root node, we need to be sure to zoom to original trace\n            if (selectedNode[DataConstants.ID_KEY_NAME] === DataConstants.ROOT_ACT_ID) {\n                const boundingObjectNew = MapUtils.getBoudingObjectForTraceList(trace)\n                setBoundingObject(boundingObjectNew)\n            }\n\n            // set up our lines\n            const {\n                nodes,\n            } = drawAndZoomLines()\n\n            console.log(nodes, 'jaflfjljfjslfjks')\n\n            // update circle colors\n            d3.selectAll('.circle')\n                .filter(d => nodes.indexOf(d) === -1)\n                .transition()\n                .duration(500)\n                .style('fill', 'purple')\n                .style('opacity', 0)\n                .attr('r', DEFAULT_RADIUS)\n\n            d3.selectAll('.circle')\n                .filter(d => (nodes.indexOf(d) > -1 && d.hash !== selectedNode.hash))\n                .transition()\n                .duration(500)\n                .style('fill', 'purple')\n                .style('opacity', 1)\n                .attr('r', DEFAULT_RADIUS)\n\n            // make the selected node bigger and green\n            const id = `#${MapUtils.uniqueCircleId(selectedNode)}`\n\n            d3.select(id)\n                .transition()\n                .duration(500)\n                .style('fill', 'green')\n                .attr('r', BIG_RADIUS) // TODO add this back if we want\n                .style('opacity', 1)\n\n            // draw it over all other circles\n            MapUtils.bringCircleWithIdToFront(id)\n\n        }\n    }, [mode, selectedNode, trace])\n\n    // listen for changes in the mode state\n    // re-filter the trace list as needed\n    useEffect(() => {\n        if (mode === AppMode.TRACING) {\n            // filter on the current node\n            const traceNew = DataUtils.filterTraceListForNode(trace, selectedNode)\n            setTrace(traceNew)\n            return\n        }\n\n        // non-trace mode - clear all lines\n        clearAllLines()\n\n        if (mode === AppMode.DEFAULT) {\n            // reset trace back to original data array\n            resetTrace()\n        } else if (mode === AppMode.SEARCHING) {\n            // do nothing, this should be handled by the search bar\n        } else if (mode === AppMode.SELECTED) {\n            // reset trace back to original data array\n            resetTrace()\n        } else if (mode === AppMode.TRACE_STATS) {\n            // do nothing\n        }\n    }, [mode])\n\n    return <div ref={el => (mapContainer.current = el)} className='map-container-div'>\n        {\n            mode !== AppMode.TRACING ? (\n                <div className='map-tooltip' style={{ 'opacity': 0 }}>\n                    <TooltipContents node={hoveredNode} isSelected={DataUtils.nodesAreEqual(hoveredNode, selectedNode)} />\n                </div>\n            ) : null\n        }\n    </div>\n}\n\nexport default MapboxGLMap\n","import * as DataUtils from '../../utils/dataUtils'\n\nconst KindnessCard = ({ node }) => {\n    console.log('rendering card')\n    // handle null node case\n    if (! node) {\n        return null;\n    }\n\n    console.log(node)\n\n    const {\n        kindness,\n        dateString,\n        location,\n    } = DataUtils.formatFieldsForDisplay(node)\n\n    return (\n        <div className=\"kindness-card-inner\">\n            <p>Act of Kindness:</p>\n            <div className=\"kindness-card-description\">\n                <p><b>{kindness || 'No kindness description provided!'}</b></p>\n            </div>\n            <p>Location:</p>\n            <p><b>{location}</b></p>\n            <p>Date & Time:</p>\n            <p><b>{dateString}</b></p>\n        </div>\n    )\n}\n\nexport default KindnessCard","import '../../styles/Loading.css'\n\nconst LoadingSpinner = () => {\n    console.log('rendering loading')\n    return (\n        <div className=\"loading-wrapper\">\n            <div className=\"la-ball-clip-rotate la-2x\">\n                <div></div>\n            </div>\n            <p>Loading...</p>\n        </div>\n    )\n}\n\nexport default LoadingSpinner\n","import MouseIcon from '@material-ui/icons/Mouse'\nimport ExploreIcon from '@material-ui/icons/Explore'\nimport ToggleOffIcon from '@material-ui/icons/ToggleOff'\nimport SearchIcon from '@material-ui/icons/Search'\n\n/*\n    Simple component to render some useful info when no node is selected.\n*/\nconst SidebarInfoCard = () => {\n    console.log('rendering side info card')\n    return (\n        <div>\n            <hr className=\"sidebar-divider\" />\n            <div className=\"sidebar-info-row\">\n                <div className=\"sidebar-info-left\">\n                    <MouseIcon fontSize=\"large\" />\n                </div>\n                <div className=\"sidebar-info-right\">\n                    <p><b>Click</b> a circle to explore that act of kindness further!</p>\n                </div>\n            </div>\n            <div className=\"sidebar-info-row\">\n                <div className=\"sidebar-info-left\">\n                    <ExploreIcon fontSize=\"large\" />\n                </div>\n                <div className=\"sidebar-info-right\">\n                    <p>Then, you can <b>trace</b> that act of kindness to see how may people have paid it forward.</p>\n                </div>\n            </div>\n            <div className=\"sidebar-info-row sidebar-info-row-toggle\">\n                <div className=\"sidebar-info-left\">\n                    <ToggleOffIcon fontSize=\"large\" />\n                </div>\n                <div className=\"sidebar-info-right\">\n                    <p>Switch between <b>real-time</b> and <b>generated</b> data using the toggle below.</p>\n                </div>\n            </div>\n            <div className=\"sidebar-info-row sidebar-info-row-search\">\n                <div className=\"sidebar-info-left\">\n                    <SearchIcon fontSize=\"large\" />\n                </div>\n                <div className=\"sidebar-info-right\">\n                    <p><b>Search</b> for acts of kindness by description, location, or ID.</p>\n                </div>\n            </div>\n        </div >\n    )\n}\n\n// Search for acts of kindness by description, location, or ID\n\nexport default SidebarInfoCard","import KindnessCard from './kindnessCard'\nimport { Button } from '@material-ui/core'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward'\n\nconst TraceStepper = ({ exitTraceMode, trace, selectedNode, setSelectedNode }) => {\n    console.log('rendering trace')\n\n    // find the trace index\n    const traceIndex = trace.indexOf(selectedNode)\n\n    const n = trace.length\n\n    return (\n        <div className=\"trace-stepper-wrapper\">\n            <div className=\"trace-stepper-button-horizontal\">\n                <Button\n                    className=\"trace-stepper-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={traceIndex === 0}\n                    onClick={() => setSelectedNode(trace[0])}\n                >\n                    First\n                </Button>\n                <Button\n                    className=\"trace-stepper-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={traceIndex === 0}\n                    onClick={() => setSelectedNode(trace[traceIndex - 1])}\n                >\n                    <ArrowBackIcon />\n                </Button>\n                <Button\n                    className=\"trace-stepper-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={traceIndex === n - 1}\n                    onClick={() => setSelectedNode(trace[traceIndex + 1])}\n                >\n                    <ArrowForwardIcon />\n                </Button>\n                <Button\n                    className=\"trace-stepper-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={traceIndex === n - 1}\n                    onClick={() => setSelectedNode(trace[n - 1])}\n                >\n                    Last\n                </Button>\n            </div>\n            <p>{`${traceIndex + 1} / ${trace.length}`}</p>\n            <KindnessCard node={selectedNode} />\n        </div>\n    )\n}\n\nexport default TraceStepper\n","import FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport * as DataConstants from '../..//utils/dataConstants'\n\nconst DataToggle = ({ dataUrl, setDataUrl }) => {\n    const checked = dataUrl === DataConstants.REAL_DATA_URL\n\n    const handleChange = (event) => {\n        const eventChecked = event.target.checked\n        const dataUrlNew = eventChecked ? DataConstants.REAL_DATA_URL : DataConstants.SPOOF_DATA_URL\n        setDataUrl(dataUrlNew)\n    }\n\n    const label = dataUrl === DataConstants.REAL_DATA_URL ? 'Viewing Real Data' : 'Viewing Fake Data'\n    \n    return (\n        <FormControlLabel\n            control={\n                <Switch\n                    checked={checked}\n                    onChange={handleChange}\n                    // value={'checked'}\n                    color='primary'\n                />\n            }\n            labelPlacement='top'\n            label={label}\n        />\n    )\n}\n\nexport default DataToggle","import * as turf from '@turf/turf'\nimport * as DataUtils from '../../utils/dataUtils'\n\nconst TraceStatistics = ({ trace }) => {\n    console.log('rendering trace stats')\n\n    const traceCount = trace.length\n    \n    // compute total distance travelled in miles\n    const lngLat = DataUtils.generateLngLatArray(trace)\n    let distance = 0\n    for (let i = 0; i < trace.length - 1; i++) {\n        distance += turf.distance(\n            turf.point([lngLat[i].lng, lngLat[i].lat]),\n            turf.point([lngLat[i + 1].lng, lngLat[i + 1].lat]),\n            {\n                'units': 'miles'\n            },\n        )\n    }\n\n    // compute total time between first and last act\n    const firstDate = trace[0].dateTime\n    const lastDate = trace[trace.length - 1].dateTime\n    const diffDays = lastDate.diff(firstDate, 'days')\n    const { days } = diffDays.toObject()\n\n    return (\n        <div className=\"trace-statistics-inner\">\n            <div className=\"sidebar-clear-div\">\n                <h1>{traceCount}</h1>\n                <p>acts of kindness in this trace 😊</p>\n                <br></br>\n                <h1>{distance.toFixed(1)}</h1>\n                <p>total miles travelled 🌍</p>\n                <br></br>\n                <h1>{days.toFixed(1)}</h1>\n                <p>days between first & last act 📅 </p>\n            </div>\n        </div>\n    )\n}\n\nexport default TraceStatistics","import React from 'react'\nimport { Button } from '@material-ui/core'\nimport '../../styles/Sidebar.css'\nimport KindnessCard from './kindnessCard'\nimport LoadingSpinner from './loadingSpinner'\nimport SidebarInfoCard from './infoCard'\nimport TraceStepper from './traceStepper'\nimport DataToggle from './dataToggle'\nimport TraceStatistics from './traceStatistics'\nimport * as DataUtils from '../../utils/dataUtils'\nimport * as AppMode from '../../utils/appMode'\n\nconst Sidebar = ({ isLoading, selectedNode, setSelectedNode, clearSelectedNode, mode, setMode, trace, dataUrl, setDataUrl, filterText }) => {\n    console.log('rendering sidebar')\n\n    // get a trace count\n    let traceCount = 0\n    if (selectedNode) {\n        const traceFilterList = DataUtils.filterTraceListForNode(trace, selectedNode)\n        traceCount = traceFilterList.length - 1\n    }\n    return (\n        <div className=\"sidebar-flex\">\n            <h1>Kindness Tracker</h1>\n            {\n                isLoading ? <LoadingSpinner /> : null\n            }\n            {\n                !isLoading && mode === AppMode.DEFAULT ? <SidebarInfoCard /> : null\n            }\n            {\n                mode === AppMode.SELECTED ? (\n                    <div className=\"sidebar-clear-div\">\n                        <Button variant=\"contained\" style={{ backgroundColor: 'red', color: 'white' }} className=\"sidebar-button-below\" onClick={clearSelectedNode}>Clear Selection</Button>\n                        <Button variant=\"contained\" style={{ backgroundColor: 'green', color: 'white' }} className=\"sidebar-button-below\" onClick={() => setMode(AppMode.TRACING)}>Trace this Act!</Button>\n                        <h1>{traceCount}</h1>\n                        <p>{traceCount > 1 ? 'acts' : 'act'} of kindness {traceCount > 1 ? 'are' : 'is'} connected</p>\n                    </div>\n                ) : null\n            }\n            { mode === AppMode.SELECTED ? (\n                <div className=\"selected-card-wrapper\">\n                    <KindnessCard node={selectedNode} />\n                </div>\n            ) : null\n            }\n            {\n                mode === AppMode.TRACING ? (\n                    <div className=\"trace-stepper-button-exit\">\n                        <Button variant=\"contained\" style={{ backgroundColor: 'red', color: 'white' }} onClick={() => setMode(AppMode.SELECTED)}>\n                            Exit Trace Mode\n                        </Button>\n                    </div>\n                ) : null\n            }\n            {\n                mode === AppMode.TRACE_STATS ? (\n                    <div className=\"trace-stepper-button-exit\">\n                        <Button variant=\"contained\" style={{ backgroundColor: 'red', color: 'white' }} onClick={() => setMode(AppMode.TRACING)}>\n                            Back to Trace Mode\n                        </Button>\n                    </div>\n                ) : null\n            }\n            {\n                mode === AppMode.TRACING ? (\n                    <div>\n                        <TraceStepper\n                            exitTraceMode={() => setMode(AppMode.SELECTED)}\n                            trace={trace}\n                            selectedNode={selectedNode}\n                            setSelectedNode={setSelectedNode}\n                        />\n                        <Button variant=\"contained\" style={{ backgroundColor: 'green', color: 'white' }} className=\"sidebar-button-above\" onClick={() => setMode(AppMode.TRACE_STATS)}>View Trace Statistics</Button>\n                    </div>\n                ) : null\n            }\n            {\n                mode === AppMode.TRACE_STATS ? (\n                    <TraceStatistics trace={trace} />\n                ) : null\n            }\n            {\n                mode === AppMode.SEARCHING && trace.length > 0 ? (\n                    <div className=\"sidebar-clear-div\">\n                        <h1>{trace.length}</h1>\n                        <p>{trace.length > 1 ? 'acts' : 'act'} found for search query \"{filterText}\".</p>\n                        <p>Press Esc to clear.</p>\n                    </div>\n                ) : null\n            }\n            <div className=\"sidebar-bottom-content\">\n                <div className=\"data-toggle-outer\">\n                    <DataToggle\n                        dataUrl={dataUrl}\n                        setDataUrl={setDataUrl}\n                    />\n                </div>\n                <p className=\"sidebar-small-text\">Christian Moroney, Jackson Bernatchez, Kevin Lyons</p>\n                <p className=\"sidebar-small-text\">6.859 Final Project Spring 2021</p>\n                <div>\n                    <a href=\"https://github.com/6859-sp21/final-project-kindness-tracker\" target=\"_blank\">\n                        <img className=\"sidebar-git-image\" src=\"https://image.flaticon.com/icons/png/512/25/25231.png\"></img>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Sidebar\n","import React, { useEffect, useState } from 'react'\nimport SearchBar from 'material-ui-search-bar'\n\nconst KindnessSearchBar = ({ filterNodes, filterText, setFilterText }) => {\n    return (\n        <SearchBar\n          value={filterText || ''}\n          onChange={setFilterText}\n          cancelOnEscape={true}\n          onRequestSearch={() => filterNodes(filterText)}\n          onCancelSearch={() => { setFilterText(null); filterNodes(null) }}\n          placeholder={'Search for acts of kindness by description, location, or ID. Press Enter to search. ⏎'}\n        />\n      );\n}\n\nexport default KindnessSearchBar","import React, { useEffect, useState } from 'react'\nimport Tabletop from 'tabletop'\nimport { Sidebar, KindnessSearchBar, MapboxGLMap } from './components'\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp'\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker'\nimport TrieSearch from 'trie-search'\nimport * as DataConstants from './utils/dataConstants'\nimport * as DataUtils from './utils/dataUtils'\nimport * as AppMode from './utils/appMode'\n\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiY21vcm9uZXkiLCJhIjoiY2tudGNscDJjMDFldDJ3b3pjMTh6ejJyayJ9.YAPmFkdy_Eh9K20cFlIvaQ'\nmapboxgl.workerClass = MapboxWorker\nmapboxgl.accessToken = MAPBOX_ACCESS_TOKEN\n\nimport './styles/App.css'\n\nconst App = () => {\n  const [data, setData] = useState(null)\n  const [trace, setTrace] = useState(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const [selectedNode, setSelectedNode] = useState(null)\n  const [hoveredNode, setHoveredNode] = useState(null)\n  const [dataUrl, setDataUrl] = useState(DataConstants.REAL_DATA_URL)\n  const [trie, setTrie] = useState(null)\n  const [filterText, setFilterText] = useState(null)\n  const [mode, setMode] = useState(AppMode.DEFAULT)\n\n  useEffect(() => {\n    // on first render, check the width\n    // if less than 800, provide alert about screen size\n    if (window.innerWidth < 800) {\n      alert('We see you\\'re on mobile! Rotate your phone sideways for the best experience. Check out our app on your computer too!')\n    }\n  }, [])\n\n  const fetchData = () => {\n    console.log('fetching!')\n    Tabletop.init({\n      key: dataUrl,\n      simpleSheet: true,\n    })\n      .then(data => {\n        // process data right away\n        const dataProc = DataUtils.processRawSheetsData(data)\n        setData(dataProc)\n        setTrace(dataProc)\n\n        // set up our search object\n        const ts = new TrieSearch([\n          DataConstants.ID_KEY_NAME,\n          DataConstants.KINDNESS_KEY_NAME,\n          DataConstants.STREET_KEY_NAME,\n          DataConstants.CITY_KEY_NAME,\n          DataConstants.STATE_KEY_NAME,\n          DataConstants.ZIP_KEY_NAME,\n        ], {\n          idFieldOrFunction: 'index',\n        })\n        ts.addAll(dataProc)\n        setTrie(ts)\n      })\n      .catch(console.warn)\n  }\n\n  useEffect(() => {\n    if (data === null) {\n      fetchData()\n    }\n  }, [data])\n\n  // listen for changes in the data url via a toggle\n  useEffect(() => {\n    if (data !== null) {\n      // reset all required state before re-fetch\n      setIsLoading(true)\n      setSelectedNode(null)\n      setFilterText(null)\n      setHoveredNode(null)\n      setMode(AppMode.DEFAULT)\n      fetchData()\n    }\n  }, [dataUrl])\n\n  // define function to set trace back to original data array\n  const resetTrace = () => setTrace(data)\n\n  // function to clear selected node\n  const clearSelectedNode = () => {\n    setSelectedNode(null)\n    setMode(AppMode.DEFAULT)\n    setFilterText(null)\n  }\n\n  // define function to filter nodes based on a query string\n  const filterNodes = (text) => {\n    // update state\n    setIsLoading(true)\n\n    // handle no filter\n    if (!text) {\n      // reset to all data\n      setTrace(data)\n      setIsLoading(false)\n      setMode(AppMode.DEFAULT)\n      return\n    }\n\n    // TrieSearch.UNION_REDUCER gives us an AND over the text\n    const dataFiltSearch = trie.get(text.split(' '), TrieSearch.UNION_REDUCER)\n\n    // handle empty data case\n    if (dataFiltSearch.length === 0) {\n      // TODO clean this up\n      alert('No results found! Try another search query.')\n      setIsLoading(false)\n      setMode(AppMode.DEFAULT)\n      return\n    }\n\n    setSelectedNode(null)\n    setHoveredNode(null)\n    setMode(AppMode.SEARCHING)\n    setTrace(dataFiltSearch)\n  }\n\n  const handleSetSelectedNode = (node) => {\n    // change to selection mode\n    setMode(AppMode.SELECTED)\n\n    // reset the trace\n    resetTrace()\n\n    // update the selected node as normal\n    setSelectedNode(node)\n  }\n\n  const handleSetFilterText = (text) => {\n    // get out of search mode and go back to default\n    setMode(AppMode.DEFAULT)\n\n    // still update our filter text so we have it\n    setFilterText(text)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"horizontal-stack\">\n        <div className=\"left-sidebar\">\n          <Sidebar\n            isLoading={isLoading}\n            selectedNode={selectedNode}\n            setSelectedNode={setSelectedNode}\n            clearSelectedNode={clearSelectedNode}\n            mode={mode}\n            setMode={setMode}\n            trace={trace}\n            dataUrl={dataUrl}\n            setDataUrl={setDataUrl}\n            filterText={filterText}\n          />\n        </div>\n        <div className=\"vertical-stack\">\n          {\n            mode === AppMode.DEFAULT || mode === AppMode.SEARCHING ? (\n              <div className=\"search-bar-wrapper\">\n                <KindnessSearchBar\n                  filterText={filterText}\n                  setFilterText={handleSetFilterText}\n                  filterNodes={filterNodes}\n                />\n              </div>\n            ) : null\n          }\n          <div className=\"map-wrapper\">\n            <MapboxGLMap\n              trace={trace}\n              setIsLoading={setIsLoading}\n              selectedNode={selectedNode}\n              setSelectedNode={handleSetSelectedNode}\n              hoveredNode={hoveredNode}\n              setHoveredNode={setHoveredNode}\n              mode={mode}\n              setTrace={setTrace}\n              resetTrace={resetTrace}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}