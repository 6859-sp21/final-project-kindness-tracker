{"version":3,"sources":["components/mapboxGLMap/mapUtils.js","utils/dataConstants.js","components/tooltip/index.js","utils/stringUtils.js","components/mapboxGLMap/index.js","components/sidebar/kindessCard.js","components/sidebar/index.js","App.js","reportWebVitals.js","index.js"],"names":["showTooltip","e","d","d3","transition","duration","style","pageX","pageY","resetAllCircleColors","ID_KEY_NAME","CITY_KEY_NAME","KINDNESS_KEY_NAME","TooltipContents","node","inp","length","city","DataConstants","state","kindness","substring","styles","width","height","position","US_CENTER_LAT","US_CENTER_LNG","INITIAL_ZOOM","mapboxgl","accessToken","workerClass","MapboxWorker","MapboxGLMap","data","selectedNode","setSelectedNode","hoveredNode","setHoveredNode","traceNode","traceList","setTraceList","traceIndex","useState","map","setMap","mapContainer","useRef","dataProc","i","index","uniqueCircleId","useEffect","myMap","Map","container","current","center","zoom","on","initializeMap","getCanvasContainer","svg","append","attr","project","LngLat","dots","selectAll","enter","MapUtils","callback","target","flyTo","essential","mapRender","x","y","resize","remove","dataFilt","filter","currentNode","ref","el","className","KindnessCard","street","zip","Sidebar","setTraceNode","setTraceIndex","onClick","color","cursor","App","setData","Tabletop","init","key","simpleSheet","then","catch","console","warn","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3a9d264.chunk.js","sourcesContent":["import * as d3 from 'd3'\n\nconst showTooltip = (e, d) => {\n    const tooltip = d3.select('.map-tooltip')\n    tooltip\n        .transition()\n        .duration(0)\n        .style('opacity', 0.8)\n        .style('left', `${e.pageX + 50}px`)\n        .style('top', `${e.pageY - 50}px`)\n}\n\nconst hideTooltip = (callback) => {\n    const tooltip = d3.select('.map-tooltip')\n    tooltip\n        .transition().duration(500)\n        .style(\"opacity\", 0)\n        .on('end', callback)\n}\n\nconst selectNode = (target, d) => {\n    return\n} \n\nconst resetAllCircleColors = () => {\n    d3.selectAll('.circle')\n        .transition()\n        .duration(500)\n        .style('fill', 'steelblue')\n}\n\nexport {\n    showTooltip,\n    hideTooltip,\n    selectNode,\n    resetAllCircleColors,\n}","const ID_KEY_NAME = 'ID NUMBER on kindness card'\nconst CITY_KEY_NAME = 'CITY where act of kindness took place'\nconst STATE_KEY_NAME = 'STATE'\nconst ZIP_KEY_NAME = '[OPTIONAL] ZIP CODE'\nconst STREET_KEY_NAME = '[Optional] STREET NAME'\nconst KINDNESS_KEY_NAME = '[Optional] Tell us about the act of kindness you received!'\nconst CENTER_LNG_KEY_NAME = 'CenterLon'\nconst CENTER_LAT_KEY_NAME = 'CenterLat'\n\nconst TEST_DATA_URL = 'https://docs.google.com/spreadsheets/d/1IqEBIcnFZ_BFCrD8jhk11yVoOjfxzZpiZLdL4cL3oK0/pubhtml'\nconst SPOOF_DATA_URL = 'https://docs.google.com/spreadsheets/d/1BvBwyy1xYYhdiokMfbyxssu5nlB0arRMvxyuQLCzsH4/pubhtml'\n\n// TOOD add constants for new parsed geo fields when those are avaiable\n// Spoof Data Names\n// const ID_KEY_NAME = 'id'\n// const STREET_KEY_NAME = 'street'\n// const STATE_KEY_NAME = 'admin_level_1'\n// const CITY_KEY_NAME = 'city'\n// const ZIP_KEY_NAME = 'zip_code'\n// const KINDNESS_KEY_NAME = 'description'\n// const CENTER_LNG_KEY_NAME = 'center_lon'\n// const CENTER_LAT_KEY_NAME = 'center_lat'\n\nexport {\n    ID_KEY_NAME,\n    CITY_KEY_NAME,\n    STATE_KEY_NAME,\n    ZIP_KEY_NAME,\n    STREET_KEY_NAME,\n    KINDNESS_KEY_NAME,\n    CENTER_LNG_KEY_NAME,\n    CENTER_LAT_KEY_NAME,\n\n    TEST_DATA_URL,\n    SPOOF_DATA_URL,\n}\n","import * as DataConstants from '../../utils/dataConstants'\nimport * as StringUtils from '../../utils/stringUtils'\n\nconst TooltipContents = ({ node }) => {\n    // handle null node case\n    if (! node) {\n        return null;\n    }\n\n    const city = node[DataConstants.CITY_KEY_NAME]\n    const state = node[DataConstants.STATE_KEY_NAME]\n    const kindness = node[DataConstants.KINDNESS_KEY_NAME]\n\n    return (\n        <div>\n            <p><b>{city ? `${city}, ` : null}{state}</b></p>\n            <p><b>{StringUtils.trimWithElipses(kindness, 140)}</b></p>\n            <p>Click for more info!</p>\n        </div>\n    )\n}\n\nexport default TooltipContents\n","const trimWithElipses = (inp, length) => {\n    if (inp.length > length) {\n        return `${inp.substring(0, length)}`\n    }\n    \n    return inp\n}\n\nexport {\n    trimWithElipses\n}","import React, { useEffect, useRef, useState } from \"react\"\nimport mapboxgl from \"mapbox-gl\"\nimport \"mapbox-gl/dist/mapbox-gl.css\"\nimport * as d3 from 'd3'\nimport * as MapUtils from './mapUtils'\nimport * as DataConstants from '../../utils/dataConstants'\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';\nimport TooltipContents from '../tooltip'\n\nimport '../../styles/Map.css'\n\nconst styles = {\n    width: \"100vw\",\n    height: \"100vh\",\n    position: \"absolute\"\n}\n\nconst US_CENTER_LAT = 39.8283\nconst US_CENTER_LNG = -98.5795\nconst INITIAL_ZOOM = 3.75\nconst POINT_ZOOM = 12\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiY21vcm9uZXkiLCJhIjoiY2tudGNscDJjMDFldDJ3b3pjMTh6ejJyayJ9.YAPmFkdy_Eh9K20cFlIvaQ'\nmapboxgl.workerClass = MapboxWorker;\n\nconst MapboxGLMap = ({ data, selectedNode, setSelectedNode, hoveredNode, setHoveredNode, traceNode, traceList, setTraceList, traceIndex }) => {\n    const [map, setMap] = useState(null)\n    const mapContainer = useRef(null)\n\n    const dataProc = (data || []).map((d, i) => ({\n        ...d,\n        index: i\n    }))\n\n    // write function to generate ID of circle\n    const uniqueCircleId = d => `circle-${d.index}`\n\n    const initializeMap = ({ setMap, mapContainer }) => {\n        const myMap = new mapboxgl.Map({\n            container: mapContainer.current,\n            style: \"mapbox://styles/mapbox/light-v10\",\n            center: [US_CENTER_LNG, US_CENTER_LAT],\n            zoom: INITIAL_ZOOM,\n        })\n\n        myMap.on(\"load\", () => {\n            setMap(myMap)\n        })\n    }\n\n    useEffect(() => {\n        if (!map) {\n            initializeMap({ setMap, mapContainer })\n        }\n    }, [map])\n\n    useEffect(() => {\n        if (map && data !== null) {\n            var container = map.getCanvasContainer()\n            var svg = d3\n                .select(container)\n                .append(\"svg\")\n                .attr(\"width\", \"100%\")\n                .attr(\"height\", \"100%\")\n                .style(\"position\", \"absolute\")\n                .style(\"z-index\", 2)\n                .style('top', 0)\n                .style('left', 0)\n\n            // write projection function\n            const project = (d) => {\n                return map.project(\n                    new mapboxgl.LngLat(d[DataConstants.CENTER_LNG_KEY_NAME], d[DataConstants.CENTER_LAT_KEY_NAME])\n                )\n            }\n\n            var dots = svg\n                .selectAll(\"circle\")\n                .data(dataProc)\n                .enter()\n                .append(\"circle\")\n                .attr('class', 'circle')\n                .attr('id', uniqueCircleId)\n                .attr(\"r\", 10)\n                .style(\"fill\", \"steelblue\")\n                .on('mouseover', (e, d) => {\n                    setHoveredNode(d)\n                    MapUtils.showTooltip(e, d)\n                })\n                .on('mousemove', (e, d) => {\n                    MapUtils.showTooltip(e, d)\n                })\n                .on('mouseout', (e, d) => {\n                    MapUtils.hideTooltip(() => setHoveredNode(null))\n                })\n                .on('click', (e, d) => {\n                    MapUtils.resetAllCircleColors()\n\n                    // make this circle red\n                    const circle = d3.select(`#${uniqueCircleId(d)}`)\n                    circle\n                        .transition()\n                        .duration(500)\n                        .style('fill', 'red')\n\n                    MapUtils.selectNode(e.target, d)\n\n                    map.flyTo({\n                        center: [\n                            d[DataConstants.CENTER_LNG_KEY_NAME],\n                            d[DataConstants.CENTER_LAT_KEY_NAME],\n                        ],\n                        zoom: POINT_ZOOM, // TODO cofigure this zoom amount\n                        essential: true // this animation is considered essential with respect to prefers-reduced-motion\n                    });\n\n                    // set the selected node and callback the parent\n                    // TODO potentially clear any tracing if this node is not in the current trace\n                    // have to tighten up logic around this...\n                    setSelectedNode(d)\n                })\n\n            // define render function for mapbox\n            const mapRender = () => {\n                // project dots\n                dots\n                    .attr('cx', d => project(d).x)\n                    .attr('cy', d => project(d).y)\n            }\n\n            map.on('viewreset', mapRender)\n            map.on('move', mapRender)\n            map.on('moveend', mapRender)\n\n            map.on('load', () => {\n                map.resize()\n            })\n\n            mapRender()\n\n            return () => map.remove()\n        }\n    }, [map, data])\n\n    useEffect(() => {\n        // re-fly to center on selectedNode update\n        if (map && data && !selectedNode) {\n            map.flyTo({\n                center: [\n                    US_CENTER_LNG,\n                    US_CENTER_LAT,\n                ],\n                zoom: INITIAL_ZOOM,\n                essential: true // this animation is considered essential with respect to prefers-reduced-motion\n            })\n            MapUtils.resetAllCircleColors()\n        }\n    }, [map, data, selectedNode])\n\n    useEffect(() => {\n        if (traceNode) {\n            // Filter data\n            const dataFilt = dataProc.filter(d => d[DataConstants.ID_KEY_NAME] == traceNode[DataConstants.ID_KEY_NAME])\n            \n            MapUtils.resetAllCircleColors()\n            d3.selectAll('.circle')\n                .filter(d => d[DataConstants.ID_KEY_NAME] == traceNode[DataConstants.ID_KEY_NAME])\n                .transition()\n                .duration(500)\n                .style('fill', 'purple')\n            \n            // for now, re-fly map\n            map.flyTo({\n                center: [\n                    US_CENTER_LNG,\n                    US_CENTER_LAT,\n                ],\n                zoom: INITIAL_ZOOM,\n                essential: true,\n            })\n\n            // set the trace list\n            setTraceList(dataFilt)\n        }\n    }, [traceNode])\n\n    useEffect(() => {\n        if (map && traceList && traceIndex > -1) {\n            // get the node at the index and fly there!\n            const currentNode = traceList[traceIndex]\n            map.flyTo({\n                center: [\n                    currentNode[DataConstants.CENTER_LNG_KEY_NAME],\n                    currentNode[DataConstants.CENTER_LAT_KEY_NAME],\n                ],\n                zoom: POINT_ZOOM,\n                essential: true,\n            })\n\n            // also make that node red\n            MapUtils.resetAllCircleColors()\n            d3.selectAll('.circle')\n                .filter(d => d[DataConstants.ID_KEY_NAME] == traceNode[DataConstants.ID_KEY_NAME])\n                .transition()\n                .duration(500)\n                .style('fill', 'purple')\n            d3.select(`#${uniqueCircleId(traceList[traceIndex])}`)\n                .transition()\n                .duration(500)\n                .style('fill', 'green')\n        }\n    }, [traceIndex])\n\n    return <div ref={el => (mapContainer.current = el)} style={styles}>\n        <div className=\"map-tooltip\" style={{ \"opacity\": 0 }}>\n            <TooltipContents node={hoveredNode} />\n        </div>\n    </div>\n}\n\nexport default MapboxGLMap\n","import { useEffect } from 'react';\nimport * as DataConstants from '../../utils/dataConstants'\n\nconst KindnessCard = ({ node }) => {\n    // handle null node case\n    if (! node) {\n        return null;\n    }\n\n    const street = node[DataConstants.STREET_KEY_NAME]\n    const city = node[DataConstants.CITY_KEY_NAME]\n    const state = node[DataConstants.STATE_KEY_NAME]\n    const zip = node[DataConstants.ZIP_KEY_NAME]\n    const kindness = node[DataConstants.KINDNESS_KEY_NAME]\n\n    return (\n        <div className=\"kindness-card-inner\">\n            <p>Address: <b>{street || 'No street provided.'}</b></p>\n            <p>City: <b>{city || 'No city provided.'}</b></p>\n            <p>State: <b>{state || 'No state provided.'}</b></p>\n            <p>Zip Code: <b>{zip || 'No zip code provided.'}</b></p>\n            <p>Act of Kindness Description:</p>\n            <p><b>{kindness || 'No kindess description provided.'}</b></p>\n        </div>\n    )\n}\n\nexport default KindnessCard","import '../../styles/Sidebar.css'\nimport * as DataConstants from '../../utils/dataConstants'\nimport KindessCard from './kindessCard'\n\nconst Sidebar = ({ selectedNode, setSelectedNode, setTraceNode, traceList, setTraceList, traceIndex, setTraceIndex }) => {\n    return (\n        <div className=\"sidebar-flex\">\n            <h1>Kindess Tracker</h1>\n            <div className=\"selected-card-wrapper\">\n                <KindessCard node={selectedNode} />\n            </div>\n            {\n                selectedNode ? (\n                    <button onClick={() => {\n                        setSelectedNode(null)\n                        setTraceList([])\n                        setTraceIndex(-1)\n                    }}>Clear Selected Node</button>\n                ) : null\n            }\n            {\n                selectedNode ? (\n                    <button onClick={() => setTraceNode(selectedNode)}>Trace this Act!</button>\n                ) : null\n            }\n            {\n                traceList ? (\n                    traceList.map((d, i) => {\n                        return (\n                            <p key={i} onClick={() => setTraceIndex(i)} style={{color: i == traceIndex ? 'blue' : 'white', cursor: 'pointer'}}>\n                                {d[DataConstants.ID_KEY_NAME]}\n                            </p>\n                        )\n                    })\n                ) : null\n            }\n\n        </div>\n    )\n}\n\nexport default Sidebar\n","import React, { useEffect, useState } from 'react'\nimport Tabletop from 'tabletop'\nimport { Sidebar, MapboxGLMap } from './components'\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp'\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker'\nimport * as DataConstants from './utils/dataConstants'\n\n\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiY21vcm9uZXkiLCJhIjoiY2tudGNscDJjMDFldDJ3b3pjMTh6ejJyayJ9.YAPmFkdy_Eh9K20cFlIvaQ'\nmapboxgl.workerClass = MapboxWorker\nmapboxgl.accessToken = MAPBOX_ACCESS_TOKEN\n\nconst US_CENTER_LAT = 39.8283\nconst US_CENTER_LNG = -98.5795\nconst INITIAL_ZOOM = 3.75\n\nimport './styles/App.css'\n\nconst App = () => {\n  const [data, setData] = useState(null)\n  const [selectedNode, setSelectedNode] = useState(null)\n  const [hoveredNode, setHoveredNode] = useState(null)\n  const [traceNode, setTraceNode] = useState(null)\n  const [traceList, setTraceList] = useState([])\n  const [traceIndex, setTraceIndex] = useState(-1)\n\n  useEffect(() => {\n    if (data === null) {\n      Tabletop.init({\n        key: DataConstants.SPOOF_DATA_URL,\n        simpleSheet: true,\n      })\n        .then(data => {\n          setData(data)\n        })\n        .catch(console.warn)\n    }\n  }, [data])\n\n  return (\n    <div className=\"App\">\n      <div className=\"horizontal-stack\">\n        <div className=\"left-sidebar\">\n          <Sidebar\n            selectedNode={selectedNode}\n            setSelectedNode={setSelectedNode}\n            setTraceNode={setTraceNode}\n            traceList={traceList}\n            setTraceList={setTraceList}\n            traceIndex={traceIndex}\n            setTraceIndex={setTraceIndex}\n          />\n        </div>\n        <div className=\"map-wrapper\">\n          {/* <MapViewDemo data={data} map={map} selectedNode={selectedNode} setSelectedNode={setSelectedNode}  /> */}\n          <MapboxGLMap\n            data={data}\n            selectedNode={selectedNode}\n            setSelectedNode={setSelectedNode}\n            hoveredNode={hoveredNode}\n            setHoveredNode={setHoveredNode}\n            traceNode={traceNode}\n            traceList={traceList}\n            setTraceList={setTraceList}\n            traceIndex={traceIndex}\n          />\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}