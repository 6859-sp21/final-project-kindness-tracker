{"version":3,"sources":["utils/dataConstants.js","components/mapboxGLMap/mapUtils.js","components/tooltip/index.js","utils/stringUtils.js","utils/dataUtils.js","components/mapboxGLMap/index.js","components/sidebar/kindessCard.js","components/sidebar/loadingSpinner.js","components/sidebar/infoCard.js","components/sidebar/traceStepper.js","components/sidebar/index.js","App.js","reportWebVitals.js","index.js"],"names":["ID_KEY_NAME","KINDNESS_KEY_NAME","showTooltip","e","d","d3","transition","duration","style","pageX","pageY","resetAllCircleColors","fill","uniqueCircleId","index","circleClass","DataConstants","generateLngLatArray","data","map","lng","lat","projectLngLatToXY","project","mapboxgl","LngLat","mapRender","attr","x","y","TooltipContents","node","isSelected","console","log","inp","length","city","state","kindness","substring","LNG_KEY","LAT_KEY","computeLngLatBoundingBox","lngLatPoints","paddingMiles","isRatioPadding","padLeft","paddingDegreesLng","paddingDegreesLat","leftPadConstant","extractKey","key","maxLng","Math","max","minLng","min","maxLat","minLat","topRight","bottomLeft","accessToken","workerClass","MapboxWorker","MapboxGLMap","one","two","trace","setIsLoading","selectedNode","setSelectedNode","hoveredNode","setHoveredNode","isTracing","setTrace","resetTrace","useState","setMap","boundingObject","setBoundingObject","mapContainer","useRef","useEffect","myMap","Map","container","current","center","zoom","on","MapUtils","getCanvasContainer","append","resize","selectAll","join","enter","callback","update","exit","remove","boundingObjectNew","DataUtils","fitBounds","traceNew","filter","sort","a","b","dateTime","toMillis","ref","el","className","KindnessCard","street","zip","date","dateString","toLocaleString","DateTime","DATE_FULL","timeString","TIME_SIMPLE","LoadingSpinner","SidebarInfoCard","TraceStepper","setIsTracing","traceIndex","indexOf","n","disabled","onClick","Sidebar","isLoading","href","target","src","App","setData","Tabletop","init","simpleSheet","then","dataProc","i","fromFormat","catch","warn","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55b63bb8.chunk.js","sourcesContent":["// const TIMESTAMP_KEY_NAME = 'Timestamp'\n// const ID_KEY_NAME = 'ID NUMBER on kindness card'\n// const CITY_KEY_NAME = 'CITY where act of kindness took place'\n// const STATE_KEY_NAME = 'STATE'\n// const ZIP_KEY_NAME = '[OPTIONAL] ZIP CODE'\n// const STREET_KEY_NAME = '[Optional] STREET NAME'\n// const KINDNESS_KEY_NAME = '[Optional] Tell us about the act of kindness you received!'\n// const CENTER_LNG_KEY_NAME = 'CenterLon'\n// const CENTER_LAT_KEY_NAME = 'CenterLat'\n\nconst TEST_DATA_URL = 'https://docs.google.com/spreadsheets/d/1IqEBIcnFZ_BFCrD8jhk11yVoOjfxzZpiZLdL4cL3oK0/pubhtml'\nconst SPOOF_DATA_URL = 'https://docs.google.com/spreadsheets/d/1BvBwyy1xYYhdiokMfbyxssu5nlB0arRMvxyuQLCzsH4/pubhtml'\n\nconst TIMESTAMP_FORMAT = 'MM/dd/yy h:mm a'\n\n// TOOD add constants for new parsed geo fields when those are avaiable\n// Spoof Data Names\nconst TIMESTAMP_KEY_NAME = 'Timestamp'\nconst ID_KEY_NAME = 'ID Number on kindness card'\nconst STREET_KEY_NAME = 'street_name'\nconst STATE_KEY_NAME = 'admin_level_1'\nconst CITY_KEY_NAME = 'admin_level_3'\nconst ZIP_KEY_NAME = 'zip_code'\nconst KINDNESS_KEY_NAME = '(Optional) Tell us about the act of kindness you received!'\nconst CENTER_LNG_KEY_NAME = 'center_lng'\nconst CENTER_LAT_KEY_NAME = 'center_lat'\n\nexport {\n    TIMESTAMP_KEY_NAME,\n    ID_KEY_NAME,\n    CITY_KEY_NAME,\n    STATE_KEY_NAME,\n    ZIP_KEY_NAME,\n    STREET_KEY_NAME,\n    KINDNESS_KEY_NAME,\n    CENTER_LNG_KEY_NAME,\n    CENTER_LAT_KEY_NAME,\n\n    TEST_DATA_URL,\n    SPOOF_DATA_URL,\n\n    TIMESTAMP_FORMAT,\n}\n","import * as d3 from 'd3'\nimport mapboxgl from \"mapbox-gl\"\nimport * as DataConstants from '../../utils/dataConstants'\n\nconst POINT_ZOOM = 12\nconst ZOOM_EASE_MILLIS = 3000\n\nconst initializeMap = ({ setMap, mapContainer }) => {\n    const myMap = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/light-v10',\n        center: [-100, 40],\n        zoom: 3,\n    })\n\n    // immediately center based on the bounding box of our data points\n    // zoomMapToBoundingObject(myMap, boundingObject)\n\n    myMap.on(\"load\", () => {\n        setMap(myMap)\n        // setBoundingObject(boundingObject)\n    })\n}\n\nconst zoomMapToBoundingObject = (map, boundingObject) => {\n    const { topRight, bottomLeft } = boundingObject\n    map.fitBounds([\n        [bottomLeft.lng, bottomLeft.lat],\n        [topRight.lng, topRight.lat]\n    ], {\n        duration: ZOOM_EASE_MILLIS,\n    })\n}\n\nconst showTooltip = (e, d) => {\n    const tooltip = d3.select('.map-tooltip')\n    tooltip\n        .transition()\n        .duration(0)\n        .style('opacity', 0.8)\n        .style('left', `${e.pageX + 50}px`)\n        .style('top', `${e.pageY - 50}px`)\n}\n\nconst hideTooltip = (callback) => {\n    const tooltip = d3.select('.map-tooltip')\n    tooltip\n        .transition().duration(500)\n        .style(\"opacity\", 0)\n        .on('end', callback)\n}\n\nconst resetAllCircleColors = (fill = 'steelblue') => {\n    return d3.selectAll('.circle')\n        .transition()\n        .duration(500)\n        .style('fill', fill)\n}\n\nconst clearAllEventHandlers = (selection) => {\n    selection\n        .on('mouseover', null)\n        .on('mousemove', null)\n        .on('mouseout', null)\n        .on('click', null)\n}\n\n// write function to generate ID of circle\nconst uniqueCircleId = d => `circle-${d.index}`\n\n// write function to generate class of circle based off id key\nconst circleClass = d => `circle circle-${d[DataConstants.ID_KEY_NAME]}`\n\n// write function to quickly convert a data array to the fomat for lat lng\nconst generateLngLatArray = data => data.map(d => ({\n    lng: d[DataConstants.CENTER_LNG_KEY_NAME],\n    lat: d[DataConstants.CENTER_LAT_KEY_NAME],\n}))\n\n// write projection function for map\nconst projectLngLatToXY = (map, d) => {\n    return map.project(\n        new mapboxgl.LngLat(d[DataConstants.CENTER_LNG_KEY_NAME], d[DataConstants.CENTER_LAT_KEY_NAME])\n    )\n}\n\nconst zoomToDataPoint = (map, d) => {\n    map.flyTo({\n        center: [\n            d[DataConstants.CENTER_LNG_KEY_NAME],\n            d[DataConstants.CENTER_LAT_KEY_NAME],\n        ],\n        zoom: POINT_ZOOM,\n        essential: true\n    })\n}\n\nconst mapRender = (map) => {\n    d3.selectAll('.circle')\n        .attr('cx', d => projectLngLatToXY(map, d).x)\n        .attr('cy', d => projectLngLatToXY(map, d).y)\n}\n\nexport {\n    initializeMap,\n    zoomMapToBoundingObject,\n    showTooltip,\n    hideTooltip,\n    resetAllCircleColors,\n    clearAllEventHandlers,\n    uniqueCircleId,\n    circleClass,\n    generateLngLatArray,\n    projectLngLatToXY,\n    zoomToDataPoint,\n    mapRender,\n}\n","import * as DataConstants from '../../utils/dataConstants'\nimport * as StringUtils from '../../utils/stringUtils'\n\nconst TooltipContents = ({ node, isSelected }) => {\n    // handle null node case\n    if (! node) {\n        return null;\n    }\n\n    console.log('rendering tooltip')\n\n    const city = node[DataConstants.CITY_KEY_NAME]\n    const state = node[DataConstants.STATE_KEY_NAME]\n    const kindness = node[DataConstants.KINDNESS_KEY_NAME]\n\n    return (\n        <div>\n            <p><b>{city ? `${city}, ` : null}{state}</b></p>\n            <p><b>{StringUtils.trimWithElipses(kindness, 140)}</b></p>\n            <p>{! isSelected ? 'Click for more info!' : null}</p>\n        </div>\n    )\n}\n\nexport default TooltipContents\n","const trimWithElipses = (inp, length) => {\n    if (inp.length > length) {\n        return `${inp.substring(0, length)}...`\n    }\n    \n    return inp\n}\n\nexport {\n    trimWithElipses\n}","import { DateTime } from  'luxon'\nimport * as DataConstants from './dataConstants'\n\nconst DEGREES_TO_MILES = 69\nconst LNG_KEY = 'lng'\nconst LAT_KEY = 'lat'\n\nconst processRawSheetsData = (data) => {\n    const dataProc = data ? data.map((d, i) => ({\n        ...d,\n        index: i,\n        dateTime: DateTime.fromFormat(d[DataConstants.TIMESTAMP_KEY_NAME], DataConstants.TIMESTAMP_FORMAT),\n    })) : null\n    return dataProc\n}\n\nconst nodesAreEqual = (one, two) => {\n    if (! one || ! two)\n        return false\n        \n    return one.index == two.index\n}\n\nconst computeLngLatBoundingBox = (lngLatPoints, paddingMiles, isRatioPadding = false, padLeft = true) => {\n    // compute top right and bottom left\n    // then, add some padding amount in miles\n    var paddingDegreesLng = 0\n    var paddingDegreesLat = 0\n    if (! isRatioPadding)\n        paddingDegreesLng = paddingMiles / DEGREES_TO_MILES\n        paddingDegreesLat = paddingDegreesLng\n    \n    const leftPadConstant = padLeft ? 8 : 1\n\n    const extractKey = key => lngLatPoints.map((d => d[key]))\n\n    const maxLng = Math.max(...extractKey(LNG_KEY))\n    const minLng = Math.min(...extractKey(LNG_KEY))\n    const maxLat = Math.max(...extractKey(LAT_KEY))\n    const minLat = Math.min(...extractKey(LAT_KEY))\n\n    if (isRatioPadding) {\n        paddingDegreesLng = (maxLng - minLng) * paddingMiles\n        paddingDegreesLat = (maxLat - minLat) * paddingMiles\n    }\n\n    return {\n        topRight: {\n            lng: maxLng + paddingDegreesLng,\n            lat: minLat + paddingDegreesLat,\n        },\n        bottomLeft: {\n            lng: minLng - paddingDegreesLng * leftPadConstant,\n            lat: maxLat - paddingDegreesLat,\n        }\n    }\n}\n\nexport {\n    processRawSheetsData,\n    nodesAreEqual,\n    computeLngLatBoundingBox,\n}\n","import React, { useEffect, useRef, useState } from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport * as d3 from 'd3'\nimport * as MapUtils from './mapUtils'\nimport * as DataConstants from '../../utils/dataConstants'\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';\nimport TooltipContents from '../tooltip'\nimport * as DataUtils from '../../utils/dataUtils'\n\nimport '../../styles/Map.css'\n\nconst POINT_ZOOM = 12\nconst POINT_ZOOM_MILES = 1\nconst DEFAULT_RADIUS = 10\nconst BIG_RADIUS = 30\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiY21vcm9uZXkiLCJhIjoiY2tudGNscDJjMDFldDJ3b3pjMTh6ejJyayJ9.YAPmFkdy_Eh9K20cFlIvaQ'\nmapboxgl.workerClass = MapboxWorker;\n\nconst MapboxGLMap = ({ trace, setIsLoading, selectedNode, setSelectedNode, hoveredNode, setHoveredNode, isTracing, setTrace, resetTrace }) => {\n    const [map, setMap] = useState(null)\n    const [boundingObject, setBoundingObject] = useState(null)\n    const mapContainer = useRef(null)\n\n    // let's init our map first again\n    useEffect(() => {\n        if (map === null) {\n            // need to init the map since it is null\n            MapUtils.initializeMap({ setMap, mapContainer })\n        } else {\n            // also append an svg to the map for later use\n            // TODO put this in css\n            var container = map.getCanvasContainer()\n            d3.select(container)\n                .append('svg')\n                .attr('class', 'map-svg')\n                .attr('width', '100%')\n                .attr('height', '100%')\n                .style('position', 'absolute')\n                .style('z-index', 2)\n                .style('top', 0)\n                .style('left', 0)\n            \n            // also set up map events for re-render\n            map.on('viewreset', () => MapUtils.mapRender(map))\n            map.on('move', () => MapUtils.mapRender(map))\n            map.on('moveend', () => MapUtils.mapRender(map))\n            map.on('load', () => map.resize())\n        }\n    }, [map])\n\n    // here is where we do our data join for trace points\n    useEffect(() => {\n        if (map && trace) {\n            // do a data join on all the trace points with d3\n            d3.select('.map-svg')\n                .selectAll('circle')\n                .data(trace, d => d.index)\n                .join(\n                    enter => enter\n                        .append('circle')\n                        .attr('id', MapUtils.uniqueCircleId)\n                        .attr('class', MapUtils.circleClass)\n                        .attr('r', DEFAULT_RADIUS)\n                        .style('fill', 'steelblue')\n                        .on('click', (e, d) => setSelectedNode(d))\n                        .on('mouseover', (e, d) => {\n                            setHoveredNode(d)\n                            MapUtils.showTooltip(e, d)\n                        })\n                        .on('mousemove', (e, d) => {\n                            MapUtils.showTooltip(e, d)\n                        })\n                        .on('mouseout', (e, d) => {\n                            MapUtils.hideTooltip(() => setHoveredNode(null))\n                        }),\n                    update => update,\n                    exit => exit.remove()\n                )\n\n            // perform initial render\n            MapUtils.mapRender(map)\n\n            // also complete loading\n            setIsLoading(false)\n\n            // update bounding box\n            const boundingObjectNew = DataUtils.computeLngLatBoundingBox(\n                MapUtils.generateLngLatArray(trace),\n                trace.length > 1 ? 0.05 : POINT_ZOOM_MILES,\n                trace.length > 1 ? true : false,\n                trace.length > 1 ? true : false,\n            )\n            setBoundingObject(boundingObjectNew)\n        }\n    }, [map, trace])\n\n    // THE PURPOSE OF THIS EFFECT IS TO ZOOM ON THE MAP\n    // WE RE-ZOOM WHEN:\n    // 1. BOUNDING BOX CHANGES\n    // 2. SELECTED NODE BECOMES NULL \n    // listen for changes in the bounding box\n    useEffect(() => {\n        if (boundingObject) {\n            MapUtils.zoomMapToBoundingObject(map, boundingObject)\n        }\n    }, [boundingObject])\n\n    // listen for changes in the selected node\n    // IF GENERAL NON TRACE MODE\n    //     IF SELECTED NODE NON NULL, ZOOM TO IT AND MAKE IT RED\n    //     ELSE, RESET TO ALL POINTS AND MAKE ALL POINTS BLUE\n    // IF TRACE MODE\n    //     IF SELECTED NODE NON NULL, \n    useEffect(() => {\n        if (! isTracing) {\n            if (selectedNode) {\n                // handle colors\n                // make other circles not red\n                MapUtils.resetAllCircleColors()\n                \n                // make this circle red\n                d3.select(`#${MapUtils.uniqueCircleId(selectedNode)}`)\n                    .transition()\n                    .duration(500)\n                    .style('fill', 'red')\n                    .attr('r', DEFAULT_RADIUS)\n                \n                // update bounding box\n                const boundingObjectNew = DataUtils.computeLngLatBoundingBox(\n                    MapUtils.generateLngLatArray([selectedNode]),\n                    POINT_ZOOM_MILES,\n                    false,\n                    false\n                )\n                setBoundingObject(boundingObjectNew)\n            } else if (trace) {\n                // reset the bounding box to original trace points\n                const boundingObjectNew = DataUtils.computeLngLatBoundingBox(\n                    MapUtils.generateLngLatArray(trace),\n                    0.05,\n                    true\n                )\n                setBoundingObject(boundingObjectNew)\n    \n                // also clear the color\n                MapUtils.resetAllCircleColors()\n            }\n        } else {\n            // we are tracing - selected node should NEVER be null\n            // reset all nodes to the original color\n            MapUtils.resetAllCircleColors('purple')\n                .attr('r', DEFAULT_RADIUS)\n            \n            // make the selected node bigger and green\n            d3.select(`#${MapUtils.uniqueCircleId(selectedNode)}`)\n                .transition()\n                .duration(500)\n                .style('fill', 'green')\n                .attr('r', BIG_RADIUS)\n        }\n        \n    }, [selectedNode, isTracing])\n\n    // listen for changes in the isTracing state\n    // if we become tracing, we want to set the trace to the selectedNode's id set\n    useEffect(() => {\n        if (isTracing) {\n            // filter on the current node id key\n            const traceNew = trace\n                .filter(d => d[DataConstants.ID_KEY_NAME] === selectedNode[DataConstants.ID_KEY_NAME])\n                .sort((a, b) => a.dateTime.toMillis() - b.dateTime.toMillis())\n            setTrace(traceNew)\n        } else {\n            // reset trace back to original data array\n            resetTrace()\n        }\n    }, [isTracing])\n\n    return <div ref={el => (mapContainer.current = el)} className='map-container-div'>\n        <div className='map-tooltip' style={{ 'opacity': 0 }}>\n            <TooltipContents node={hoveredNode} isSelected={DataUtils.nodesAreEqual(hoveredNode, selectedNode)} />\n        </div>\n    </div>\n}\n\nexport default MapboxGLMap\n","import * as DataConstants from '../../utils/dataConstants'\nimport { DateTime } from 'luxon'\n\nconst KindnessCard = ({ node }) => {\n    console.log('rendering card')\n    // handle null node case\n    if (!node) {\n        return null;\n    }\n\n    const timestamp = node[DataConstants.TIMESTAMP_KEY_NAME]\n    const street = node[DataConstants.STREET_KEY_NAME]\n    const city = node[DataConstants.CITY_KEY_NAME]\n    const state = node[DataConstants.STATE_KEY_NAME]\n    const zip = node[DataConstants.ZIP_KEY_NAME]\n    const kindness = node[DataConstants.KINDNESS_KEY_NAME]\n\n    // apply necessary parsing for date\n    const date = node.dateTime\n    const dateString = date.toLocaleString(DateTime.DATE_FULL)\n    const timeString = date.toLocaleString(DateTime.TIME_SIMPLE)\n\n    return (\n        <div className=\"kindness-card-inner\">\n            <p>Date: <b>{dateString}</b></p>\n            <p>Time: <b>{timeString}</b></p>\n            <p>Address: <b>{street || 'No street provided.'}</b></p>\n            <p>City: <b>{city || 'No city provided.'}</b></p>\n            <p>State: <b>{state || 'No state provided.'}</b></p>\n            <p>Zip Code: <b>{zip || 'No zip code provided.'}</b></p>\n            <p>Act of Kindness Description:</p>\n            <div className=\"kindess-card-description\">\n                <p><b>{kindness || 'No kindess description provided.'}</b></p>\n            </div>\n        </div>\n    )\n}\n\nexport default KindnessCard","import '../../styles/Loading.css'\n\nconst LoadingSpinner = () => {\n    console.log('rendering loading')\n    return (\n        <div className=\"loading-wrapper\">\n            <div className=\"la-ball-clip-rotate la-2x\">\n                <div></div>\n            </div>\n            <p>Loading...</p>\n        </div>\n    )\n}\n\nexport default LoadingSpinner\n","/*\n    Simple component to render some useful info when no node is selected.\n*/\nconst SidebarInfoCard = () => {\n    console.log('rendering side info card')\n    return (\n        <div>\n            <hr className=\"sidebar-divider\"/>\n            <h3>Click a circle to explore that act of kindness further!</h3>\n        </div>\n    )\n}\n\nexport default SidebarInfoCard","import KindnessCard from './kindessCard'\nimport * as DataConstants from '../../utils/dataConstants'\n\nconst TraceStepper = ({ isTracing, setIsTracing, trace, selectedNode, setSelectedNode }) => {\n    console.log('rendering trace')\n\n    if (! isTracing) {\n        return null\n    }\n\n    // find the trace index\n    const traceIndex = trace.indexOf(selectedNode)\n\n    const n = trace.length\n\n    return (\n        <div className=\"trace-stepper-wrapper\">\n            <div className=\"trace-stepper-button-horizontal\">\n            <button disabled={traceIndex === 0} onClick={() => setSelectedNode(trace[0])}>Earliest</button>\n                <button disabled={traceIndex === 0} onClick={() => setSelectedNode(trace[traceIndex - 1])}>Previous</button>\n                <button disabled={traceIndex === n - 1} onClick={() => setSelectedNode(trace[traceIndex + 1])}>Next</button>\n                <button disabled={traceIndex === n - 1} onClick={() => setSelectedNode(trace[n - 1])}>Latest</button>\n            </div>\n            <p>{`${traceIndex + 1} / ${trace.length}`}</p>\n            <KindnessCard node={selectedNode} />\n            <div className=\"trace-stepper-button-below\">\n                <button onClick={() => {\n                    setIsTracing(false)\n                }}>\n                    Exit Trace Mode\n                </button>\n            </div>\n\n        </div>\n    )\n}\n\nexport default TraceStepper\n","import React from 'react'\nimport '../../styles/Sidebar.css'\nimport KindessCard from './kindessCard'\nimport LoadingSpinner from './loadingSpinner'\nimport SidebarInfoCard from './infoCard'\nimport TraceStepper from './traceStepper'\n\nconst Sidebar = ({ isLoading, selectedNode, setSelectedNode, isTracing, setIsTracing, trace }) => {\n    console.log('rendering sidebar')\n    return (\n        <div className=\"sidebar-flex\">\n            <h1>Kindess Tracker</h1>\n            {\n                isLoading ? <LoadingSpinner /> : null\n            }\n            {\n                !isLoading && !selectedNode ? <SidebarInfoCard /> : null\n            }\n            { !isTracing ? (\n                <div className=\"selected-card-wrapper\">\n                    <KindessCard node={selectedNode} />\n                </div>\n            ) : null\n            }\n            <div className=\"sidebar-clear-div\">\n                {\n                    selectedNode && !isTracing ? (\n                        <button className=\"sidebar-button-below\" onClick={() => {\n                            setSelectedNode(null)\n                            setIsTracing(false)\n                        }}>Clear Selected Node</button>\n                    ) : null\n                }\n                {\n                    (selectedNode && !isTracing) ? (\n                        <button onClick={() => setIsTracing(true)}>Trace this Act!</button>\n                    ) : null\n                }\n            </div>\n            <TraceStepper\n                isTracing={isTracing}\n                setIsTracing={setIsTracing}\n                trace={trace}\n                selectedNode={selectedNode}\n                setSelectedNode={setSelectedNode}\n            />\n            <div className=\"sidebar-bottom-content\">\n                <p className=\"sidebar-small-text\">Christian Moroney, Jackson Bernatchez, Kevin Lyons</p>\n                <p className=\"sidebar-small-text\">6.859 Final Project Spring 2021</p>\n                <div>\n                    <a href=\"https://github.com/6859-sp21/final-project-kindness-tracker\" target=\"_blank\">\n                        <img className=\"sidebar-git-image\" src=\"https://image.flaticon.com/icons/png/512/25/25231.png\"></img>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Sidebar\n","import React, { useEffect, useState } from 'react'\nimport Tabletop from 'tabletop'\nimport { Sidebar, MapboxGLMap } from './components'\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp'\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker'\nimport * as DataConstants from './utils/dataConstants'\nimport * as DataUtils from './utils/dataUtils'\n\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiY21vcm9uZXkiLCJhIjoiY2tudGNscDJjMDFldDJ3b3pjMTh6ejJyayJ9.YAPmFkdy_Eh9K20cFlIvaQ'\nmapboxgl.workerClass = MapboxWorker\nmapboxgl.accessToken = MAPBOX_ACCESS_TOKEN\n\nimport './styles/App.css'\n\nconst App = () => {\n  const [data, setData] = useState(null)\n  const [trace, setTrace] = useState(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const [selectedNode, setSelectedNode] = useState(null)\n  const [hoveredNode, setHoveredNode] = useState(null)\n  const [isTracing, setIsTracing] = useState(false)\n\n  useEffect(() => {\n    if (data === null) {\n      Tabletop.init({\n        key: DataConstants.TEST_DATA_URL,\n        simpleSheet: true,\n      })\n        .then(data => {\n          // process data right away\n          const dataProc = DataUtils.processRawSheetsData(data)\n          setData(dataProc)\n          setTrace(dataProc)\n        })\n        .catch(console.warn)\n    }\n  }, [data])\n\n  // define function to set trace back to original data array\n  const resetTrace = () => setTrace(data)\n\n  return (\n    <div className=\"App\">\n      <div className=\"horizontal-stack\">\n        <div className=\"left-sidebar\">\n          <Sidebar\n            isLoading={isLoading}\n            selectedNode={selectedNode}\n            setSelectedNode={setSelectedNode}\n            isTracing={isTracing}\n            setIsTracing={setIsTracing}\n            trace={trace}\n          />\n        </div>\n        <div className=\"map-wrapper\">\n          <MapboxGLMap\n            trace={trace}\n            setIsLoading={setIsLoading}\n            selectedNode={selectedNode}\n            setSelectedNode={setSelectedNode}\n            hoveredNode={hoveredNode}\n            setHoveredNode={setHoveredNode}\n            isTracing={isTracing}\n            setTrace={setTrace}\n            resetTrace={resetTrace}\n          />\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}