{"version":3,"sources":["components/mapViewDemo.js","App.js","reportWebVitals.js","index.js"],"names":["mapboxgl","workerClass","MapboxWorker","accessToken","MapViewDemo","data","console","log","mapContainer","useRef","useEffect","map","Map","style","center","zoom","container","getCanvasContainer","svg","d3","append","attr","project","d","LngLat","lonLatData","obj","CenterLon","CenterLat","dots","selectAll","enter","render","x","y","on","resize","remove","className","ref","id","App","useState","setData","Tabletop","init","key","simpleSheet","then","catch","warn","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"+RAQAA,IAASC,YAAcC,IACvBF,IAASG,YAHmB,6FAM5B,IA2EeC,EA3EK,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAInB,GAHAC,QAAQC,IAAI,6BAA2BF,GAG1B,OAATA,EACA,OAAO,KAGX,IAAMG,EAAeC,mBA8DrB,OA5DAC,qBAAU,WACN,IAAMC,EAAM,IAAIX,IAASY,IAAI,CACzB,UAAa,MACbC,MAAO,mCAGPC,OAAQ,EAAE,GAAI,OACdC,KAAM,MAGNC,EAAYL,EAAIM,qBAChBC,EAAMC,SACEH,GACPI,OAAO,OACPC,KAAK,QAAS,QACdA,KAAK,SAAU,QACfR,MAAM,WAAY,YAClBA,MAAM,UAAW,GACjBA,MAAM,MAAO,GACbA,MAAM,OAAQ,GAGbS,EAAU,SAAAC,GACZ,OAAOZ,EAAIW,QAAQ,IAAItB,IAASwB,OAAOD,EAAE,GAAIA,EAAE,MAK/CE,EAAapB,EAAKM,KAAI,SAAAe,GACtB,MAAO,EAAEA,EAAIC,WAAYD,EAAIE,cAGjCtB,QAAQC,IAAIkB,GAEZ,IAAII,EAAOX,EACNY,UAAU,UACVzB,KAAKoB,GACLM,QACAX,OAAO,UACPC,KAAK,IAAK,GACVR,MAAM,OAAQ,aAGbmB,EAAS,kBAAMH,EAChBR,KAAK,MAAM,SAAAE,GAAC,OAAID,EAAQC,GAAGU,KAC3BZ,KAAK,MAAM,SAAAE,GAAC,OAAID,EAAQC,GAAGW,MAYhC,OAVAvB,EAAIwB,GAAG,YAAaH,GACpBrB,EAAIwB,GAAG,OAAQH,GACfrB,EAAIwB,GAAG,UAAWH,GAElBrB,EAAIwB,GAAG,QAAQ,WACXxB,EAAIyB,YAGRJ,IAEO,kBAAMrB,EAAI0B,YAClB,IAGC,qBAAKC,UAAU,gBAAgBC,IAAK/B,EAAcgC,GAAG,SC9C9CC,G,MA9BH,WAAO,IAAD,EACQC,mBAAS,MADjB,mBACTrC,EADS,KACHsC,EADG,KAmBhB,OAfAjC,qBAAU,WACK,OAATL,GACFuC,IAASC,KAAK,CAEZC,IAAK,8FACLC,aAAa,IAEZC,MAAK,SAAA3C,GACJC,QAAQC,IAAIF,GACZsC,EAAQtC,MAET4C,MAAM3C,QAAQ4C,QAElB,CAAC7C,IAGF,qBAAKiC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,qBAAKA,UAAU,cAAf,SACE,cAAC,EAAD,CAAajC,KAAMA,YClBd8C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBL,MAAK,YAAkD,IAA/CM,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAAS3B,OACP,cAAC,IAAM4B,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.081766b4.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { useD3 } from '../hooks'\nimport * as d3 from 'd3'\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp';\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';\n\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiY21vcm9uZXkiLCJhIjoiY2tudGNscDJjMDFldDJ3b3pjMTh6ejJyayJ9.YAPmFkdy_Eh9K20cFlIvaQ';\n\nmapboxgl.workerClass = MapboxWorker;\nmapboxgl.accessToken = MAPBOX_ACCESS_TOKEN;\n\n\nconst MapViewDemo = ({ data }) => {\n    console.log(\"Map View Demo Data --> \", data)\n\n    // Make sure we are only rendering the full map when we actually have data\n    if (data === null) {\n        return null;\n    };\n\n    const mapContainer = useRef();\n\n    useEffect(() => {\n        const map = new mapboxgl.Map({\n            'container': 'map',\n            style: 'mapbox://styles/mapbox/light-v10',\n            // center: [lng, lat],\n            // zoom: zoom\n            center: [-74, 42.25],\n            zoom: 5.6\n        });\n\n        var container = map.getCanvasContainer();\n        var svg = d3\n            .select(container)\n            .append(\"svg\")\n            .attr(\"width\", \"100%\")\n            .attr(\"height\", \"100%\")\n            .style(\"position\", \"absolute\")\n            .style(\"z-index\", 2)\n            .style('top', 0)\n            .style('left', 0);\n\n        // write projection function\n        const project = d => {\n            return map.project(new mapboxgl.LngLat(d[0], d[1]))\n        }\n\n        // create data, bind circles to that data\n        // var latLonData = [[-74.5, 40.05], [-74.45, 40.0], [-74.55, 40.0]]; // dummy test data in New Jersey\n        var lonLatData = data.map(obj => {\n            return [+obj.CenterLon, +obj.CenterLat]\n        })\n\n        console.log(lonLatData)\n\n        var dots = svg\n            .selectAll(\"circle\")\n            .data(lonLatData)\n            .enter()\n            .append(\"circle\")\n            .attr(\"r\", 7)\n            .style(\"fill\", \"steelblue\")\n\n        // define render function for mapbox\n        const render = () => dots \n            .attr('cx', d => project(d).x)\n            .attr('cy', d => project(d).y)\n\n        map.on('viewreset', render)\n        map.on('move', render)\n        map.on('moveend', render)\n\n        map.on('load', () => {\n            map.resize()\n        })\n\n        render()\n\n        return () => map.remove();\n    }, []);\n\n    return (\n        <div className=\"map-container\" ref={mapContainer} id='map'/>\n    )\n}\n\nexport default MapViewDemo\n","import React, { useEffect, useState } from 'react'\nimport Tabletop from 'tabletop'\nimport { BarChartDemo, MapViewDemo } from './components'\nimport demoData from './data/demo-data'\n\nimport './App.css'\n\nconst App = () => {\n  const [data, setData] = useState(null)\n  const loading = data === null\n\n  useEffect(() => {\n    if (data === null) {\n      Tabletop.init({\n        // TODO add this key to some environment variable, don't hard-code here\n        key: 'https://docs.google.com/spreadsheets/d/1IqEBIcnFZ_BFCrD8jhk11yVoOjfxzZpiZLdL4cL3oK0/pubhtml',\n        simpleSheet: true,\n      })\n        .then(data => {\n          console.log(data)\n          setData(data)\n        })\n        .catch(console.warn)\n    }\n  }, [data])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"map-wrapper\">\n          <MapViewDemo data={data} />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}