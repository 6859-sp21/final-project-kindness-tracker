{"version":3,"sources":["utils/dataConstants.js","utils/dataUtils.js","components/mapboxGLMap/mapUtils.js","triangle.png","components/mapboxGLMap/lineUtils.js","components/tooltip/index.js","utils/stringUtils.js","utils/appMode.js","components/mapboxGLMap/index.js","components/sidebar/kindnessCard.js","components/sidebar/loadingSpinner.js","components/sidebar/infoCard.js","components/sidebar/traceStepper.js","components/sidebar/dataToggle.js","components/sidebar/traceStatistics.js","components/sidebar/index.js","components/search/index.js","kindness_card_image.png","components/dialog/index.js","components/stats/index.js","summary_image.png","yoda_transparent.png","aboutPage.js","App.js","reportWebVitals.js","index.js"],"names":["REAL_DATA_URL","ID_KEY_NAME","STREET_KEY_NAME","CITY_KEY_NAME","STATE_KEY_NAME","ZIP_KEY_NAME","KINDNESS_KEY_NAME","CENTER_LNG_KEY_NAME","CENTER_LAT_KEY_NAME","LNG_KEY","LAT_KEY","BAD_WORDS_FILTER","Filter","handleOverlappingPoints","data","lngKey","DataConstants","latKey","lngLatString","d","lngLatsMap","map","reduce","s","permuteLngLat","lng","lat","permutationMiles","permutationDegrees","random","Math","nodesAreEqual","one","two","index","filterTraceListForNode","node","id","filterTraceListForId","dataFilt","filter","sortByDate","formatFieldsForDisplay","streetNumber","street","address","city","state","cityState","zip","location","kindness","dateString","dateTime","toLocaleString","DateTime","DATETIME_SHORT","generateLngLatArray","cleanDescription","text","clean","pathLengthMiles","lngLatarray","distance","i","length","turf","sort","a","b","toMillis","hideTooltip","callback","d3","transition","duration","style","on","resetAllCircleColors","fill","uniqueCircleId","circleClass","projectLngLatToXY","project","mapboxgl","LngLat","mapRender","attr","x","y","getBoudingObjectForTraceList","trace","lngLatPoints","paddingMiles","isRatioPadding","paddingDegreesLng","paddingDegreesLat","leftPadConstant","extractKey","key","maxLng","max","minLng","min","maxLat","minLat","topRight","bottomLeft","DataUtils","bringCircleWithIdToFront","setTimeout","selectAll","remove","append","convertDatumToLngLatArray","computePointId","drawArcBetweenNodes","origin","destination","hash","idPoint","getSource","route","constructFeatureCollection","arcifyResult","lineDistance","features","numSteps","floor","arc","segment","push","geometry","coordinates","arcifyFeatureCollection","routeProc","point","addSource","addLayer","hasImage","loadImage","triangleImage","error","image","addImage","counter","animatePoint","start","end","properties","bearing","source","setData","requestAnimationFrame","clearArcsForId","removeLayer","removeSource","TooltipContents","isSelected","inp","kindnessClean","kindnessTrimmed","substring","DEFAULT","SELECTED","SEARCHING","TRACING","TRACE_STATS","accessToken","workerClass","MapboxWorker","MapboxGLMap","setIsLoading","selectedNode","setSelectedNode","hoveredNode","setHoveredNode","mode","setTrace","resetTrace","useState","setMap","boundingObject","setBoundingObject","mapContainer","useRef","prevLineId","setPrevLineId","nextLineId","setNextLineId","useEffect","Map","container","current","center","zoom","MapUtils","getCanvasContainer","join","enter","e","pageX","pageY","update","exit","boundingObjectNew","fitBounds","AppMode","nodes","newPrevLineId","newNextLineId","traceIndex","indexOf","prevNode","nextNode","LineUtils","drawAndZoomLines","traceNew","ref","el","className","KindnessCard","shortMode","LoadingSpinner","SidebarInfoCard","fontSize","to","Button","variant","color","TraceStepper","exitTraceMode","n","Tooltip","title","arrow","placement","disabled","onClick","DataToggle","dataUrl","setDataUrl","checked","label","FormControlLabel","control","Switch","onChange","event","eventChecked","target","labelPlacement","TraceStatistics","traceCount","firstDate","days","diff","toObject","toFixed","Sidebar","isLoading","clearSelectedNode","setMode","filterText","backgroundColor","href","src","KindnessSearchBar","filterNodes","setFilterText","value","cancelOnEscape","onRequestSearch","onCancelSearch","placeholder","DialogTitle","withStyles","theme","root","margin","padding","spacing","closeButton","position","right","top","palette","grey","props","children","classes","onClose","other","disableTypography","Typography","IconButton","aria-label","DialogContent","MuiDialogContent","HelpDialog","MuiDialogActions","open","setOpen","handleClose","Dialog","aria-labelledby","dividers","gutterBottom","kindnessCardImage","AddDialog","StatisticsSidebar","traceId","numPoints","ids","Set","numIds","size","pathLengths","Array","from","maxPathLength","Object","values","maxPathId","_","maxBy","keys","o","averagePathLength","dataSorted","mostRecentNode","dates","now","diffDays","ceil","countPerDay","range","date","plus","count","dt","startOf","width","height","svg","domain","call","DATE_SHORT","datum","AboutPage","summaryImage","controls","type","yodaImage","MainPage","trie","setTrie","openDialog","setOpenDialog","openAddDialog","setOpenAddDialog","openSummaryStats","setOpenSummaryStats","escKeyHandler","keyCode","window","innerWidth","alert","document","addEventListener","fetchData","Tabletop","init","simpleSheet","then","dataProc","fromFormat","numericalFields","dataProcNumerical","forEach","f","ts","TrieSearch","idFieldOrFunction","addAll","catch","console","warn","handleSetSelectedNode","dataFiltSearch","get","split","UNION_REDUCER","Fab","App","log","process","basename","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dc435ea5.chunk.js","sourcesContent":["const REAL_DATA_URL = 'https://docs.google.com/spreadsheets/d/1IqEBIcnFZ_BFCrD8jhk11yVoOjfxzZpiZLdL4cL3oK0/pubhtml'\nconst MASS_SPOOF_DATA_URL = 'https://docs.google.com/spreadsheets/d/1ILNeaJC675bNSCWHgAK-2hD6MNZB38PYh7Y90MncF50/pubhtml'\nconst USA_SPOOF_DATA_URL = 'https://docs.google.com/spreadsheets/d/1BvBwyy1xYYhdiokMfbyxssu5nlB0arRMvxyuQLCzsH4/pubhtml'\nconst SPOOF_DATA_URL = MASS_SPOOF_DATA_URL\n\n// this is the format used by Google sheets\nconst TIMESTAMP_FORMAT = 'M/d/yyyy H:mm:ss'\n\n// this is the format that was originally used by Jack in spoof data\n// const TIMESTAMP_FORMAT = 'MM/dd/yy h:mm a'\n\nconst TIMESTAMP_KEY_NAME = 'Timestamp'\nconst ID_KEY_NAME = 'What is the ID Number on your kindness card? (We need this to track the spread of kindness!)'\nconst STREET_NUMBER_KEY_NAME = 'street_number'\nconst STREET_KEY_NAME = 'street_name'\nconst CITY_KEY_NAME = 'admin_level_3'\nconst STATE_KEY_NAME = 'admin_level_1'\nconst ZIP_KEY_NAME = 'zip_code'\nconst KINDNESS_KEY_NAME = 'Tell us about the act of kindness you gave/received!'\nconst CENTER_LNG_KEY_NAME = 'center_lng'\nconst CENTER_LAT_KEY_NAME = 'center_lat'\n\n// also add a constant for the root ID\nconst ROOT_ACT_ID = 0\n\nexport {\n    TIMESTAMP_KEY_NAME,\n    ID_KEY_NAME,\n    STREET_NUMBER_KEY_NAME,\n    STREET_KEY_NAME,\n    CITY_KEY_NAME,\n    STATE_KEY_NAME,\n    ZIP_KEY_NAME,\n    KINDNESS_KEY_NAME,\n    CENTER_LNG_KEY_NAME,\n    CENTER_LAT_KEY_NAME,\n\n    REAL_DATA_URL,\n    SPOOF_DATA_URL,\n\n    TIMESTAMP_FORMAT,\n\n    ROOT_ACT_ID,\n}\n","import { DateTime } from 'luxon'\nimport Filter from 'bad-words'\nimport * as turf from '@turf/turf'\nimport * as DataConstants from './dataConstants'\n\nconst DEGREES_TO_MILES = 69\nconst LNG_KEY = 'lng'\nconst LAT_KEY = 'lat'\n\nconst BAD_WORDS_FILTER = new Filter()\n\nconst processRawSheetsData = (data) => {\n    // filter any rows that don't have center lng and lat\n    const dataFilt = data ? data.filter(d => {\n        return d[DataConstants.CENTER_LNG_KEY_NAME] && d[DataConstants.CENTER_LAT_KEY_NAME]\n    }) : null\n\n    // add index, dateTime, and has fields for later use\n    const dataProc = dataFilt ? dataFilt.map((d, i) => ({\n        ...d,\n        index: i,\n        dateTime: DateTime.fromFormat(d[DataConstants.TIMESTAMP_KEY_NAME], DataConstants.TIMESTAMP_FORMAT),\n        hash: `${i}-${d[DataConstants.TIMESTAMP_KEY_NAME]}`\n    })) : null\n\n    // convert certain fields to numbers\n    const numericalFields = [\n        DataConstants.ID_KEY_NAME,\n        DataConstants.CENTER_LNG_KEY_NAME,\n        DataConstants.CENTER_LAT_KEY_NAME,\n    ]\n\n    const dataProcNumerical = dataProc.map(d => {\n        numericalFields.forEach(f => {\n            d[f] = +d[f]\n        })\n        return d\n    })\n\n    const dataOverlappingProc = handleOverlappingPoints(dataProcNumerical)\n    return dataOverlappingProc\n}\n\nconst handleOverlappingPoints = (data) => {\n    // return a new data where any lat long pairs that are overlapping are randomly shifted\n    const lngKey = DataConstants.CENTER_LNG_KEY_NAME\n    const latKey = DataConstants.CENTER_LAT_KEY_NAME\n    const lngLatString = d => `${d[lngKey]} ${d[latKey]}`\n\n    // get set of all unique lng lat strings in data\n    const lngLatsMap = data.map(lngLatString).reduce((map, s) => {\n        map[s] = (map[s] || 0) + 1\n        return map\n    }, {})\n\n    // adjust the data based on this\n    // for each point, handle necessary permuation\n    const dataAdjusted = data.map(d => {\n        const count = lngLatsMap[lngLatString(d)]\n\n        if (count === 1) {\n            return d\n        }\n\n        // permute since there is more than 1 of this point\n        const { lng, lat } = permuteLngLat(\n            d[lngKey],\n            d[latKey]\n        )\n\n        d[lngKey] = lng\n        d[latKey] = lat\n        return d\n    })\n    return dataAdjusted\n}\n\nconst permuteLngLat = (lng, lat, permutationMiles = 0.1) => {\n    // get random deltas in the range [-permutationMiles, permutationMiles]\n    const permutationDegrees = permutationMiles / DEGREES_TO_MILES\n    const random = () => Math.random() * (2 * permutationDegrees) - permutationDegrees\n    return {\n        lng: lng + random(),\n        lat: lat + random(),\n    }\n}\n\nconst nodesAreEqual = (one, two) => {\n    if (!one || !two)\n        return false\n\n    return one.index == two.index\n}\n\nconst computeLngLatBoundingBox = (lngLatPoints, paddingMiles, isRatioPadding = false, padLeft = true) => {\n    // compute top right and bottom left\n    // then, add some padding amount in miles\n    var paddingDegreesLng = 0\n    var paddingDegreesLat = 0\n    if (!isRatioPadding)\n        paddingDegreesLng = paddingMiles / DEGREES_TO_MILES\n    paddingDegreesLat = paddingDegreesLng\n\n    // TODO fix hard coding here\n    const leftPadConstant = padLeft ? 5 : 1\n\n    const extractKey = key => lngLatPoints.map((d => d[key]))\n\n    const maxLng = Math.max(...extractKey(LNG_KEY))\n    const minLng = Math.min(...extractKey(LNG_KEY))\n    const maxLat = Math.max(...extractKey(LAT_KEY))\n    const minLat = Math.min(...extractKey(LAT_KEY))\n\n    if (isRatioPadding) {\n        paddingDegreesLng = (maxLng - minLng) * paddingMiles\n        paddingDegreesLat = (maxLat - minLat) * (paddingMiles * 12)\n    }\n\n    return {\n        topRight: {\n            lng: maxLng + paddingDegreesLng,\n            lat: minLat + paddingDegreesLat,\n        },\n        bottomLeft: {\n            lng: minLng - paddingDegreesLng * leftPadConstant,\n            lat: maxLat - paddingDegreesLat,\n        }\n    }\n}\n\nconst filterTraceListForNode = (data, node) => {\n    const id = node[DataConstants.ID_KEY_NAME]\n    return filterTraceListForId(data, id)\n}\n\nconst filterTraceListForId = (data, id) => {\n    let dataFilt\n    if (id === DataConstants.ROOT_ACT_ID) {\n        // if the id is the root note, just select all of data\n        dataFilt = data\n    } else {\n        // select this id, and the root\n        dataFilt = data\n            .filter(d =>\n                (d[DataConstants.ID_KEY_NAME] === id) ||\n                (d[DataConstants.ID_KEY_NAME] === DataConstants.ROOT_ACT_ID)\n            )\n    }\n    \n    // apply sorting by date\n    return sortByDate(dataFilt)\n}\n\nconst formatFieldsForDisplay = (node) => {\n    const streetNumber = node[DataConstants.STREET_NUMBER_KEY_NAME]\n    const street = node[DataConstants.STREET_KEY_NAME]\n    const address = (streetNumber && street) ? `${(streetNumber ? `${streetNumber} ` : null)}${street}` : null\n    const city = node[DataConstants.CITY_KEY_NAME]\n    const state = node[DataConstants.STATE_KEY_NAME]\n    const cityState = (city || state) ? `${city}${city ? `, ${state}` : state}` : null\n    const zip = node[DataConstants.ZIP_KEY_NAME]\n    const location = `${address || 'No street address provided'}\\n${cityState || 'No city/state provided'}${zip ? `\\n${zip}` : ''}`\n    const kindness = node[DataConstants.KINDNESS_KEY_NAME]\n\n    // apply necessary parsing for date\n    const date = node.dateTime\n    const dateString = date.toLocaleString(DateTime.DATETIME_SHORT)\n\n    return {\n        kindness,\n        dateString,\n        location,\n        cityState,\n    }\n}\n\n// write function to quickly convert a data array to the fomat for lat lng\nconst generateLngLatArray = data => data.map(d => ({\n    lng: d[DataConstants.CENTER_LNG_KEY_NAME],\n    lat: d[DataConstants.CENTER_LAT_KEY_NAME],\n}))\n\nconst cleanDescription = (text) => {\n    return BAD_WORDS_FILTER.clean(text)\n}\n\nconst pathLengthMiles = (data) => {\n    const lngLatarray = generateLngLatArray(data)\n    let distance = 0\n    for (let i = 0; i < lngLatarray.length - 1; i++) {\n        distance += turf.distance(\n            turf.point([lngLatarray[i].lng, lngLatarray[i].lat]),\n            turf.point([lngLatarray[i + 1].lng, lngLatarray[i + 1].lat]),\n            {\n                'units': 'miles'\n            },\n        )\n    }\n    return distance\n}\n\nconst sortByDate = (data) => data.sort((a, b) => a.dateTime.toMillis() - b.dateTime.toMillis())\n\nexport {\n    processRawSheetsData,\n    nodesAreEqual,\n    computeLngLatBoundingBox,\n    filterTraceListForNode,\n    filterTraceListForId,\n    formatFieldsForDisplay,\n    generateLngLatArray,\n    cleanDescription,\n    pathLengthMiles,\n    sortByDate,\n}\n","import * as d3 from 'd3'\nimport mapboxgl from \"mapbox-gl\"\nimport * as DataConstants from '../../utils/dataConstants'\nimport * as DataUtils from '../../utils/dataUtils'\n\nconst POINT_ZOOM = 12\nconst ZOOM_EASE_MILLIS = 3000\nconst POINT_ZOOM_MILES = 1\nconst RATIO_PAD = 0.1\n\nconst initializeMap = ({ setMap, mapContainer }) => {\n    const map = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/light-v10',\n        center: [-100, 40],\n        zoom: 3,\n    })\n\n    map.on(\"load\", () => {\n        setMap(map)\n    })\n}\n\nconst zoomMapToBoundingObject = (map, boundingObject) => {\n    const { topRight, bottomLeft } = boundingObject\n    map.fitBounds([\n        [bottomLeft.lng, bottomLeft.lat],\n        [topRight.lng, topRight.lat]\n    ], {\n        duration: ZOOM_EASE_MILLIS,\n    })\n}\n\nconst showTooltip = (e, d) => {\n    const tooltip = d3.select('.map-tooltip')\n    tooltip\n        .transition()\n        .duration(0)\n        .style('opacity', 0.8)\n        .style('left', `${e.pageX + 50}px`)\n        .style('top', `${e.pageY - 50}px`)\n}\n\nconst hideTooltip = (callback) => {\n    const tooltip = d3.select('.map-tooltip')\n    tooltip\n        .transition().duration(500)\n        .style(\"opacity\", 0)\n        .on('end', callback)\n}\n\nconst resetAllCircleColors = (fill = 'steelblue') => {\n    return d3.selectAll('.circle')\n        .transition()\n        .duration(500)\n        .style('fill', fill)\n        .style('opacity', 1)\n}\n\n// write function to generate ID of circle\nconst uniqueCircleId = d => `circle-${d.index}`\n\n// write function to generate class of circle based off id key\nconst circleClass = d => `circle circle-${d[DataConstants.ID_KEY_NAME]}`\n\n// write projection function for map\nconst projectLngLatToXY = (map, d) => {\n    return map.project(\n        new mapboxgl.LngLat(d[DataConstants.CENTER_LNG_KEY_NAME], d[DataConstants.CENTER_LAT_KEY_NAME])\n    )\n}\n\nconst zoomToDataPoint = (map, d) => {\n    map.flyTo({\n        center: [\n            d[DataConstants.CENTER_LNG_KEY_NAME],\n            d[DataConstants.CENTER_LAT_KEY_NAME],\n        ],\n        zoom: POINT_ZOOM,\n        essential: true\n    })\n}\n\nconst mapRender = (map) => {\n    d3.selectAll('.circle')\n        .attr('cx', d => projectLngLatToXY(map, d).x)\n        .attr('cy', d => projectLngLatToXY(map, d).y)\n}\n\nconst getBoudingObjectForTraceList = (trace) => {\n    return DataUtils.computeLngLatBoundingBox(\n        DataUtils.generateLngLatArray(trace),\n        trace.length > 1 ? RATIO_PAD : POINT_ZOOM_MILES,\n        trace.length > 1 ? true : false,\n        trace.length > 1 ? true : false,\n    )\n}\n\nconst bringCircleWithIdToFront = (id) => {\n    setTimeout(() => {\n        d3.select('.map-svg')\n            .selectAll('use')\n            .remove()\n\n        d3.select('.map-svg')\n            .append('use')\n            .attr('xlink:href', id)\n    }, 500)\n}\n\nconst getPrevAndNextNodes = (trace, selectedNode) => {\n    const traceIndex = trace.indexOf(selectedNode)\n    const prevNode = traceIndex > 0 ? trace[traceIndex - 1] : null\n    const nextNode = traceIndex < trace.length - 1 ? trace[traceIndex + 1] : null\n    return {\n        prevNode,\n        nextNode,\n    }\n}\n\nexport {\n    initializeMap,\n    zoomMapToBoundingObject,\n    showTooltip,\n    hideTooltip,\n    resetAllCircleColors,\n    uniqueCircleId,\n    circleClass,\n    projectLngLatToXY,\n    zoomToDataPoint,\n    mapRender,\n    getBoudingObjectForTraceList,\n    bringCircleWithIdToFront,\n    getPrevAndNextNodes,\n}\n","export default __webpack_public_path__ + \"static/media/triangle.c5a97129.png\";","import * as turf from '@turf/turf'\nimport * as DataConstants from '../../utils/dataConstants'\nimport triangleImage from '../../triangle.png'\n\nconst MILES_PER_STEP = 10\nconst MIN_NUM_STEPS = 100\n\nconst convertDatumToLngLatArray = d => [\n    d[DataConstants.CENTER_LNG_KEY_NAME],\n    d[DataConstants.CENTER_LAT_KEY_NAME],\n]\n\nconst computePointId = (id) => `${id}-point`\n\nconst constructFeatureCollection = (origin, destination) => ({\n    'type': 'FeatureCollection',\n    'features': [\n        {\n            'type': 'Feature',\n            'geometry': {\n                'type': 'LineString',\n                'coordinates': [\n                    convertDatumToLngLatArray(origin),\n                    convertDatumToLngLatArray(destination),\n                ],\n            },\n        },\n    ],\n})\n\nconst arcifyFeatureCollection = (route) => {\n    // src: https://docs.mapbox.com/mapbox-gl-js/example/animate-point-along-route/\n    // Calculate the distance in kilometers between route start/end point.\n    const lineDistance = turf.length(route.features[0])\n    const numSteps = Math.max(Math.floor(lineDistance / MILES_PER_STEP), MIN_NUM_STEPS)\n\n    const arc = []\n\n    // Draw an arc between the `origin` & `destination` of the two points\n    for (var i = 0; i < lineDistance; i += lineDistance / numSteps) {\n        const segment = turf.along(route.features[0], i)\n        arc.push(segment.geometry.coordinates)\n    }\n\n    // append a final segment\n    const segment = turf.along(route.features[0], lineDistance)\n    arc.push(segment.geometry.coordinates)\n\n    // Update the route with calculated arc coordinates\n    route.features[0].geometry.coordinates = arc\n    return {\n        route,\n        numSteps,\n    }\n}\n\nconst drawArcBetweenNodes = (map, origin, destination) => {\n    const id = `${origin.hash} -> ${destination.hash}`\n    const idPoint = computePointId(id)\n\n    // if already exists, just return\n    if (map.getSource(id)) {\n        return id\n    }\n\n    const route = constructFeatureCollection(origin, destination)\n    const arcifyResult = arcifyFeatureCollection(route)\n    const routeProc = arcifyResult.route\n    const { numSteps } = arcifyResult\n\n    // set up point to animate\n    // A single point that animates along the route.\n    // Coordinates are initially set to origin.\n    const point = {\n        'type': 'FeatureCollection',\n        'features': [\n            {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'Point',\n                    'coordinates': convertDatumToLngLatArray(origin),\n                },\n            },\n        ],\n    }\n\n    map.addSource(id, {\n        'type': 'geojson',\n        'data': routeProc\n    })\n\n    map.addLayer({\n        'id': id,\n        'source': id,\n        'type': 'line',\n        'paint': {\n            'line-width': 5,\n            'line-color': 'black'\n        },\n        'layout': {\n            'line-cap': 'round',\n            'line-join': 'round',\n        },\n    })\n\n    if (!map.hasImage('triangle')) {\n        map.loadImage(\n            triangleImage,\n            function (error, image) {\n                if (error) throw error\n\n                // Add the image to the map style.\n                map.addImage('triangle', image)\n            }\n        )\n    }\n\n    map.addSource(idPoint, {\n        'type': 'geojson',\n        'data': point\n    })\n\n    map.addLayer({\n        'id': idPoint,\n        'source': idPoint,\n        'type': 'symbol',\n        'layout': {\n            // This icon is a part of the Mapbox Streets style.\n            // To view all images available in a Mapbox style, open\n            // the style in Mapbox Studio and click the \"Images\" tab.\n            // To add a new image to the style at runtime see\n            // https://docs.mapbox.com/mapbox-gl-js/example/add-image/\n            'icon-image': 'triangle', // works: heliport-15\n            // doesn't work: rectangle-blue-2\n            'icon-rotate': ['get', 'bearing'],\n            'icon-rotation-alignment': 'map',\n            'icon-allow-overlap': true,\n            'icon-ignore-placement': true,\n            'icon-size': .02,\n        }\n    })\n\n    let counter = 0\n\n    const animatePoint = () => {\n        var start =\n            route.features[0].geometry.coordinates[\n            counter >= numSteps ? counter - 1 : counter\n            ]\n        var end =\n            route.features[0].geometry.coordinates[\n            counter >= numSteps ? counter : counter + 1\n            ]\n        if (!start || !end) return\n\n        // Update point geometry to a new position based on counter denoting\n        // the index to access the arc\n        point.features[0].geometry.coordinates =\n            route.features[0].geometry.coordinates[counter]\n\n        // Calculate the bearing to ensure the icon is rotated to match the route arc\n        // The bearing is calculated between the current point and the next point, except\n        // at the end of the arc, which uses the previous point and the current point\n        point.features[0].properties.bearing = turf.bearing(\n            turf.point(start),\n            turf.point(end)\n        )\n\n        // Update the source with this new data\n        const source = map.getSource(idPoint)\n        if (!source) {\n            // this has been removed - stop the animation\n            return\n        }\n\n        source.setData(point)\n\n        // Request the next frame of animation as long as the end has not been reached\n        if (counter < numSteps) {\n            setTimeout(() => requestAnimationFrame(animatePoint), 500)\n        } else {\n            counter = 0\n            setTimeout(() => requestAnimationFrame(animatePoint), 500)\n        }\n\n        counter = counter + 10\n    }\n\n    // start the animation\n    animatePoint()\n\n    return id\n}\n\nconst clearArcsForId = (map, id) => {\n    if (!id) {\n        return\n    }\n\n    map.removeLayer(id)\n    map.removeSource(id)\n\n    // also clear the associated point\n    const idPoint = computePointId(id)\n    map.removeLayer(idPoint)\n    map.removeSource(idPoint)\n}\n\nexport {\n    drawArcBetweenNodes,\n    clearArcsForId,\n}\n","import * as StringUtils from '../../utils/stringUtils'\nimport * as DataUtils from '../../utils/dataUtils'\n\nconst TooltipContents = ({ node, isSelected }) => {\n    // handle null node case\n    if (! node) {\n        return null\n    }\n\n    const {\n        kindness,\n        cityState,\n    } = DataUtils.formatFieldsForDisplay(node)\n\n    const kindnessClean = DataUtils.cleanDescription(kindness)\n    const kindnessTrimmed = StringUtils.trimWithElipses(kindnessClean, 140)\n\n    return (\n        <div>\n            <p><b>{kindnessTrimmed}</b></p>\n            <p><i>{cityState}</i></p>\n            <p>{! isSelected ? 'Click for more info!' : null}</p>\n        </div>\n    )\n}\n\nexport default TooltipContents\n","const trimWithElipses = (inp, length) => {\n    if (inp.length > length) {\n        return `${inp.substring(0, length)}...`\n    }\n    \n    return inp\n}\n\nexport {\n    trimWithElipses\n}","const DEFAULT = 'default'\nconst SELECTED = 'selected'\nconst SEARCHING = 'searching'\nconst TRACING = 'tracing'\nconst TRACE_STATS = 'trace-stats'\n\nexport {\n    DEFAULT,\n    SELECTED,\n    SEARCHING,\n    TRACING,\n    TRACE_STATS,\n}\n","import React, { useEffect, useRef, useState } from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport * as d3 from 'd3'\nimport * as MapUtils from './mapUtils'\nimport * as LineUtils from './lineUtils'\nimport * as DataConstants from '../../utils/dataConstants'\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker'\nimport TooltipContents from '../tooltip'\nimport * as DataUtils from '../../utils/dataUtils'\nimport * as AppMode from '../../utils/appMode'\n\nimport '../../styles/Map.css'\n\nconst DEFAULT_RADIUS = 10\nconst BIG_RADIUS = 20\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiY21vcm9uZXkiLCJhIjoiY2tudGNscDJjMDFldDJ3b3pjMTh6ejJyayJ9.YAPmFkdy_Eh9K20cFlIvaQ'\nmapboxgl.workerClass = MapboxWorker\n\nconst MapboxGLMap = ({ trace, setIsLoading, selectedNode, setSelectedNode, hoveredNode, setHoveredNode, mode, setTrace, resetTrace }) => {\n    const [map, setMap] = useState(null)\n    const [boundingObject, setBoundingObject] = useState(null)\n    const mapContainer = useRef(null)\n    const [prevLineId, setPrevLineId] = useState(null)\n    const [nextLineId, setNextLineId] = useState(null)\n\n    // todo refactor\n    const drawAndZoomLines = () => {\n        const {\n            prevNode,\n            nextNode,\n        } = MapUtils.getPrevAndNextNodes(trace, selectedNode)\n\n        let newPrevLineId, newNextLineId\n\n        if (prevNode) {\n            newPrevLineId = LineUtils.drawArcBetweenNodes(map, prevNode, selectedNode)\n        }\n        if (nextNode) {\n            newNextLineId = LineUtils.drawArcBetweenNodes(map, selectedNode, nextNode)\n        }\n\n        // delete any arcs that are not currently drawn\n        if (prevLineId !== newPrevLineId && prevLineId !== newNextLineId) {\n            LineUtils.clearArcsForId(map, prevLineId)\n        }\n        if (nextLineId !== newPrevLineId && nextLineId !== newNextLineId) {\n            LineUtils.clearArcsForId(map, nextLineId)\n        }\n\n        // update our ids\n        setPrevLineId(newPrevLineId)\n        setNextLineId(newNextLineId)\n\n        // update the bounding box to include current, prev and next\n        const nodes = [selectedNode]\n        if (prevNode) {\n            nodes.push(prevNode)\n        }\n        if (nextNode) {\n            nodes.push(nextNode)\n        }\n        const boundingObjectNew = MapUtils.getBoudingObjectForTraceList(nodes)\n        setBoundingObject(boundingObjectNew)\n\n        // return the prev and next for reference\n        return {\n            nodes,\n        }\n    }\n\n    const clearAllLines = () => {\n        if (!map)\n            return\n\n        // clear any previous ids\n        LineUtils.clearArcsForId(map, prevLineId)\n        LineUtils.clearArcsForId(map, nextLineId)\n\n        // clear the ids\n        setPrevLineId(null)\n        setNextLineId(null)\n    }\n\n    // let's init our map first again\n    useEffect(() => {\n        if (map === null) {\n            // need to init the map since it is null\n            MapUtils.initializeMap({ setMap, mapContainer })\n        } else {\n            // also append an svg to the map for later use\n            // TODO put this in css\n            var container = map.getCanvasContainer()\n            d3.select(container)\n                .append('svg')\n                .attr('class', 'map-svg')\n                .attr('width', '100%')\n                .attr('height', '100%')\n                .style('position', 'absolute')\n                .style('z-index', 2)\n                .style('top', 0)\n                .style('left', 0)\n\n            // also set up map events for re-render\n            map.on('viewreset', () => MapUtils.mapRender(map))\n            map.on('move', () => MapUtils.mapRender(map))\n            map.on('moveend', () => MapUtils.mapRender(map))\n        }\n    }, [map])\n\n    // here is where we do our data join for trace points\n    useEffect(() => {\n        if (map && trace) {\n            // do a data join on all the trace points with d3\n            d3.select('.map-svg')\n                .selectAll('circle')\n                .data(trace, d => d.hash)\n                .join(\n                    enter => enter\n                        .append('circle')\n                        .attr('id', MapUtils.uniqueCircleId)\n                        .attr('class', MapUtils.circleClass)\n                        .attr('r', DEFAULT_RADIUS)\n                        .style('fill', 'steelblue')\n                        .style('opacity', d => {\n                            if (selectedNode && DataUtils.nodesAreEqual(d, selectedNode)) {\n                                return 1\n                            } else if (selectedNode && !DataUtils.nodesAreEqual(d, selectedNode)) {\n                                return 0.5\n                            } else {\n                                return 1\n                            }\n                        })\n                        .on('click', (e, d) => setSelectedNode(d))\n                        .on('mouseover', (e, d) => {\n                            setHoveredNode(d)\n                            MapUtils.showTooltip(e, d)\n                        })\n                        .on('mouseout', (e, d) => {\n                            MapUtils.hideTooltip(() => setHoveredNode(null))\n                        }),\n                    update => update\n                        .on('click', (e, d) => setSelectedNode(d)),\n                    exit => exit.remove()\n                )\n\n            // perform initial render\n            MapUtils.mapRender(map)\n\n            // also complete loading\n            setIsLoading(false)\n\n            // update bounding box with the initial view\n            const boundingObjectNew = MapUtils.getBoudingObjectForTraceList(trace)\n            setBoundingObject(boundingObjectNew)\n        }\n    }, [map, trace, mode])\n\n    // THE PURPOSE OF THIS EFFECT IS TO ZOOM ON THE MAP\n    // WE RE-ZOOM WHEN:\n    // 1. BOUNDING BOX CHANGES\n    // 2. SELECTED NODE BECOMES NULL \n    // listen for changes in the bounding box\n    useEffect(() => {\n        if (map && boundingObject) {\n            MapUtils.zoomMapToBoundingObject(map, boundingObject)\n\n            // always clear the tooltip and hovered node in this case\n            setTimeout(() => MapUtils.hideTooltip(() => setHoveredNode(null)), 500)\n        }\n    }, [map, boundingObject])\n\n    // listen for changes in the selected node\n    // IF GENERAL NON TRACE MODE\n    //     IF SELECTED NODE NON NULL, ZOOM TO IT AND MAKE IT RED\n    //     ELSE, RESET TO ALL POINTS AND MAKE ALL POINTS BLUE\n    // IF TRACE MODE\n    //     MAKE IT GREEN, ALL OTHERS PURPLE\n    useEffect(() => {\n        if (mode === AppMode.SELECTED && selectedNode) {\n            // handle colors\n            // make other circles not red, and less opaque\n            MapUtils.resetAllCircleColors()\n                .style('opacity', 0.5)\n\n            // make this circle red and dark\n            const id = `#${MapUtils.uniqueCircleId(selectedNode)}`\n            d3.select(id)\n                .transition()\n                .duration(500)\n                .style('fill', 'red')\n                .style('opacity', 1)\n                .attr('r', DEFAULT_RADIUS)\n\n            // draw it over all other circles\n            MapUtils.bringCircleWithIdToFront(id)\n\n            // update bounding box\n            const boundingObjectNew = MapUtils.getBoudingObjectForTraceList([selectedNode])\n            setBoundingObject(boundingObjectNew)\n        } else if ((mode === AppMode.DEFAULT || mode === AppMode.SEARCHING || mode === AppMode.TRACE_STATS) && trace) {\n            // reset the bounding box to original trace points\n            const boundingObjectNew = MapUtils.getBoudingObjectForTraceList(trace)\n            setBoundingObject(boundingObjectNew)\n\n            // also clear the color\n            MapUtils.resetAllCircleColors()\n                .attr('r', DEFAULT_RADIUS)\n        } else if (mode === AppMode.TRACING) {\n            // if we have selected the root node, we need to be sure to zoom to original trace\n            if (selectedNode[DataConstants.ID_KEY_NAME] === DataConstants.ROOT_ACT_ID) {\n                const boundingObjectNew = MapUtils.getBoudingObjectForTraceList(trace)\n                setBoundingObject(boundingObjectNew)\n            }\n\n            // set up our lines\n            const {\n                nodes,\n            } = drawAndZoomLines()\n\n            // update circle colors\n            d3.selectAll('.circle')\n                .filter(d => nodes.indexOf(d) === -1)\n                .transition()\n                .duration(500)\n                .style('fill', 'purple')\n                .style('opacity', 0)\n                .attr('r', DEFAULT_RADIUS)\n\n            d3.selectAll('.circle')\n                .filter(d => (nodes.indexOf(d) > -1 && d.hash !== selectedNode.hash))\n                .transition()\n                .duration(500)\n                .style('fill', 'purple')\n                .style('opacity', 1)\n                .attr('r', DEFAULT_RADIUS)\n\n            // make the selected node bigger and green\n            const id = `#${MapUtils.uniqueCircleId(selectedNode)}`\n\n            d3.select(id)\n                .transition()\n                .duration(500)\n                .style('fill', 'green')\n                .attr('r', BIG_RADIUS) // TODO add this back if we want\n                .style('opacity', 1)\n\n            // draw it over all other circles\n            MapUtils.bringCircleWithIdToFront(id)\n\n        }\n    }, [mode, selectedNode, trace])\n\n    // listen for changes in the mode state\n    // re-filter the trace list as needed\n    useEffect(() => {\n        if (mode === AppMode.TRACING) {\n            // filter on the current node\n            const traceNew = DataUtils.filterTraceListForNode(trace, selectedNode)\n            setTrace(traceNew)\n            return\n        }\n\n        // non-trace mode - clear all lines\n        clearAllLines()\n\n        if (mode === AppMode.DEFAULT) {\n            // reset trace back to original data array\n            resetTrace()\n        } else if (mode === AppMode.SEARCHING) {\n            // do nothing, this should be handled by the search bar\n        } else if (mode === AppMode.SELECTED) {\n            // reset trace back to original data array\n            resetTrace()\n        } else if (mode === AppMode.TRACE_STATS) {\n            // do nothing\n        }\n    }, [mode])\n\n    return <div ref={el => (mapContainer.current = el)} className='map-container-div'>\n        {\n            mode !== AppMode.TRACING ? (\n                <div className='map-tooltip' style={{ 'opacity': 0 }}>\n                    <TooltipContents node={hoveredNode} isSelected={DataUtils.nodesAreEqual(hoveredNode, selectedNode)} />\n                </div>\n            ) : null\n        }\n    </div>\n}\n\nexport default MapboxGLMap\n","import * as DataUtils from '../../utils/dataUtils'\n\nconst KindnessCard = ({ node, shortMode }) => {\n    // handle null node case\n    if (! node) {\n        return null\n    }\n\n    const {\n        kindness,\n        dateString,\n        location,\n    } = DataUtils.formatFieldsForDisplay(node)\n\n    const kindnessClean = DataUtils.cleanDescription(kindness)\n\n    return shortMode ? (\n        <div className=\"kindness-card-inner\">\n            <p>Most Recent Act of Kindness:</p>\n            <p><b>{kindnessClean || 'No kindness description provided!'}</b></p>\n            <p><b>{location}</b></p>\n            <p><b>{dateString}</b></p>\n        </div>\n        ) : (\n        <div className=\"kindness-card-inner\">\n            <p>Act of Kindness:</p>\n            <div className=\"kindness-card-description\">\n                <p><b>{kindnessClean || 'No kindness description provided!'}</b></p>\n            </div>\n            <p>Location:</p>\n            <p><b>{location}</b></p>\n            <p>Date & Time:</p>\n            <p><b>{dateString}</b></p>\n        </div>\n    )\n}\n\nexport default KindnessCard","import '../../styles/Loading.css'\n\nconst LoadingSpinner = () => {\n    return (\n        <div className=\"loading-wrapper\">\n            <div className=\"la-ball-clip-rotate la-2x\">\n                <div></div>\n            </div>\n            <p>Loading...</p>\n        </div>\n    )\n}\n\nexport default LoadingSpinner\n","import MouseIcon from '@material-ui/icons/Mouse'\nimport ExploreIcon from '@material-ui/icons/Explore'\nimport ToggleOffIcon from '@material-ui/icons/ToggleOff'\nimport SearchIcon from '@material-ui/icons/Search'\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp'\nimport { Button } from '@material-ui/core'\nimport { Link } from 'react-router-dom'\n\n/*\n    Simple component to render some useful info when no node is selected.\n*/\nconst SidebarInfoCard = () => {\n    return (\n        <div>\n            <hr className=\"sidebar-divider\" />\n            <div className=\"sidebar-info-row\">\n                <div className=\"sidebar-info-left\">\n                    <MouseIcon fontSize=\"large\" />\n                </div>\n                <div className=\"sidebar-info-right\">\n                    <p><b>Click</b> a circle to explore that act of kindness!</p>\n                </div>\n            </div>\n            <div className=\"sidebar-info-row\">\n                <div className=\"sidebar-info-left\">\n                    <ExploreIcon fontSize=\"large\" />\n                </div>\n                <div className=\"sidebar-info-right\">\n                    <p><b>Trace</b> that act of kindness to see how may people have paid it forward.</p>\n                </div>\n            </div>\n            <div className=\"sidebar-info-row sidebar-info-row-search\">\n                <div className=\"sidebar-info-left\">\n                    <SearchIcon fontSize=\"large\" />\n                </div>\n                <div className=\"sidebar-info-right\">\n                    <p><b>Search</b> for acts of kindness by description, location, or ID.</p>\n                </div>\n            </div>\n            <div className=\"sidebar-info-row sidebar-info-row-stats\">\n                <div className=\"sidebar-info-left\">\n                    <TrendingUpIcon fontSize=\"large\" />\n                </div>\n                <div className=\"sidebar-info-right\">\n                    <p>View <b>summary statistics</b> about the entire dataset.</p>\n                </div>\n            </div>\n            <div className=\"sidebar-info-row sidebar-info-row-toggle\">\n                <div className=\"sidebar-info-left\">\n                    <ToggleOffIcon fontSize=\"large\" />\n                </div>\n                <div className=\"sidebar-info-right\">\n                    <p>Switch between <b>real-time</b> and <b>generated</b> data using the toggle below.</p>\n                </div>\n            </div>\n            <div className=\"sidebar-info-row sidebar-info-row-learn\">\n                <Link to='/about'>\n                    <Button variant=\"contained\" color=\"primary\">\n                        Learn More\n                </Button>\n                </Link>\n            </div>\n        </div >\n    )\n}\n\n// Search for acts of kindness by description, location, or ID\n\nexport default SidebarInfoCard","import KindnessCard from './kindnessCard'\nimport { Button } from '@material-ui/core'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward'\nimport Tooltip from '@material-ui/core/Tooltip'\n\nconst TraceStepper = ({ exitTraceMode, trace, selectedNode, setSelectedNode }) => {\n    // find the trace index\n    const traceIndex = trace.indexOf(selectedNode)\n\n    const n = trace.length\n\n    return (\n        <div className=\"trace-stepper-wrapper\">\n            <div className=\"trace-stepper-button-horizontal\">\n                <Tooltip title={<h2>Go to the first act in this path.</h2>} arrow placement=\"bottom\">\n                    <Button\n                        className=\"trace-stepper-button\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={traceIndex === 0}\n                        onClick={() => setSelectedNode(trace[0])}\n                    >\n                        First\n                </Button>\n                </Tooltip>\n                <Button\n                    className=\"trace-stepper-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={traceIndex === 0}\n                    onClick={() => setSelectedNode(trace[traceIndex - 1])}\n                >\n                    <ArrowBackIcon />\n                </Button>\n                <Button\n                    className=\"trace-stepper-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={traceIndex === n - 1}\n                    onClick={() => setSelectedNode(trace[traceIndex + 1])}\n                >\n                    <ArrowForwardIcon />\n                </Button>\n                <Tooltip title={<h2>Go to the most recent act in this path.</h2>} arrow placement=\"bottom\">\n                    <Button\n                        className=\"trace-stepper-button\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={traceIndex === n - 1}\n                        onClick={() => setSelectedNode(trace[n - 1])}\n                    >\n                        Last\n                </Button>\n                </Tooltip>\n            </div>\n            <p>{`${traceIndex + 1} / ${trace.length}`}</p>\n            <KindnessCard node={selectedNode} />\n        </div>\n    )\n}\n\nexport default TraceStepper\n","import FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Switch from '@material-ui/core/Switch'\nimport * as DataConstants from '../..//utils/dataConstants'\n\nconst DataToggle = ({ dataUrl, setDataUrl }) => {\n    const checked = dataUrl === DataConstants.REAL_DATA_URL\n\n    const handleChange = (event) => {\n        const eventChecked = event.target.checked\n        const dataUrlNew = eventChecked ? DataConstants.REAL_DATA_URL : DataConstants.SPOOF_DATA_URL\n        setDataUrl(dataUrlNew)\n    }\n\n    const label = dataUrl === DataConstants.REAL_DATA_URL ? 'Viewing Real Data' : 'Viewing Fake Data'\n\n    return (\n        <Tooltip title={<h2>Toggle to switch the data source.</h2>} arrow placement=\"top\">\n            <FormControlLabel\n                control={\n                    <Switch\n                        checked={checked}\n                        onChange={handleChange}\n                        // value={'checked'}\n                        color='primary'\n                    />\n                }\n                labelPlacement='top'\n                label={label}\n            />\n        </Tooltip>\n    )\n}\n\nexport default DataToggle","import * as DataUtils from '../../utils/dataUtils'\n\nconst TraceStatistics = ({ trace }) => {\n    const traceCount = trace.length\n    \n    // compute total distance travelled in miles\n    const distance = DataUtils.pathLengthMiles(trace)\n\n    // compute total time between first and last act\n    const firstDate = trace[0].dateTime\n    const lastDate = trace[trace.length - 1].dateTime\n    const diffDays = lastDate.diff(firstDate, 'days')\n    const { days } = diffDays.toObject()\n\n    return (\n        <div className=\"trace-statistics-inner\">\n            <div className=\"sidebar-clear-div\">\n                <h1>{traceCount}</h1>\n                <p>acts of kindness in this trace 😊</p>\n                <br></br>\n                <h1>{distance.toFixed(1)}</h1>\n                <p>total miles travelled 🌍</p>\n                <br></br>\n                <h1>{days.toFixed(1)}</h1>\n                <p>days between first & last act 📅 </p>\n            </div>\n        </div>\n    )\n}\n\nexport default TraceStatistics","import React from 'react'\nimport { Button } from '@material-ui/core'\nimport '../../styles/Sidebar.css'\nimport KindnessCard from './kindnessCard'\nimport LoadingSpinner from './loadingSpinner'\nimport SidebarInfoCard from './infoCard'\nimport TraceStepper from './traceStepper'\nimport DataToggle from './dataToggle'\nimport TraceStatistics from './traceStatistics'\nimport * as DataUtils from '../../utils/dataUtils'\nimport * as AppMode from '../../utils/appMode'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport { Link } from 'react-router-dom'\n\nconst Sidebar = ({ isLoading, selectedNode, setSelectedNode, clearSelectedNode, mode, setMode, trace, dataUrl, setDataUrl, filterText }) => {\n    // get a trace count\n    let traceCount = 0\n    if (selectedNode) {\n        const traceFilterList = DataUtils.filterTraceListForNode(trace, selectedNode)\n        traceCount = traceFilterList.length - 1\n    }\n    return (\n        <div className=\"sidebar-flex\">\n            <h1>😊 Kindness Tracker</h1>\n            {\n                isLoading ? <LoadingSpinner /> : null\n            }\n            {\n                !isLoading && mode === AppMode.DEFAULT ? <SidebarInfoCard /> : null\n            }\n            {\n                mode === AppMode.SELECTED ? (\n                    <div className=\"sidebar-clear-div\">\n                        <Tooltip title={<h2>Deselect the currently selected point, and show all points again.</h2>} arrow placement=\"right\">\n                            <Button variant=\"contained\" style={{ backgroundColor: 'red', color: 'white' }} className=\"sidebar-button-below\" onClick={clearSelectedNode}>Clear Selection</Button>\n                        </Tooltip>\n\n                        <Tooltip title={<h2>Track how other people have paid it forward to get to this act of kindness!</h2>} arrow placement=\"right\">\n                            <Button variant=\"contained\" style={{ backgroundColor: 'green', color: 'white' }} className=\"sidebar-button-below\" onClick={() => setMode(AppMode.TRACING)}>Trace this Act!</Button>\n                        </Tooltip>\n                        <h1>{traceCount}</h1>\n                        <p>{traceCount > 1 ? 'acts' : 'act'} of kindness {traceCount > 1 ? 'are' : 'is'} connected</p>\n                    </div>\n                ) : null\n            }\n            { mode === AppMode.SELECTED ? (\n                <div className=\"selected-card-wrapper\">\n                    <KindnessCard node={selectedNode} />\n                </div>\n            ) : null\n            }\n            {\n                mode === AppMode.TRACING ? (\n                    <div className=\"trace-stepper-button-exit\">\n                        <Button variant=\"contained\" style={{ backgroundColor: 'red', color: 'white' }} onClick={() => setMode(AppMode.SELECTED)}>\n                            Exit Trace Mode\n                        </Button>\n                    </div>\n                ) : null\n            }\n            {\n                mode === AppMode.TRACE_STATS ? (\n                    <div className=\"trace-stepper-button-exit\">\n                        <Button variant=\"contained\" style={{ backgroundColor: 'red', color: 'white' }} onClick={() => setMode(AppMode.TRACING)}>\n                            Back to Trace Mode\n                        </Button>\n                    </div>\n                ) : null\n            }\n            {\n                mode === AppMode.TRACING ? (\n                    <div>\n                        <TraceStepper\n                            exitTraceMode={() => setMode(AppMode.SELECTED)}\n                            trace={trace}\n                            selectedNode={selectedNode}\n                            setSelectedNode={setSelectedNode}\n                        />\n                        <Tooltip title={<h2>View information about this particular sequence of acts.</h2>} arrow placement=\"right\">\n                            <Button variant=\"contained\" style={{ backgroundColor: 'green', color: 'white' }} className=\"sidebar-button-above\" onClick={() => setMode(AppMode.TRACE_STATS)}>View Trace Statistics</Button>\n                        </Tooltip>\n                    </div>\n                ) : null\n            }\n            {\n                mode === AppMode.TRACE_STATS ? (\n                    <TraceStatistics trace={trace} />\n                ) : null\n            }\n            {\n                mode === AppMode.SEARCHING && trace.length > 0 ? (\n                    <div className=\"sidebar-clear-div\">\n                        <h1>{trace.length}</h1>\n                        <p>{trace.length > 1 ? 'acts' : 'act'} found for search query \"{filterText}\".</p>\n                        <p>Press Esc to clear.</p>\n                    </div>\n                ) : null\n            }\n            <div className=\"sidebar-bottom-content\">\n                <div className=\"data-toggle-outer\">\n                    <DataToggle\n                        dataUrl={dataUrl}\n                        setDataUrl={setDataUrl}\n                    />\n                </div>\n                <p className=\"sidebar-small-text\">Christian Moroney, Jackson Bernatchez, Kevin Lyons</p>\n                <p className=\"sidebar-small-text\">6.859 Final Project Spring 2021</p>\n                <p className=\"sidebar-small-text\">\n                    <Link to='/about'>\n                        Learn More\n                    </Link>\n                </p>\n                <div>\n                    <a href=\"https://github.com/6859-sp21/final-project-kindness-tracker\" target=\"_blank\">\n                        <img className=\"sidebar-git-image\" src=\"https://image.flaticon.com/icons/png/512/25/25231.png\"></img>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Sidebar\n","import React, { useEffect, useState } from 'react'\nimport SearchBar from 'material-ui-search-bar'\n\nconst KindnessSearchBar = ({ filterNodes, filterText, setFilterText }) => {\n  return (\n    <SearchBar\n      value={filterText || ''}\n      onChange={setFilterText}\n      cancelOnEscape={true}\n      onRequestSearch={() => filterNodes(filterText)}\n      onCancelSearch={() => {\n        setFilterText(null)\n        filterNodes(null)\n      }}\n      placeholder={'Search for acts of kindness by description, location, or ID. Press Enter to search. ⏎'}\n    />\n  )\n}\n\nexport default KindnessSearchBar","export default __webpack_public_path__ + \"static/media/kindness_card_image.c3ba2bc2.png\";","import React from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport Dialog from '@material-ui/core/Dialog'\nimport MuiDialogTitle from '@material-ui/core/DialogTitle'\nimport MuiDialogContent from '@material-ui/core/DialogContent'\nimport MuiDialogActions from '@material-ui/core/DialogActions'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport Typography from '@material-ui/core/Typography'\nimport kindnessCardImage from '../../kindness_card_image.png'\nimport { Link } from 'react-router-dom'\n\nimport '../../styles/Dialog.css'\n\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n})\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  )\n})\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent)\n\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions)\n\nconst HelpDialog = ({ open, setOpen }) => {\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  return (\n    <div>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          FAQs\n        </DialogTitle>\n        <DialogContent dividers>\n          <Typography gutterBottom variant=\"h6\">\n            <b>😊 &nbsp;What is Kindness Tracker?</b>\n          </Typography>\n          <Typography gutterBottom>\n            The purpose of this app is to track the spread of acts of kindness and encourage people to pay it forward!\n          </Typography>\n          <Typography gutterBottom variant=\"h6\">\n            <b>🤔 &nbsp;How does it work?</b>\n          </Typography>\n          <Typography gutterBottom>\n            We handed out kindness cards and encouraged people to pay it forward. When you do something nice for someone, you should give\n            them a card. They fill out out a Google form to tell us what happened. Then, the process repeats!\n            <img src={kindnessCardImage} className=\"kindness-card-image\" />\n          </Typography>\n          <Typography gutterBottom variant=\"h6\">\n            <b>↔️ &nbsp;What does it mean to \"trace\" an act of kindness?</b>\n          </Typography>\n          <Typography gutterBottom>\n            We mean that you are <b>tracing</b> the path this act of kindness has travelled as people pay it forward! The ID number on\n            each kindness card allows us to link one act of kindness to another. The \"trace\" of a particular act of kindness is just the\n            path of acts it lives on, with each act having the same ID number!\n          </Typography>\n          <Typography gutterBottom variant=\"h6\">\n            <b>🙋🏽‍♀️ &nbsp;I want to participate!</b>\n          </Typography>\n          <Typography gutterBottom>\n            Click the ➕ &nbsp;button in the top right of the page to add your own act of kindness and learn more!\n          </Typography>\n          <Typography gutterBottom variant=\"h6\">\n            <b>⚠️ &nbsp;Where did you get the fake data from?</b>\n          </Typography>\n          <Typography gutterBottom>\n            We just wrote a quick script to generate fake acts of kindness all over the United States, most of which are in Massachusetts.\n            This data is just a placeholder while the app rolls out and more acts happen in the real world.\n          </Typography>\n          <Typography gutterBottom variant=\"h6\">\n            <b>❓ &nbsp;How can I learn more?</b>\n          </Typography>\n          <Typography gutterBottom>\n            Check out our project page <Link to='/about'>here</Link> for more information!\n          </Typography>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n\nconst AddDialog = ({ open, setOpen }) => {\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  return (\n    <div>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          Add a new act of kindness!\n        </DialogTitle>\n        <DialogContent dividers>\n          <Typography gutterBottom>\n            You may be wondering - how can <i>I</i> add an act of kindness to the tracker!\n          </Typography>\n          <Typography gutterBottom>\n            We have reserved the ID number <b>123</b> for any act of kindness that you want to do!\n          </Typography>\n          <Typography gutterBottom>\n            If you want to get involved in the tracker, here are the steps:\n            <ol>\n              <li>😊 &nbsp; Do something kind for someone else!</li>\n              <li>✏️ &nbsp; Fill out our Google form <a href=\"http://bit.ly/your-kindness\" target=\"_blank\"><b>here</b></a> 🔗  &nbsp; to tell us what happened!</li>\n              <li>🗣️ &nbsp; Encourage that person (or anyone else) to check out Kindness Tracker and maybe pay it forward!</li>\n            </ol>\n          </Typography>\n          <Typography gutterBottom>\n            Remember, you should use ID number <b>123</b>, and tell your friends to do the same.\n          </Typography>\n          <Typography gutterBottom>\n            Here is an easy to remember link to our Google form (we already filled in 123 for you here):\n          </Typography>\n          <Typography gutterBottom>\n            <a href=\"http://bit.ly/your-kindness\" target=\"_blank\"><code>bit.ly/your-kindness</code></a>\n          </Typography>\n          <hr />\n          <Typography gutterBottom>\n            If you want an actual kindness card, or have any further questions, feel free to reach out to the developers at:\n          </Typography>\n          <Typography gutterBottom>\n            <code><a href=\"mailto:kindness-tracker@mit.edu\">kindness-tracker@mit.edu</a></code>\n          </Typography>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n\nexport {\n  HelpDialog,\n  AddDialog,\n}\n","import { Button } from '@material-ui/core'\nimport * as DataConstants from '../../utils/dataConstants'\nimport * as DataUtils from '../../utils/dataUtils'\nimport KindnessCard from '../sidebar/kindnessCard'\nimport _ from 'lodash'\nimport * as d3 from 'd3'\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport { useEffect } from 'react'\nimport { DateTime } from 'luxon'\n\nconst StatisticsSidebar = ({ data, setSelectedNode, traceId }) => {\n  if (!data) {\n    return null\n  }\n\n  const numPoints = data.length\n  const ids = new Set(data.map(d => d[DataConstants.ID_KEY_NAME]))\n  const numIds = ids.size\n\n  // want to get average path length\n  // TODO move this code somewhere else to a more common utility location\n  const pathLengths = Array.from(ids)\n    .filter(id => id !== DataConstants.ROOT_ACT_ID)\n    .reduce((map, id) => {\n      map[id] = DataUtils.pathLengthMiles(\n        DataUtils.filterTraceListForId(data, id)\n      )\n      return map\n    }, {})\n\n  const maxPathLength = Math.max(...Object.values(pathLengths))\n  const maxPathId = _.maxBy(_.keys(pathLengths), o => pathLengths[o])\n  const averagePathLength = Object.values(pathLengths).reduce((a, b) => a + b, 0) / Object.values(pathLengths).length\n\n  const dataSorted = DataUtils.sortByDate(data)\n  const mostRecentNode = dataSorted[dataSorted.length - 1]\n\n  useEffect(() => {\n    // clear old svg first\n    d3.selectAll('.chart-svg')\n      .remove()\n\n    // compute data necessary for line chart\n    // need a count of acts per day that is cumulative\n    const dates = dataSorted.map(d => d.dateTime)\n    const firstDate = dates[0]\n    const lastDate = DateTime.now()\n    const diff = lastDate.diff(firstDate, ['days'])\n    const diffDays = Math.ceil(diff.days)\n\n    // for each day in the difference, add that to firstDate, then count\n    const countPerDay = _.range(diffDays).map(diff => {\n      const date = firstDate.plus({ days: diff })\n      const filt = dates.filter(dt => dt.startOf(\"day\") <= date.startOf(\"day\"))\n      const count = filt.length\n      return {\n        days: diff + 1,\n        count,\n      }\n    })\n\n    var margin = { top: 30, right: 30, bottom: 50, left: 30 },\n      width = 460 - margin.left - margin.right,\n      height = 300 - margin.top - margin.bottom\n\n    // append the svg object to the body of the page\n    var svg = d3.select(\".chart-outer\")\n      .append('svg')\n      .attr('class', 'chart-svg')\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\")\n\n    var x = d3.scaleLinear()\n    .domain([0, d3.max(countPerDay, d => d.days) + 1])\n      .range([0, width])\n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(d3.axisBottom(x))\n    \n    svg.append('text')\n      .attr('class', 'axis-label')\n      .text(`Days since first act of kindness (${firstDate.toLocaleString(DateTime.DATE_SHORT)})`)\n      .attr('x', margin.left + (width - margin.left - margin.right) / 2)\n      .attr('text-anchor', 'middle')\n      .attr('fill', 'white')\n      .attr('y', height + 35)\n\n    svg.append('text')\n      .attr('class', 'axis-label')\n      .text('# of cumulative acts of kindness over time')\n      .attr('text-anchor', 'middle')\n      .attr('fill', 'white')\n      .attr('font-size', '20px')\n      .attr('x', margin.left + (width - margin.left - margin.right) / 2)\n      .attr('y', -10)\n\n    var y = d3.scaleLinear()\n      .domain([0, d3.max(countPerDay, function (d) { return d.count })])\n      .range([height, 0])\n    svg.append(\"g\")\n      .call(d3.axisLeft(y))\n\n    svg.append(\"path\")\n      .datum(countPerDay)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"green\")\n      .attr(\"stroke-width\", 3.5)\n      .attr(\"d\", d3.line()\n        .x(function (d) { return x(d.days) })\n        .y(function (d) { return y(d.count) }))\n\n  }, [data])\n\n  return (\n    <div className=\"summary-stats-inner\">\n      <div className=\"summary-stats-flex\">\n        <div className=\"summary-stats-row\">\n          <div className=\"sidebar-clear-div summary-statistics-card summary-stats-item-half\">\n            <h1>{numPoints}</h1>\n            <div className=\"summary-statistics-info-text\">\n              <p>total acts</p>\n              <Tooltip title={<h2>Total number of acts of kindness in this dataset.</h2>} arrow>\n                <ErrorOutlineIcon fontSize=\"small\" />\n              </Tooltip>\n            </div>\n          </div>\n          <div className=\"sidebar-clear-div summary-statistics-card summary-stats-item-half\">\n            <h1>{numIds}</h1>\n            <div className=\"summary-statistics-info-text\">\n              <p>unique paths (card IDs)</p>\n              <Tooltip title={<h2>Total number of unique card IDs that are in distribution. Each card ID creates a \"path\" where you can pay kindness forward.</h2>} arrow>\n                <ErrorOutlineIcon fontSize=\"small\" />\n              </Tooltip>\n            </div>\n          </div>\n        </div>\n        <div className=\"summary-stats-row\">\n          <div className=\"sidebar-clear-div summary-statistics-card summary-stats-item-half\">\n            <h1>{maxPathLength.toFixed(1)} miles</h1>\n            <div className=\"summary-statistics-info-text\">\n              <p>longest path length</p>\n              <Tooltip title={<h2>Longest path length that a single act of kindness has travelled. Computed as the sum of distances between adjacent points along a path.</h2>} arrow>\n                <ErrorOutlineIcon fontSize=\"small\" />\n              </Tooltip>\n            </div>\n            <Button\n              onClick={() => traceId(+maxPathId)}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              View\n            </Button>\n          </div>\n          <div className=\"sidebar-clear-div summary-statistics-card summary-stats-item-half\">\n            <h1>{averagePathLength.toFixed(1)} miles</h1>\n            <p>average path length</p>\n          </div>\n        </div>\n        <div className=\"summary-stats-row\">\n          <div className=\"summary-stats-item-big\">\n            <div className=\"summary-stats-kindness-card\">\n              <KindnessCard node={mostRecentNode} shortMode />\n            </div>\n          </div>\n          <div className=\"summary-stats-item-small\">\n            <Button\n              onClick={() => setSelectedNode(mostRecentNode)}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              View\n            </Button>\n          </div>\n        </div>\n        <div className=\"chart-outer\">\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default StatisticsSidebar\n","export default __webpack_public_path__ + \"static/media/summary_image.d5105e94.png\";","export default __webpack_public_path__ + \"static/media/yoda_transparent.e7a97780.png\";","import { Button } from '@material-ui/core'\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward'\nimport summaryImage from './summary_image.png'\nimport yodaImage from './yoda_transparent.png'\nimport { Link } from 'react-router-dom'\n\nimport './styles/About.css'\n\nconst AboutPage = () => {\n  return (\n    <div className=\"App app-about\">\n      <div>\n        <div className=\"about-big-text\">\n          <h1>😊 Kindness Tracker</h1>\n        </div>\n        <Link to='/'>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className=\"about-launch-button\"\n          >\n            Launch App &nbsp; <ArrowForwardIcon />\n          </Button>\n        </Link>\n        <div className=\"about-header-text\">\n          <p>Christian Moroney (<code>cmoroney</code>)</p>\n          <p>Jackson Bernatchez (<code>jrnerbat</code>)</p>\n          <p>Kevin Lyons (<code>kalyons</code>)</p>\n          <p><code><a href=\"mailto:kindness-tracker@mit.edu\">kindness-tracker@mit.edu</a></code></p>\n          <p><b>6.859 Final Project Spring 2021</b></p>\n          <img src={summaryImage} className=\"about-summary-image\" />\n        </div>\n\n        <div className=\"about-content-left\">\n          <h2>Abstract</h2>\n          <p>TODO Abstract goes here</p>\n          <h2>Paper</h2>\n          <p>Click <Link to='/paper'><b>here</b></Link> to access our paper on this work.</p>\n          <h2>Source Code</h2>\n          <div className=\"about-horizontal-stack\">\n            <p>View the source code for our application on GitHub <a href=\"https://github.com/6859-sp21/final-project-kindness-tracker\" target=\"_blank\"><b>here</b></a>.</p>\n            <div>\n              <a href=\"https://github.com/6859-sp21/final-project-kindness-tracker\" target=\"_blank\">\n                <img className=\"sidebar-git-image about-git-image\" src=\"https://image.flaticon.com/icons/png/512/25/25231.png\"></img>\n              </a>\n            </div>\n          </div>\n          <h2>Trailer Video</h2>\n          <p>TODO insert video here.</p>\n          <h2>Google Form for Submissions</h2>\n          <p>You can submit acts of kindness using our Google form here, using ID number <b>123</b>:</p>\n          <p><a href=\"http://bit.ly/your-kindness\" target=\"_blank\"><code>bit.ly/your-kindness</code></a></p>\n          <h2>Original Demo Video</h2>\n          <div className=\"about-video-wrapper\">\n            <video width=\"100%\" controls=\"controls\">\n              <source src=\"https://www.dropbox.com/s/5whse10x4ziqafc/6859%20-%20Kindness%20Tracker.mp4?raw=1\" type=\"video/mp4\" />\n            </video>\n          </div>\n\n\n          <img src={yodaImage} className=\"yoda-image\" />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default AboutPage\n","import React, { useEffect, useState } from 'react'\nimport {\n  HashRouter,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\nimport Tabletop from 'tabletop'\nimport { Sidebar, KindnessSearchBar, MapboxGLMap, HelpDialog, AddDialog, StatisticsSidebar } from './components'\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp'\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker'\nimport TrieSearch from 'trie-search'\nimport * as DataConstants from './utils/dataConstants'\nimport * as DataUtils from './utils/dataUtils'\nimport * as AppMode from './utils/appMode'\nimport { Button, Fab } from '@material-ui/core'\nimport InfoIcon from '@material-ui/icons/Info'\nimport AddIcon from '@material-ui/icons/Add'\nimport * as d3 from 'd3'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp'\nimport CloseIcon from '@material-ui/icons/Close'\nimport ClearIcon from '@material-ui/icons/Clear'\nimport AboutPage from './aboutPage'\n\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiY21vcm9uZXkiLCJhIjoiY2tudGNscDJjMDFldDJ3b3pjMTh6ejJyayJ9.YAPmFkdy_Eh9K20cFlIvaQ'\nmapboxgl.workerClass = MapboxWorker\nmapboxgl.accessToken = MAPBOX_ACCESS_TOKEN\n\nimport './styles/App.css'\n\nconst MainPage = () => {\n  const [data, setData] = useState(null)\n  const [trace, setTrace] = useState(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const [selectedNode, setSelectedNode] = useState(null)\n  const [hoveredNode, setHoveredNode] = useState(null)\n  const [dataUrl, setDataUrl] = useState(DataConstants.REAL_DATA_URL)\n  const [trie, setTrie] = useState(null)\n  const [filterText, setFilterText] = useState(null)\n  const [mode, setMode] = useState(AppMode.DEFAULT)\n  const [openDialog, setOpenDialog] = useState(false)\n  const [openAddDialog, setOpenAddDialog] = useState(false)\n  const [openSummaryStats, setOpenSummaryStats] = useState(false)\n\n  // listen for summary stat changes\n  useEffect(() => {\n    if (openSummaryStats) {\n      d3.select('.right-sidebar')\n        .style('left', '65%')\n    } else {\n      d3.select('.right-sidebar')\n        .style('left', '100%')\n    }\n  }, [openSummaryStats])\n\n  // close summary stat view if mode ever is not default\n  useEffect(() => {\n    setOpenSummaryStats(false)\n  }, [mode])\n\n  const escKeyHandler = (event) => {\n    if (event.keyCode === 27) {\n      // close the summary stats view\n      setOpenSummaryStats(false)\n    }\n  }\n\n  useEffect(() => {\n    // on first render, check the width\n    // if less than 800, provide alert about screen size\n    if (window.innerWidth < 800) {\n      alert('We see you\\'re on mobile! Rotate your phone sideways for the best experience. Check out our app on your computer too!')\n    }\n\n    // also add handler for esc key\n    document.addEventListener('keydown', escKeyHandler, false)\n  }, [])\n\n  const fetchData = () => {\n    Tabletop.init({\n      key: dataUrl,\n      simpleSheet: true,\n    })\n      .then(data => {\n        // process data right away\n        const dataProc = DataUtils.processRawSheetsData(data)\n        setData(dataProc)\n        setTrace(dataProc)\n\n        // set up our search object\n        const ts = new TrieSearch([\n          DataConstants.ID_KEY_NAME,\n          DataConstants.KINDNESS_KEY_NAME,\n          DataConstants.STREET_KEY_NAME,\n          DataConstants.CITY_KEY_NAME,\n          DataConstants.STATE_KEY_NAME,\n          DataConstants.ZIP_KEY_NAME,\n        ], {\n          idFieldOrFunction: 'index',\n        })\n        ts.addAll(dataProc)\n        setTrie(ts)\n      })\n      .catch(console.warn)\n  }\n\n  useEffect(() => {\n    if (data === null) {\n      fetchData()\n    }\n  }, [data])\n\n  // listen for changes in the data url via a toggle\n  useEffect(() => {\n    if (data !== null) {\n      // reset all required state before re-fetch\n      setIsLoading(true)\n      setSelectedNode(null)\n      setFilterText(null)\n      setHoveredNode(null)\n      setMode(AppMode.DEFAULT)\n      setOpenSummaryStats(false)\n      fetchData()\n    }\n  }, [dataUrl])\n\n  // define function to set trace back to original data array\n  const resetTrace = () => setTrace(data)\n\n  // function to clear selected node\n  const clearSelectedNode = () => {\n    setSelectedNode(null)\n    setMode(AppMode.DEFAULT)\n    setFilterText(null)\n  }\n\n  // define function to filter nodes based on a query string\n  const filterNodes = (text) => {\n    // update state\n    setIsLoading(true)\n\n    // handle no filter\n    if (!text) {\n      // reset to all data\n      setTrace(data)\n      setIsLoading(false)\n      setMode(AppMode.DEFAULT)\n      return\n    }\n\n    // TrieSearch.UNION_REDUCER gives us an AND over the text\n    const dataFiltSearch = trie.get(text.split(' '), TrieSearch.UNION_REDUCER)\n\n    // handle empty data case\n    if (dataFiltSearch.length === 0) {\n      // TODO clean this up\n      alert('No results found! Try another search query.')\n      setIsLoading(false)\n      setMode(AppMode.DEFAULT)\n      return\n    }\n\n    setSelectedNode(null)\n    setHoveredNode(null)\n    setMode(AppMode.SEARCHING)\n    setTrace(dataFiltSearch)\n  }\n\n  const handleSetSelectedNode = (node) => {\n    // if we are in a trace-like mode, don't change mode\n    if (mode === AppMode.TRACING || mode === AppMode.TRACE_STATS) {\n      // do nothing\n    } else {\n      // change to selection mode\n      setMode(AppMode.SELECTED)\n\n      // reset the trace\n      resetTrace()\n    }\n\n    // update the selected node as normal\n    setSelectedNode(node)\n  }\n\n  const handleSetFilterText = (text) => {\n    // get out of search mode and go back to default\n    setMode(AppMode.DEFAULT)\n\n    // still update our filter text so we have it\n    setFilterText(text)\n  }\n\n  const setTraceForId = (id) => {\n    const traceNew = DataUtils.filterTraceListForId(data, id)\n\n    setTrace(traceNew)\n    setMode(AppMode.TRACE_STATS)\n    setSelectedNode(traceNew[traceNew.length - 1])\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"horizontal-stack\">\n        <div className=\"left-sidebar\">\n          <Sidebar\n            isLoading={isLoading}\n            selectedNode={selectedNode}\n            setSelectedNode={setSelectedNode}\n            clearSelectedNode={clearSelectedNode}\n            mode={mode}\n            setMode={setMode}\n            trace={trace}\n            dataUrl={dataUrl}\n            setDataUrl={setDataUrl}\n            filterText={filterText}\n          />\n        </div>\n        <div className=\"vertical-stack\">\n          <div className=\"top-bar-wrapper\">\n            <div className=\"search-bar-wrapper\">\n              {\n                mode === AppMode.DEFAULT || mode === AppMode.SEARCHING ? (\n                  <KindnessSearchBar\n                    filterText={filterText}\n                    setFilterText={handleSetFilterText}\n                    filterNodes={filterNodes}\n                  />\n                ) : null\n              }\n            </div>\n            <div className=\"icon-wrapper\">\n              {\n                mode === AppMode.DEFAULT ? (\n                  <Tooltip title={<h2>View Summary Statistics</h2>} arrow>\n                    <Fab\n                      size=\"small\"\n                      color=\"primary\"\n                      aria-label=\"view\"\n                      onClick={() => setOpenSummaryStats(true)}\n                      className=\"icon-wrapper-button\"\n                    >\n                      <TrendingUpIcon />\n                    </Fab>\n                  </Tooltip>\n                ) : (\n                  <Tooltip title={<h2>Reset to Default View</h2>} arrow>\n                    <Fab\n                      size=\"small\"\n                      color=\"secondary\"\n                      aria-label=\"reset\"\n                      onClick={clearSelectedNode}\n                      className=\"icon-wrapper-button\"\n                    >\n                      <ClearIcon />\n                    </Fab>\n                  </Tooltip>\n                )\n              }\n\n              <Tooltip title={<h2>Add New</h2>} arrow>\n                <Fab\n                  size=\"small\"\n                  color=\"primary\"\n                  aria-label=\"add\"\n                  onClick={() => setOpenAddDialog(true)}\n                  className=\"icon-wrapper-button\"\n                >\n                  <AddIcon />\n                </Fab>\n              </Tooltip>\n              <Tooltip title={<h2>Learn More</h2>} arrow>\n                <Fab\n                  size=\"small\"\n                  color=\"primary\"\n                  aria-label=\"info\"\n                  onClick={() => setOpenDialog(true)}\n                  className=\"icon-wrapper-button\"\n                >\n                  <InfoIcon />\n                </Fab>\n              </Tooltip>\n            </div>\n          </div>\n          <div className=\"map-wrapper\">\n            <MapboxGLMap\n              trace={trace}\n              setIsLoading={setIsLoading}\n              selectedNode={selectedNode}\n              setSelectedNode={handleSetSelectedNode}\n              hoveredNode={hoveredNode}\n              setHoveredNode={setHoveredNode}\n              mode={mode}\n              setTrace={setTrace}\n              resetTrace={resetTrace}\n            />\n          </div>\n        </div>\n        {\n          openSummaryStats ? (\n            <div className=\"right-sidebar-button-exit\">\n              <Tooltip title={<h2>Close (Or Press Esc)</h2>} arrow>\n                <Fab\n                  size=\"small\"\n                  color=\"secondary\"\n                  aria-label=\"close\"\n                  onClick={() => setOpenSummaryStats(false)}\n                  className=\"icon-wrapper-button\"\n                >\n                  <CloseIcon />\n                </Fab>\n              </Tooltip>\n            </div>\n          ) : null\n        }\n        <div className=\"right-sidebar\">\n          <StatisticsSidebar\n            data={data}\n            setSelectedNode={handleSetSelectedNode}\n            traceId={setTraceForId}\n          />\n        </div>\n      </div>\n      <HelpDialog open={openDialog} setOpen={setOpenDialog} />\n      <AddDialog open={openAddDialog} setOpen={setOpenAddDialog} />\n    </div>\n  )\n}\n\nconst App = () => {\n  console.log(process.env.PUBLIC_URL)\n  return (\n    <HashRouter basename={'/'}>\n      <Switch>\n        <Route exact path=\"/about\">\n          <AboutPage />\n        </Route>\n        <Route exact path='/paper'\n          render={\n            () => {\n              window.location.href = `${process.env.PUBLIC_URL}/kindness_tracker.pdf`;\n              return null;\n            }\n          }>\n        </Route>\n        <Route exact path=\"/\">\n          <MainPage />\n        </Route>\n        {/* <Route>\n          <Redirect to=\"/\" />\n        </Route> */}\n      </Switch>\n    </HashRouter>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}