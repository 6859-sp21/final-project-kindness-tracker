{"version":3,"sources":["components/mapboxGLMap/mapUtils.js","utils/dataConstants.js","components/tooltip/index.js","utils/stringUtils.js","utils/dataUtils.js","components/mapboxGLMap/index.js","components/sidebar/kindessCard.js","components/sidebar/loadingSpinner.js","components/sidebar/infoCard.js","components/sidebar/traceStepper.js","components/sidebar/index.js","App.js","reportWebVitals.js","index.js"],"names":["zoomMapToBoundingObject","map","boundingObject","topRight","bottomLeft","fitBounds","lng","lat","showTooltip","e","d","d3","transition","duration","style","pageX","pageY","resetAllCircleColors","ID_KEY_NAME","CITY_KEY_NAME","KINDNESS_KEY_NAME","TooltipContents","node","isSelected","inp","length","city","DataConstants","state","kindness","substring","computeLngLatBoundingBox","lngLatPoints","paddingMiles","paddingDegrees","extractKey","key","maxLng","Math","max","minLng","min","maxLat","styles","width","height","position","mapboxgl","accessToken","workerClass","MapboxWorker","MapboxGLMap","one","two","setIsLoading","data","selectedNode","setSelectedNode","hoveredNode","setHoveredNode","traceNode","traceList","setTraceList","traceIndex","useState","setMap","mapContainer","useRef","dataProc","i","index","DataUtils","uniqueCircleId","circleClass","generateLngLatArray","setAllEventHandlers","on","MapUtils","callback","flyTo","center","zoom","essential","useEffect","myMap","Map","container","current","getCanvasContainer","svg","append","attr","project","LngLat","dots","selectAll","enter","mapRender","x","y","resize","remove","dataFilt","filter","otherCircles","boundingObjectFilt","ref","el","className","KindnessCard","street","zip","LoadingSpinner","SidebarInfoCard","TraceStepper","setTraceIndex","onClick","color","cursor","Sidebar","isLoading","setTraceNode","App","setData","Tabletop","init","simpleSheet","then","catch","console","warn","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca1ce870.chunk.js","sourcesContent":["import * as d3 from 'd3'\nimport mapboxgl from \"mapbox-gl\"\n\nconst initializeMap = ({ setMap, mapContainer, boundingObject }) => {\n    const myMap = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/light-v10',\n    })\n\n    // immediately center based on the bounding box of our data points\n    zoomMapToBoundingObject(myMap, boundingObject)\n\n    myMap.on(\"load\", () => {\n        setMap(myMap)\n    })\n}\n\nconst zoomMapToBoundingObject = (map, boundingObject) => {\n    const { topRight, bottomLeft } = boundingObject\n    map.fitBounds([\n        [bottomLeft.lng, bottomLeft.lat],\n        [topRight.lng, topRight.lat]\n    ]);\n}\n\nconst showTooltip = (e, d) => {\n    const tooltip = d3.select('.map-tooltip')\n    tooltip\n        .transition()\n        .duration(0)\n        .style('opacity', 0.8)\n        .style('left', `${e.pageX + 50}px`)\n        .style('top', `${e.pageY - 50}px`)\n}\n\nconst hideTooltip = (callback) => {\n    const tooltip = d3.select('.map-tooltip')\n    tooltip\n        .transition().duration(500)\n        .style(\"opacity\", 0)\n        .on('end', callback)\n}\n\nconst resetAllCircleColors = () => {\n    return d3.selectAll('.circle')\n        .transition()\n        .duration(500)\n        .style('fill', 'steelblue')\n}\n\nconst clearAllEventHandlers = (selection) => {\n    selection\n        .on('mouseover', null)\n        .on('mousemove', null)\n        .on('mouseout', null)\n        .on('click', null)\n}\n\nexport {\n    initializeMap,\n    zoomMapToBoundingObject,\n    showTooltip,\n    hideTooltip,\n    resetAllCircleColors,\n    clearAllEventHandlers,\n}\n","const ID_KEY_NAME = 'ID NUMBER on kindness card'\nconst CITY_KEY_NAME = 'CITY where act of kindness took place'\nconst STATE_KEY_NAME = 'STATE'\nconst ZIP_KEY_NAME = '[OPTIONAL] ZIP CODE'\nconst STREET_KEY_NAME = '[Optional] STREET NAME'\nconst KINDNESS_KEY_NAME = '[Optional] Tell us about the act of kindness you received!'\nconst CENTER_LNG_KEY_NAME = 'CenterLon'\nconst CENTER_LAT_KEY_NAME = 'CenterLat'\n\nconst TEST_DATA_URL = 'https://docs.google.com/spreadsheets/d/1IqEBIcnFZ_BFCrD8jhk11yVoOjfxzZpiZLdL4cL3oK0/pubhtml'\nconst SPOOF_DATA_URL = 'https://docs.google.com/spreadsheets/d/1BvBwyy1xYYhdiokMfbyxssu5nlB0arRMvxyuQLCzsH4/pubhtml'\n\n// TOOD add constants for new parsed geo fields when those are avaiable\n// Spoof Data Names\n// const ID_KEY_NAME = 'id'\n// const STREET_KEY_NAME = 'street'\n// const STATE_KEY_NAME = 'admin_level_1'\n// const CITY_KEY_NAME = 'city'\n// const ZIP_KEY_NAME = 'zip_code'\n// const KINDNESS_KEY_NAME = 'description'\n// const CENTER_LNG_KEY_NAME = 'center_lon'\n// const CENTER_LAT_KEY_NAME = 'center_lat'\n\nexport {\n    ID_KEY_NAME,\n    CITY_KEY_NAME,\n    STATE_KEY_NAME,\n    ZIP_KEY_NAME,\n    STREET_KEY_NAME,\n    KINDNESS_KEY_NAME,\n    CENTER_LNG_KEY_NAME,\n    CENTER_LAT_KEY_NAME,\n\n    TEST_DATA_URL,\n    SPOOF_DATA_URL,\n}\n","import * as DataConstants from '../../utils/dataConstants'\nimport * as StringUtils from '../../utils/stringUtils'\n\nconst TooltipContents = ({ node, isSelected }) => {\n    // handle null node case\n    if (! node) {\n        return null;\n    }\n\n    const city = node[DataConstants.CITY_KEY_NAME]\n    const state = node[DataConstants.STATE_KEY_NAME]\n    const kindness = node[DataConstants.KINDNESS_KEY_NAME]\n\n    return (\n        <div>\n            <p><b>{city ? `${city}, ` : null}{state}</b></p>\n            <p><b>{StringUtils.trimWithElipses(kindness, 140)}</b></p>\n            <p>{! isSelected ? 'Click for more info!' : null}</p>\n        </div>\n    )\n}\n\nexport default TooltipContents\n","const trimWithElipses = (inp, length) => {\n    if (inp.length > length) {\n        return `${inp.substring(0, length)}`\n    }\n    \n    return inp\n}\n\nexport {\n    trimWithElipses\n}","const DEGREES_TO_MILES = 69\nconst LNG_KEY = 'lng'\nconst LAT_KEY = 'lat'\n\nconst processRawSheetsData = (data) => {\n    const dataProc = data ? data.map((d, i) => ({\n        ...d,\n        index: i\n    })) : null\n    return dataProc\n}\n\nconst nodesAreEqual = (one, two) => {\n    if (! one || ! two)\n        return false\n        \n    return one.index == two.index\n}\n\nconst computeLngLatBoundingBox = (lngLatPoints, paddingMiles) => {\n    // compute top right and bottom left\n    // then, add some padding amount in miles\n    const paddingDegrees = paddingMiles / DEGREES_TO_MILES\n\n    const extractKey = key => lngLatPoints.map((d => d[key]))\n\n    const maxLng = Math.max(...extractKey(LNG_KEY))\n    const minLng = Math.min(...extractKey(LNG_KEY))\n    const maxLat = Math.max(...extractKey(LAT_KEY))\n    const minLat = Math.min(...extractKey(LAT_KEY))\n\n    return {\n        topRight: {\n            lng: maxLng + paddingDegrees,\n            lat: minLat + paddingDegrees,\n        },\n        bottomLeft: {\n            lng: minLng - paddingDegrees * 6,\n            lat: maxLat - paddingDegrees,\n        }\n    }\n}\n\nexport {\n    processRawSheetsData,\n    nodesAreEqual,\n    computeLngLatBoundingBox,\n}\n","import React, { useEffect, useRef, useState } from \"react\"\nimport mapboxgl from \"mapbox-gl\"\n// import \"mapbox-gl/dist/mapbox-gl.css\"\nimport * as d3 from 'd3'\nimport * as MapUtils from './mapUtils'\nimport * as DataConstants from '../../utils/dataConstants'\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';\nimport TooltipContents from '../tooltip'\nimport * as DataUtils from '../../utils/dataUtils'\n\nimport '../../styles/Map.css'\n\nconst styles = {\n    width: \"100vw\",\n    height: \"100vh\",\n    position: \"absolute\"\n}\n\nconst POINT_ZOOM = 12\nconst DEFAULT_RADIUS = 10\nconst BIG_RADIUS = 30\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiY21vcm9uZXkiLCJhIjoiY2tudGNscDJjMDFldDJ3b3pjMTh6ejJyayJ9.YAPmFkdy_Eh9K20cFlIvaQ'\nmapboxgl.workerClass = MapboxWorker;\n\nconst MapboxGLMap = ({ setIsLoading, data, selectedNode, setSelectedNode, hoveredNode, setHoveredNode, traceNode, traceList, setTraceList, traceIndex }) => {\n    const [map, setMap] = useState(null)\n    const mapContainer = useRef(null)\n\n    const dataProc = DataUtils.processRawSheetsData(data)\n\n    // write function to generate ID of circle\n    const uniqueCircleId = d => `circle-${d.index}`\n\n    // write function to generate class of circle based off id key\n    const circleClass = d => `circle circle-${d[DataConstants.ID_KEY_NAME]}`\n\n    // write function to quickly convert a data array to the fomat for lat lng\n    const generateLngLatArray = data => data.map(d => ({\n        lng: d[DataConstants.CENTER_LNG_KEY_NAME],\n        lat: d[DataConstants.CENTER_LAT_KEY_NAME],\n    }))\n\n    // get the bounds of our data\n    const boundingObject = dataProc ? DataUtils.computeLngLatBoundingBox(\n        generateLngLatArray(dataProc), 200\n    ) : null\n\n    const setAllEventHandlers = () => {\n        d3.selectAll(\".circle\")\n            .on('mouseover', (e, d) => {\n                setHoveredNode(d)\n                MapUtils.showTooltip(e, d)\n            })\n            .on('mousemove', (e, d) => {\n                MapUtils.showTooltip(e, d)\n            })\n            .on('mouseout', (e, d) => {\n                MapUtils.hideTooltip(() => setHoveredNode(null))\n            })\n            .on('click', (e, d) => {\n                MapUtils.resetAllCircleColors()\n    \n                // make this circle red\n                const circle = d3.select(`#${uniqueCircleId(d)}`)\n                circle\n                    .transition()\n                    .duration(500)\n                    .style('fill', 'red')\n    \n                map.flyTo({\n                    center: [\n                        d[DataConstants.CENTER_LNG_KEY_NAME],\n                        d[DataConstants.CENTER_LAT_KEY_NAME],\n                    ],\n                    zoom: POINT_ZOOM, // TODO cofigure this zoom amount\n                    essential: true // this animation is considered essential with respect to prefers-reduced-motion\n                });\n    \n                // set the selected node and callback the parent\n                // TODO potentially clear any tracing if this node is not in the current trace\n                // have to tighten up logic around this...\n                setSelectedNode(d)\n            })\n    }\n\n    useEffect(() => {\n        if (!map && dataProc) {\n            MapUtils.initializeMap({ setMap, mapContainer, boundingObject })\n        }\n    }, [map, dataProc])\n\n    useEffect(() => {\n        if (map && data !== null) {\n            var container = map.getCanvasContainer()\n            var svg = d3\n                .select(container)\n                .append(\"svg\")\n                .attr(\"width\", \"100%\")\n                .attr(\"height\", \"100%\")\n                .style(\"position\", \"absolute\")\n                .style(\"z-index\", 2)\n                .style('top', 0)\n                .style('left', 0)\n\n            // write projection function\n            const project = (d) => {\n                return map.project(\n                    new mapboxgl.LngLat(d[DataConstants.CENTER_LNG_KEY_NAME], d[DataConstants.CENTER_LAT_KEY_NAME])\n                )\n            }\n\n            var dots = svg\n                .selectAll(\"circle\")\n                .data(dataProc)\n                .enter()\n                .append('circle')\n                .attr('id', uniqueCircleId)\n                .attr('class', circleClass)\n                .attr(\"r\", DEFAULT_RADIUS)\n                .style(\"fill\", \"steelblue\")\n            \n            // add event handlers\n            setAllEventHandlers()\n\n            // define render function for mapbox\n            const mapRender = () => {\n                // project dots\n                dots\n                    .attr('cx', d => project(d).x)\n                    .attr('cy', d => project(d).y)\n            }\n\n            map.on('viewreset', mapRender)\n            map.on('move', mapRender)\n            map.on('moveend', mapRender)\n\n            map.on('load', () => {\n                map.resize()\n            })\n\n            mapRender()\n\n            // notify that we are done loading\n            setIsLoading(false)\n\n            return () => map.remove()\n        }\n    }, [map, data])\n\n    useEffect(() => {\n        // re-fly to center on selectedNode update, as long as we are not tracing\n        if (map && data && !selectedNode) {\n            MapUtils.zoomMapToBoundingObject(map, boundingObject)\n            MapUtils.resetAllCircleColors()\n                .attr(\"r\", DEFAULT_RADIUS)\n                .style('opacity', 1)\n            setAllEventHandlers()\n        }\n    }, [map, data, selectedNode])\n\n    useEffect(() => {\n        if (traceNode) {\n            const dataFilt = dataProc.filter(d => d[DataConstants.ID_KEY_NAME] == traceNode[DataConstants.ID_KEY_NAME])\n\n            // Remove all circles that aren't in the given class name, and also disable their events\n            const otherCircles = d3.selectAll('.circle')\n                .filter(d => d[DataConstants.ID_KEY_NAME] !== traceNode[DataConstants.ID_KEY_NAME])\n                \n            otherCircles.transition()\n                .duration(500)\n                .style('opacity', '0')\n            \n            MapUtils.clearAllEventHandlers(otherCircles)\n            \n            d3.selectAll('.circle')\n                .filter(d => d[DataConstants.ID_KEY_NAME] === traceNode[DataConstants.ID_KEY_NAME])\n                .transition()\n                .duration(500)\n                .style('fill', 'purple')\n            \n            // re-compute bounding box\n            // TODO write logic for ratio-based padding\n            const boundingObjectFilt = DataUtils.computeLngLatBoundingBox(\n                generateLngLatArray(dataFilt),\n                100\n            )\n            MapUtils.zoomMapToBoundingObject(map, boundingObjectFilt)\n\n            // set the trace list\n            setTraceList(dataFilt)\n        }\n    }, [traceNode])\n\n    useEffect(() => {\n        if (map && traceList && traceIndex > -1) {\n            // // get the node at the index and fly there!\n            // const currentNode = traceList[traceIndex]\n            // map.flyTo({\n            //     center: [\n            //         currentNode[DataConstants.CENTER_LNG_KEY_NAME],\n            //         currentNode[DataConstants.CENTER_LAT_KEY_NAME],\n            //     ],\n            //     zoom: POINT_ZOOM,\n            //     essential: true,\n            // })\n\n            // also make that node bigger and green\n            d3.selectAll('.circle')\n                .filter(d => d[DataConstants.ID_KEY_NAME] == traceNode[DataConstants.ID_KEY_NAME])\n                .transition()\n                .duration(500)\n                .style('fill', 'purple')\n                .attr('r', DEFAULT_RADIUS)\n\n            d3.select(`#${uniqueCircleId(traceList[traceIndex])}`)\n                .transition()\n                .duration(500)\n                .style('fill', 'green')\n                .attr('r', BIG_RADIUS)\n        }\n    }, [traceIndex])\n\n    return <div ref={el => (mapContainer.current = el)} style={styles}>\n        <div className=\"map-tooltip\" style={{ \"opacity\": 0 }}>\n            <TooltipContents node={hoveredNode} isSelected={DataUtils.nodesAreEqual(hoveredNode, selectedNode)} />\n        </div>\n    </div>\n}\n\nexport default MapboxGLMap\n","import { useEffect } from 'react';\nimport * as DataConstants from '../../utils/dataConstants'\n\nconst KindnessCard = ({ node }) => {\n    // handle null node case\n    if (! node) {\n        return null;\n    }\n\n    const street = node[DataConstants.STREET_KEY_NAME]\n    const city = node[DataConstants.CITY_KEY_NAME]\n    const state = node[DataConstants.STATE_KEY_NAME]\n    const zip = node[DataConstants.ZIP_KEY_NAME]\n    const kindness = node[DataConstants.KINDNESS_KEY_NAME]\n\n    return (\n        <div className=\"kindness-card-inner\">\n            <p>Address: <b>{street || 'No street provided.'}</b></p>\n            <p>City: <b>{city || 'No city provided.'}</b></p>\n            <p>State: <b>{state || 'No state provided.'}</b></p>\n            <p>Zip Code: <b>{zip || 'No zip code provided.'}</b></p>\n            <p>Act of Kindness Description:</p>\n            <p><b>{kindness || 'No kindess description provided.'}</b></p>\n        </div>\n    )\n}\n\nexport default KindnessCard","import '../../styles/Loading.css'\n\nconst LoadingSpinner = () => {\n    return (\n        <div className=\"loading-wrapper\">\n            <div className=\"la-ball-clip-rotate la-2x\">\n                <div></div>\n            </div>\n            <p>Loading...</p>\n        </div>\n    )\n}\n\nexport default LoadingSpinner\n","/*\n    Simple component to render some useful info when no node is selected.\n*/\nconst SidebarInfoCard = () => {\n    return (\n        <div>\n            <p>Click a circle to explore that act of kindness further!</p>\n        </div>\n    )\n}\n\nexport default SidebarInfoCard","import * as DataConstants from '../../utils/dataConstants'\n\nconst TraceStepper = ({ traceList, traceIndex, setTraceIndex }) => {\n    return (\n        traceList ? (\n            traceList.map((d, i) => {\n                return (\n                    <p key={i} onClick={() => setTraceIndex(i)} style={{ color: i == traceIndex ? 'blue' : 'white', cursor: 'pointer' }}>\n                        {d[DataConstants.ID_KEY_NAME]}\n                    </p>\n                )\n            })\n        ) : null\n    )\n}\n\nexport default TraceStepper\n","import '../../styles/Sidebar.css'\nimport KindessCard from './kindessCard'\nimport LoadingSpinner from './loadingSpinner'\nimport SidebarInfoCard from './infoCard'\nimport TraceStepper from './traceStepper'\n\nconst Sidebar = ({ isLoading, selectedNode, setSelectedNode, setTraceNode, traceList, setTraceList, traceIndex, setTraceIndex }) => {\n    return (\n        <div className=\"sidebar-flex\">\n            <h1>Kindess Tracker</h1>\n            {\n                isLoading ? <LoadingSpinner /> : null\n            }\n            {\n                ! isLoading && ! selectedNode ? <SidebarInfoCard /> : null\n            }\n            <div className=\"selected-card-wrapper\">\n                <KindessCard node={selectedNode} />\n            </div>\n            {\n                selectedNode ? (\n                    <button onClick={() => {\n                        setSelectedNode(null)\n                        setTraceList([])\n                        setTraceIndex(-1)\n                        setTraceNode(null)\n                    }}>Clear Selected Node</button>\n                ) : null\n            }\n            {\n                (selectedNode && traceList.length === 0) ? (\n                    <button onClick={() => setTraceNode(selectedNode)}>Trace this Act!</button>\n                ) : null\n            }\n            <TraceStepper\n                traceList={traceList}\n                traceIndex={traceIndex}\n                setTraceIndex={setTraceIndex}\n            />\n        </div>\n    )\n}\n\nexport default Sidebar\n","import React, { useEffect, useState } from 'react'\nimport Tabletop from 'tabletop'\nimport { Sidebar, MapboxGLMap } from './components'\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp'\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker'\nimport * as DataConstants from './utils/dataConstants'\n\n\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiY21vcm9uZXkiLCJhIjoiY2tudGNscDJjMDFldDJ3b3pjMTh6ejJyayJ9.YAPmFkdy_Eh9K20cFlIvaQ'\nmapboxgl.workerClass = MapboxWorker\nmapboxgl.accessToken = MAPBOX_ACCESS_TOKEN\n\nconst US_CENTER_LAT = 39.8283\nconst US_CENTER_LNG = -98.5795\nconst INITIAL_ZOOM = 3.75\n\nimport './styles/App.css'\n\nconst App = () => {\n  const [data, setData] = useState(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const [selectedNode, setSelectedNode] = useState(null)\n  const [hoveredNode, setHoveredNode] = useState(null)\n  const [traceNode, setTraceNode] = useState(null)\n  const [traceList, setTraceList] = useState([])\n  const [traceIndex, setTraceIndex] = useState(-1)\n\n  useEffect(() => {\n    if (data === null) {\n      Tabletop.init({\n        key: DataConstants.SPOOF_DATA_URL,\n        simpleSheet: true,\n      })\n        .then(data => {\n          setData(data)\n        })\n        .catch(console.warn)\n    }\n  }, [data])\n\n  return (\n    <div className=\"App\">\n      <div className=\"horizontal-stack\">\n        <div className=\"left-sidebar\">\n          <Sidebar\n            isLoading={isLoading}\n            selectedNode={selectedNode}\n            setSelectedNode={setSelectedNode}\n            setTraceNode={setTraceNode}\n            traceList={traceList}\n            setTraceList={setTraceList}\n            traceIndex={traceIndex}\n            setTraceIndex={setTraceIndex}\n          />\n        </div>\n        <div className=\"map-wrapper\">\n          {/* <MapViewDemo data={data} map={map} selectedNode={selectedNode} setSelectedNode={setSelectedNode}  /> */}\n          <MapboxGLMap\n            data={data}\n            setIsLoading={setIsLoading}\n            selectedNode={selectedNode}\n            setSelectedNode={setSelectedNode}\n            hoveredNode={hoveredNode}\n            setHoveredNode={setHoveredNode}\n            traceNode={traceNode}\n            traceList={traceList}\n            setTraceList={setTraceList}\n            traceIndex={traceIndex}\n          />\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}