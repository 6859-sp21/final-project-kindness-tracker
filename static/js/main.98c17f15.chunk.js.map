{"version":3,"sources":["utils/dataConstants.js","components/mapboxGLMap/mapUtils.js","components/mapboxGLMap/index.js","components/sidebar/index.js","App.js","reportWebVitals.js","index.js"],"names":["ID_KEY_NAME","KINDNESS_KEY_NAME","resetAllCircleColors","d3","transition","duration","style","styles","width","height","position","US_CENTER_LAT","US_CENTER_LNG","INITIAL_ZOOM","mapboxgl","accessToken","workerClass","MapboxWorker","MapboxGLMap","data","selectedNode","setSelectedNode","traceNode","traceList","setTraceList","traceIndex","useState","map","setMap","mapContainer","useRef","dataProc","d","i","index","uniqueCircleId","useEffect","myMap","Map","container","current","center","zoom","on","initializeMap","getCanvasContainer","svg","append","attr","project","CenterLon","CenterLat","LngLat","dots","selectAll","enter","e","tooltip","pageX","pageY","city","state","kindnessFormatted","DataConstants","htmlString","html","MapUtils","target","flyTo","essential","mapRender","x","y","resize","remove","dataFilt","filter","currentNode","ref","el","className","Sidebar","setTraceNode","setTraceIndex","STATE","onClick","color","cursor","App","setData","Tabletop","init","key","simpleSheet","then","catch","console","warn","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98c17f15.chunk.js","sourcesContent":["const ID_KEY_NAME = 'ID NUMBER on kindness card'\nconst CITY_KEY_NAME = 'CITY where act of kindness took place'\nconst STATE_KEY_NAME = 'STATE'\nconst ZIP_KEY_NAME = '[OPTIONAL] ZIP CODE'\nconst STREET_KEY_NAME = '[Optional] STREET NAME'\nconst KINDNESS_KEY_NAME = '[Optional] Tell us about the act of kindness you received!'\n\n// TOOD add constants for new parsed geo fields when those are avaiable\n\nexport {\n    ID_KEY_NAME,\n    CITY_KEY_NAME,\n    STATE_KEY_NAME,\n    ZIP_KEY_NAME,\n    STREET_KEY_NAME,\n    KINDNESS_KEY_NAME,\n}\n","import * as d3 from 'd3'\nimport * as DataConstants from '../../utils/dataConstants'\n\nconst DEFAULT_KINDESS = 'A random act of kindess took place!'\n\nconst showTooltip = (e, d) => {\n    const tooltip = d3.select('.map-tooltip')\n    tooltip\n        .transition()\n        .duration(0)\n        .style('opacity', 0.8)\n        .style('left', `${e.pageX + 50}px`)\n        .style('top', `${e.pageY - 50}px`)\n\n    // also update the text\n    const city = d[DataConstants.CITY_KEY_NAME]\n    const state = d[DataConstants.STATE_KEY_NAME]\n    const kindness = d[DataConstants.KINDNESS_KEY_NAME]\n    const kindnessFormatted = kindness || DEFAULT_KINDESS;\n\n    const htmlString = `<p><b>${city}, ${state}</b></p><p>${kindnessFormatted}</p>`\n\n    tooltip.html(htmlString)\n}\n\nconst hideTooltip = () => {\n    const tooltip = d3.select('.map-tooltip')\n    tooltip\n        .transition().duration(500)\n        .style(\"opacity\", 0)\n}\n\nconst selectNode = (target, d) => {\n    return\n} \n\nconst resetAllCircleColors = () => {\n    d3.selectAll('.circle')\n        .transition()\n        .duration(500)\n        .style('fill', 'steelblue')\n}\n\nexport {\n    showTooltip,\n    hideTooltip,\n    selectNode,\n    resetAllCircleColors,\n}","import React, { useEffect, useRef, useState } from \"react\"\nimport mapboxgl from \"mapbox-gl\"\nimport \"mapbox-gl/dist/mapbox-gl.css\"\nimport * as d3 from 'd3'\nimport * as MapUtils from './mapUtils'\nimport * as DataConstants from '../../utils/dataConstants'\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';\n\nimport '../../styles/Map.css'\n\nconst styles = {\n    width: \"100vw\",\n    height: \"100vh\",\n    position: \"absolute\"\n}\n\nconst US_CENTER_LAT = 39.8283\nconst US_CENTER_LNG = -98.5795\nconst INITIAL_ZOOM = 3.75\nconst POINT_ZOOM = 12\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiY21vcm9uZXkiLCJhIjoiY2tudGNscDJjMDFldDJ3b3pjMTh6ejJyayJ9.YAPmFkdy_Eh9K20cFlIvaQ'\nmapboxgl.workerClass = MapboxWorker;\n\nconst MapboxGLMap = ({ data, selectedNode, setSelectedNode, traceNode, traceList, setTraceList, traceIndex }) => {\n    const [map, setMap] = useState(null)\n    const mapContainer = useRef(null)\n\n    const dataProc = (data || []).map((d, i) => ({\n        ...d,\n        index: i\n    }))\n\n    // write function to generate ID of circle\n    const uniqueCircleId = d => `circle-${d.index}`\n\n    const initializeMap = ({ setMap, mapContainer }) => {\n        const myMap = new mapboxgl.Map({\n            container: mapContainer.current,\n            style: \"mapbox://styles/mapbox/light-v10\",\n            center: [US_CENTER_LNG, US_CENTER_LAT],\n            zoom: INITIAL_ZOOM,\n        })\n\n        myMap.on(\"load\", () => {\n            setMap(myMap)\n        })\n    }\n\n    useEffect(() => {\n        if (!map) {\n            initializeMap({ setMap, mapContainer })\n        }\n    }, [map])\n\n    useEffect(() => {\n        if (map && data !== null) {\n            var container = map.getCanvasContainer()\n            var svg = d3\n                .select(container)\n                .append(\"svg\")\n                .attr(\"width\", \"100%\")\n                .attr(\"height\", \"100%\")\n                .style(\"position\", \"absolute\")\n                .style(\"z-index\", 2)\n                .style('top', 0)\n                .style('left', 0)\n\n            // write projection function\n            const project = ({ CenterLon, CenterLat }) => {\n                return map.project(new mapboxgl.LngLat(CenterLon, CenterLat))\n            }\n\n            var dots = svg\n                .selectAll(\"circle\")\n                .data(dataProc)\n                .enter()\n                .append(\"circle\")\n                .attr('class', 'circle')\n                .attr('id', uniqueCircleId)\n                .attr(\"r\", 10)\n                .style(\"fill\", \"steelblue\")\n                .on('mouseover', (e, d) => {\n                    MapUtils.showTooltip(e, d)\n                })\n                .on('mouseout', (e, d) => {\n                    MapUtils.hideTooltip()\n                })\n                .on('click', (e, d) => {\n                    MapUtils.resetAllCircleColors()\n\n                    // make this circle red\n                    const circle = d3.select(`#${uniqueCircleId(d)}`)\n                    circle\n                        .transition()\n                        .duration(500)\n                        .style('fill', 'red')\n\n                    MapUtils.selectNode(e.target, d)\n\n                    map.flyTo({\n                        center: [\n                            d.CenterLon, d.CenterLat\n                        ],\n                        zoom: POINT_ZOOM, // TODO cofigure this zoom amount\n                        essential: true // this animation is considered essential with respect to prefers-reduced-motion\n                    });\n\n                    // set the selected node and callback the parent\n                    // TODO potentially clear any tracing if this node is not in the current trace\n                    // have to tighten up logic around this...\n                    setSelectedNode(d)\n                })\n\n            // define render function for mapbox\n            const mapRender = () => {\n                // project dots\n                dots\n                    .attr('cx', d => project(d).x)\n                    .attr('cy', d => project(d).y)\n            }\n\n            map.on('viewreset', mapRender)\n            map.on('move', mapRender)\n            map.on('moveend', mapRender)\n\n            map.on('load', () => {\n                map.resize()\n            })\n\n            mapRender()\n\n            return () => map.remove()\n        }\n    }, [map, data])\n\n    useEffect(() => {\n        // re-fly to center on selectedNode update\n        if (map && data && !selectedNode) {\n            map.flyTo({\n                center: [\n                    US_CENTER_LNG,\n                    US_CENTER_LAT,\n                ],\n                zoom: INITIAL_ZOOM,\n                essential: true // this animation is considered essential with respect to prefers-reduced-motion\n            })\n            MapUtils.resetAllCircleColors()\n        }\n    }, [map, data, selectedNode])\n\n    useEffect(() => {\n        if (traceNode) {\n            // Filter data\n            const dataFilt = dataProc.filter(d => d[DataConstants.ID_KEY_NAME] == traceNode[DataConstants.ID_KEY_NAME])\n            \n            MapUtils.resetAllCircleColors()\n            d3.selectAll('.circle')\n                .filter(d => d[DataConstants.ID_KEY_NAME] == traceNode[DataConstants.ID_KEY_NAME])\n                .transition()\n                .duration(500)\n                .style('fill', 'purple')\n            \n            // for now, re-fly map\n            map.flyTo({\n                center: [\n                    US_CENTER_LNG,\n                    US_CENTER_LAT,\n                ],\n                zoom: INITIAL_ZOOM,\n                essential: true,\n            })\n\n            // set the trace list\n            setTraceList(dataFilt)\n        }\n    }, [traceNode])\n\n    useEffect(() => {\n        if (map && traceList && traceIndex > -1) {\n            // get the node at the index and fly there!\n            const currentNode = traceList[traceIndex]\n            map.flyTo({\n                center: [\n                    currentNode.CenterLon,\n                    currentNode.CenterLat,\n                ],\n                zoom: POINT_ZOOM,\n                essential: true,\n            })\n\n            // also make that node red\n            MapUtils.resetAllCircleColors()\n            d3.selectAll('.circle')\n                .filter(d => d[DataConstants.ID_KEY_NAME] == traceNode[DataConstants.ID_KEY_NAME])\n                .transition()\n                .duration(500)\n                .style('fill', 'purple')\n            d3.select(`#${uniqueCircleId(traceList[traceIndex])}`)\n                .transition()\n                .duration(500)\n                .style('fill', 'green')\n        }\n    }, [traceIndex])\n\n    return <div ref={el => (mapContainer.current = el)} style={styles}>\n        <div className=\"map-tooltip\" style={{ \"opacity\": 0 }}>\n                <p>Tooltip contents will go here.</p>\n            </div>\n    </div>\n}\n\nexport default MapboxGLMap\n","import '../../styles/Sidebar.css'\nimport * as DataConstants from '../../utils/dataConstants'\n\nconst Sidebar = ({ selectedNode, setSelectedNode, setTraceNode, traceList, setTraceList, traceIndex, setTraceIndex }) => {\n    return (\n        <div className=\"sidebar-flex\">\n            <h1>Kindess Tracker</h1>\n            <h3>{selectedNode ? selectedNode.STATE : null}</h3>\n            <h3>{selectedNode ? selectedNode[DataConstants.KINDNESS_KEY_NAME] : null}</h3>\n            {\n                selectedNode ? (\n                    <button onClick={() => {\n                        setSelectedNode(null)\n                        setTraceList([])\n                        setTraceIndex(-1)\n                    }}>Clear Selected Node</button>\n                ) : null\n            }\n            {\n                selectedNode ? (\n                    <button onClick={() => setTraceNode(selectedNode)}>Trace this Act!</button>\n                ) : null\n            }\n            {\n                traceList ? (\n                    traceList.map((d, i) => {\n                        return (\n                            <p key={i} onClick={() => setTraceIndex(i)} style={{color: i == traceIndex ? 'blue' : 'white', cursor: 'pointer'}}>\n                                {d[DataConstants.ID_KEY_NAME]}\n                            </p>\n                        )\n                    })\n                ) : null\n            }\n\n        </div>\n    )\n}\n\nexport default Sidebar\n","import React, { useEffect, useState } from 'react'\nimport Tabletop from 'tabletop'\nimport { Sidebar, MapboxGLMap } from './components'\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp'\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker'\n\n\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiY21vcm9uZXkiLCJhIjoiY2tudGNscDJjMDFldDJ3b3pjMTh6ejJyayJ9.YAPmFkdy_Eh9K20cFlIvaQ'\nmapboxgl.workerClass = MapboxWorker\nmapboxgl.accessToken = MAPBOX_ACCESS_TOKEN\n\nconst US_CENTER_LAT = 39.8283\nconst US_CENTER_LNG = -98.5795\nconst INITIAL_ZOOM = 3.75\n\nimport './styles/App.css'\n\nconst App = () => {\n  const [data, setData] = useState(null)\n  const [selectedNode, setSelectedNode] = useState(null)\n  const [traceNode, setTraceNode] = useState(null)\n  const [traceList, setTraceList] = useState([])\n  const [traceIndex, setTraceIndex] = useState(-1)\n\n  useEffect(() => {\n    if (data === null) {\n      Tabletop.init({\n        // TODO add this key to some environment variable, don't hard-code here\n        key: 'https://docs.google.com/spreadsheets/d/1IqEBIcnFZ_BFCrD8jhk11yVoOjfxzZpiZLdL4cL3oK0/pubhtml',\n        simpleSheet: true,\n      })\n        .then(data => {\n          setData(data)\n        })\n        .catch(console.warn)\n    }\n  }, [data])\n\n  return (\n    <div className=\"App\">\n      <div className=\"horizontal-stack\">\n        <div className=\"left-sidebar\">\n          <Sidebar\n            selectedNode={selectedNode}\n            setSelectedNode={setSelectedNode}\n            setTraceNode={setTraceNode}\n            traceList={traceList}\n            setTraceList={setTraceList}\n            traceIndex={traceIndex}\n            setTraceIndex={setTraceIndex}\n          />\n        </div>\n        <div className=\"map-wrapper\">\n          {/* <MapViewDemo data={data} map={map} selectedNode={selectedNode} setSelectedNode={setSelectedNode}  /> */}\n          <MapboxGLMap\n            data={data}\n            selectedNode={selectedNode}\n            setSelectedNode={setSelectedNode}\n            traceNode={traceNode}\n            traceList={traceList}\n            setTraceList={setTraceList}\n            traceIndex={traceIndex}\n          />\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}