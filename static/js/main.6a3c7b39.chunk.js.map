{"version":3,"sources":["components/mapboxGLMap/mapUtils.js","utils/dataConstants.js","components/tooltip/index.js","utils/stringUtils.js","utils/dataUtils.js","components/mapboxGLMap/index.js","components/sidebar/kindessCard.js","components/sidebar/loadingSpinner.js","components/sidebar/infoCard.js","components/sidebar/traceStepper.js","components/sidebar/index.js","App.js","reportWebVitals.js","index.js"],"names":["zoomMapToBoundingObject","map","boundingObject","topRight","bottomLeft","fitBounds","lng","lat","showTooltip","e","d","d3","transition","duration","style","pageX","pageY","resetAllCircleColors","ID_KEY_NAME","CITY_KEY_NAME","KINDNESS_KEY_NAME","TooltipContents","node","isSelected","console","log","inp","length","city","DataConstants","state","kindness","substring","LNG_KEY","LAT_KEY","computeLngLatBoundingBox","lngLatPoints","paddingMiles","isRatioPadding","paddingDegreesLng","paddingDegreesLat","extractKey","key","maxLng","Math","max","minLng","min","maxLat","minLat","styles","width","height","position","mapboxgl","accessToken","workerClass","MapboxWorker","MapboxGLMap","setIsLoading","data","selectedNode","setSelectedNode","hoveredNode","setHoveredNode","traceNode","traceList","setTraceList","traceIndex","useState","setMap","mapContainer","useRef","one","two","uniqueCircleId","index","circleClass","generateLngLatArray","DataUtils","setAllEventHandlers","on","MapUtils","callback","flyTo","center","zoom","essential","useEffect","myMap","Map","container","current","getCanvasContainer","svg","append","attr","project","LngLat","dots","selectAll","enter","mapRender","x","y","resize","remove","dataFilt","filter","otherCircles","boundingObjectFilt","ref","el","className","React","memo","prevProps","nextProps","KindnessCard","timestamp","street","zip","date","DateTime","fromFormat","LoadingSpinner","SidebarInfoCard","TraceStepper","setTraceIndex","i","onClick","color","cursor","Sidebar","isLoading","setTraceNode","App","setData","Tabletop","init","simpleSheet","then","dataProc","catch","warn","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a3c7b39.chunk.js","sourcesContent":["import * as d3 from 'd3'\nimport mapboxgl from \"mapbox-gl\"\n\nconst initializeMap = ({ setMap, mapContainer, boundingObject }) => {\n    const myMap = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/light-v10',\n    })\n\n    // immediately center based on the bounding box of our data points\n    zoomMapToBoundingObject(myMap, boundingObject)\n\n    myMap.on(\"load\", () => {\n        setMap(myMap)\n    })\n}\n\nconst zoomMapToBoundingObject = (map, boundingObject) => {\n    const { topRight, bottomLeft } = boundingObject\n    map.fitBounds([\n        [bottomLeft.lng, bottomLeft.lat],\n        [topRight.lng, topRight.lat]\n    ]);\n}\n\nconst showTooltip = (e, d) => {\n    const tooltip = d3.select('.map-tooltip')\n    tooltip\n        .transition()\n        .duration(0)\n        .style('opacity', 0.8)\n        .style('left', `${e.pageX + 50}px`)\n        .style('top', `${e.pageY - 50}px`)\n}\n\nconst hideTooltip = (callback) => {\n    const tooltip = d3.select('.map-tooltip')\n    tooltip\n        .transition().duration(500)\n        .style(\"opacity\", 0)\n        .on('end', callback)\n}\n\nconst resetAllCircleColors = () => {\n    return d3.selectAll('.circle')\n        .transition()\n        .duration(500)\n        .style('fill', 'steelblue')\n}\n\nconst clearAllEventHandlers = (selection) => {\n    selection\n        .on('mouseover', null)\n        .on('mousemove', null)\n        .on('mouseout', null)\n        .on('click', null)\n}\n\nexport {\n    initializeMap,\n    zoomMapToBoundingObject,\n    showTooltip,\n    hideTooltip,\n    resetAllCircleColors,\n    clearAllEventHandlers,\n}\n","const TIMESTAMP_KEY_NAME = 'Timestamp'\nconst ID_KEY_NAME = 'ID NUMBER on kindness card'\nconst CITY_KEY_NAME = 'CITY where act of kindness took place'\nconst STATE_KEY_NAME = 'STATE'\nconst ZIP_KEY_NAME = '[OPTIONAL] ZIP CODE'\nconst STREET_KEY_NAME = '[Optional] STREET NAME'\nconst KINDNESS_KEY_NAME = '[Optional] Tell us about the act of kindness you received!'\nconst CENTER_LNG_KEY_NAME = 'CenterLon'\nconst CENTER_LAT_KEY_NAME = 'CenterLat'\n\nconst TEST_DATA_URL = 'https://docs.google.com/spreadsheets/d/1IqEBIcnFZ_BFCrD8jhk11yVoOjfxzZpiZLdL4cL3oK0/pubhtml'\nconst SPOOF_DATA_URL = 'https://docs.google.com/spreadsheets/d/1BvBwyy1xYYhdiokMfbyxssu5nlB0arRMvxyuQLCzsH4/pubhtml'\n\nconst TIMESTAMP_FORMAT = 'mm/dd/yyyy h:mm:ss a'\n\n// TOOD add constants for new parsed geo fields when those are avaiable\n// Spoof Data Names\n// const TIMESTAMP_KEY_NAME = 'Timestamp'\n// const ID_KEY_NAME = 'id'\n// const STREET_KEY_NAME = 'street'\n// const STATE_KEY_NAME = 'admin_level_1'\n// const CITY_KEY_NAME = 'city'\n// const ZIP_KEY_NAME = 'zip_code'\n// const KINDNESS_KEY_NAME = 'description'\n// const CENTER_LNG_KEY_NAME = 'center_lon'\n// const CENTER_LAT_KEY_NAME = 'center_lat'\n\nexport {\n    TIMESTAMP_KEY_NAME,\n    ID_KEY_NAME,\n    CITY_KEY_NAME,\n    STATE_KEY_NAME,\n    ZIP_KEY_NAME,\n    STREET_KEY_NAME,\n    KINDNESS_KEY_NAME,\n    CENTER_LNG_KEY_NAME,\n    CENTER_LAT_KEY_NAME,\n\n    TEST_DATA_URL,\n    SPOOF_DATA_URL,\n\n    TIMESTAMP_FORMAT,\n}\n","import * as DataConstants from '../../utils/dataConstants'\nimport * as StringUtils from '../../utils/stringUtils'\n\nconst TooltipContents = ({ node, isSelected }) => {\n    // handle null node case\n    if (! node) {\n        return null;\n    }\n\n    console.log('rendering tooltip')\n\n    const city = node[DataConstants.CITY_KEY_NAME]\n    const state = node[DataConstants.STATE_KEY_NAME]\n    const kindness = node[DataConstants.KINDNESS_KEY_NAME]\n\n    return (\n        <div>\n            <p><b>{city ? `${city}, ` : null}{state}</b></p>\n            <p><b>{StringUtils.trimWithElipses(kindness, 140)}</b></p>\n            <p>{! isSelected ? 'Click for more info!' : null}</p>\n        </div>\n    )\n}\n\nexport default TooltipContents\n","const trimWithElipses = (inp, length) => {\n    if (inp.length > length) {\n        return `${inp.substring(0, length)}`\n    }\n    \n    return inp\n}\n\nexport {\n    trimWithElipses\n}","const DEGREES_TO_MILES = 69\nconst LNG_KEY = 'lng'\nconst LAT_KEY = 'lat'\n\nconst processRawSheetsData = (data) => {\n    const dataProc = data ? data.map((d, i) => ({\n        ...d,\n        index: i\n    })) : null\n    return dataProc\n}\n\nconst nodesAreEqual = (one, two) => {\n    if (! one || ! two)\n        return false\n        \n    return one.index == two.index\n}\n\nconst computeLngLatBoundingBox = (lngLatPoints, paddingMiles, isRatioPadding = false) => {\n    // compute top right and bottom left\n    // then, add some padding amount in miles\n    var paddingDegreesLng = 0\n    var paddingDegreesLat = 0\n    if (! isRatioPadding)\n        paddingDegreesLng = paddingMiles / DEGREES_TO_MILES\n        paddingDegreesLat = paddingDegreesLng\n\n    const extractKey = key => lngLatPoints.map((d => d[key]))\n\n    const maxLng = Math.max(...extractKey(LNG_KEY))\n    const minLng = Math.min(...extractKey(LNG_KEY))\n    const maxLat = Math.max(...extractKey(LAT_KEY))\n    const minLat = Math.min(...extractKey(LAT_KEY))\n\n    if (isRatioPadding) {\n        paddingDegreesLng = (maxLng - minLng) * paddingMiles\n        paddingDegreesLat = (maxLat - minLat) * paddingMiles\n    }\n\n    return {\n        topRight: {\n            lng: maxLng + paddingDegreesLng,\n            lat: minLat + paddingDegreesLat,\n        },\n        bottomLeft: {\n            lng: minLng - paddingDegreesLng * 6,\n            lat: maxLat - paddingDegreesLat,\n        }\n    }\n}\n\nexport {\n    processRawSheetsData,\n    nodesAreEqual,\n    computeLngLatBoundingBox,\n}\n","import React, { useEffect, useRef, useState } from \"react\"\nimport mapboxgl from \"mapbox-gl\"\n// import \"mapbox-gl/dist/mapbox-gl.css\"\nimport * as d3 from 'd3'\nimport * as MapUtils from './mapUtils'\nimport * as DataConstants from '../../utils/dataConstants'\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker';\nimport TooltipContents from '../tooltip'\nimport * as DataUtils from '../../utils/dataUtils'\n\nimport '../../styles/Map.css'\n\nconst styles = {\n    width: \"100vw\",\n    height: \"100vh\",\n    position: \"absolute\"\n}\n\nconst POINT_ZOOM = 12\nconst DEFAULT_RADIUS = 10\nconst BIG_RADIUS = 30\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiY21vcm9uZXkiLCJhIjoiY2tudGNscDJjMDFldDJ3b3pjMTh6ejJyayJ9.YAPmFkdy_Eh9K20cFlIvaQ'\nmapboxgl.workerClass = MapboxWorker;\n\nconst MapboxGLMap = ({ setIsLoading, data, selectedNode, setSelectedNode, hoveredNode, setHoveredNode, traceNode, traceList, setTraceList, traceIndex }) => {\n    const [map, setMap] = useState(null)\n    const mapContainer = useRef(null)\n\n    console.log('rendering map')\n\n    // write function to generate ID of circle\n    const uniqueCircleId = d => `circle-${d.index}`\n\n    // write function to generate class of circle based off id key\n    const circleClass = d => `circle circle-${d[DataConstants.ID_KEY_NAME]}`\n\n    // write function to quickly convert a data array to the fomat for lat lng\n    const generateLngLatArray = data => data.map(d => ({\n        lng: d[DataConstants.CENTER_LNG_KEY_NAME],\n        lat: d[DataConstants.CENTER_LAT_KEY_NAME],\n    }))\n\n    // get the bounds of our data\n    const boundingObject = data ? DataUtils.computeLngLatBoundingBox(\n        generateLngLatArray(data), 200\n    ) : null\n\n    const setAllEventHandlers = () => {\n        d3.selectAll(\".circle\")\n            .on('mouseover', (e, d) => {\n                setHoveredNode(d)\n                MapUtils.showTooltip(e, d)\n            })\n            .on('mousemove', (e, d) => {\n                MapUtils.showTooltip(e, d)\n            })\n            .on('mouseout', (e, d) => {\n                MapUtils.hideTooltip(() => setHoveredNode(null))\n            })\n            .on('click', (e, d) => {\n                MapUtils.resetAllCircleColors()\n    \n                // make this circle red\n                const circle = d3.select(`#${uniqueCircleId(d)}`)\n                circle\n                    .transition()\n                    .duration(500)\n                    .style('fill', 'red')\n    \n                map.flyTo({\n                    center: [\n                        d[DataConstants.CENTER_LNG_KEY_NAME],\n                        d[DataConstants.CENTER_LAT_KEY_NAME],\n                    ],\n                    zoom: POINT_ZOOM, // TODO cofigure this zoom amount\n                    essential: true // this animation is considered essential with respect to prefers-reduced-motion\n                });\n    \n                // set the selected node and callback the parent\n                // TODO potentially clear any tracing if this node is not in the current trace\n                // have to tighten up logic around this...\n                setSelectedNode(d)\n            })\n    }\n\n    useEffect(() => {\n        if (!map && data) {\n            console.log('one')\n            MapUtils.initializeMap({ setMap, mapContainer, boundingObject })\n        }\n    }, [map, data])\n\n    useEffect(() => {\n        if (map && data !== null) {\n            console.log('two')\n            var container = map.getCanvasContainer()\n            var svg = d3\n                .select(container)\n                .append(\"svg\")\n                .attr(\"width\", \"100%\")\n                .attr(\"height\", \"100%\")\n                .style(\"position\", \"absolute\")\n                .style(\"z-index\", 2)\n                .style('top', 0)\n                .style('left', 0)\n\n            // write projection function\n            const project = (d) => {\n                return map.project(\n                    new mapboxgl.LngLat(d[DataConstants.CENTER_LNG_KEY_NAME], d[DataConstants.CENTER_LAT_KEY_NAME])\n                )\n            }\n\n            var dots = svg\n                .selectAll(\"circle\")\n                .data(data)\n                .enter()\n                .append('circle')\n                .attr('id', uniqueCircleId)\n                .attr('class', circleClass)\n                .attr(\"r\", DEFAULT_RADIUS)\n                .style(\"fill\", \"steelblue\")\n            \n            // add event handlers\n            setAllEventHandlers()\n\n            // define render function for mapbox\n            const mapRender = () => {\n                // project dots\n                dots\n                    .attr('cx', d => project(d).x)\n                    .attr('cy', d => project(d).y)\n            }\n\n            map.on('viewreset', mapRender)\n            map.on('move', mapRender)\n            map.on('moveend', mapRender)\n\n            map.on('load', () => {\n                map.resize()\n            })\n\n            mapRender()\n\n            // notify that we are done loading\n            setIsLoading(false)\n\n            return () => map.remove()\n        }\n    }, [map, data])\n\n    useEffect(() => {\n        // re-fly to center on selectedNode update, as long as we are not tracing\n        if (map && data && !selectedNode) {\n            console.log('three')\n            MapUtils.zoomMapToBoundingObject(map, boundingObject)\n            MapUtils.resetAllCircleColors()\n                .attr(\"r\", DEFAULT_RADIUS)\n                .style('opacity', 1)\n            setAllEventHandlers()\n        }\n    }, [map, data, selectedNode])\n\n    useEffect(() => {\n        if (traceNode) {\n            console.log('four')\n            const dataFilt = data.filter(d => d[DataConstants.ID_KEY_NAME] == traceNode[DataConstants.ID_KEY_NAME])\n\n            // Remove all circles that aren't in the given class name, and also disable their events\n            const otherCircles = d3.selectAll('.circle')\n                .filter(d => d[DataConstants.ID_KEY_NAME] !== traceNode[DataConstants.ID_KEY_NAME])\n                \n            otherCircles.transition()\n                .duration(500)\n                .style('opacity', '0')\n            \n            MapUtils.clearAllEventHandlers(otherCircles)\n            \n            d3.selectAll('.circle')\n                .filter(d => d[DataConstants.ID_KEY_NAME] === traceNode[DataConstants.ID_KEY_NAME])\n                .transition()\n                .duration(500)\n                .style('fill', 'purple')\n            \n            // re-compute bounding box\n            // TODO write logic for ratio-based padding\n            const boundingObjectFilt = DataUtils.computeLngLatBoundingBox(\n                generateLngLatArray(dataFilt),\n                0.05,\n                true\n            )\n            MapUtils.zoomMapToBoundingObject(map, boundingObjectFilt)\n\n            // set the trace list\n            setTraceList(dataFilt)\n        }\n    }, [traceNode])\n\n    useEffect(() => {\n        if (map && traceList && traceIndex > -1) {\n            console.log('five')\n            // // get the node at the index and fly there!\n            // const currentNode = traceList[traceIndex]\n            // map.flyTo({\n            //     center: [\n            //         currentNode[DataConstants.CENTER_LNG_KEY_NAME],\n            //         currentNode[DataConstants.CENTER_LAT_KEY_NAME],\n            //     ],\n            //     zoom: POINT_ZOOM,\n            //     essential: true,\n            // })\n\n            // also make that node bigger and green\n            d3.selectAll('.circle')\n                .filter(d => d[DataConstants.ID_KEY_NAME] == traceNode[DataConstants.ID_KEY_NAME])\n                .transition()\n                .duration(500)\n                .style('fill', 'purple')\n                .attr('r', DEFAULT_RADIUS)\n\n            d3.select(`#${uniqueCircleId(traceList[traceIndex])}`)\n                .transition()\n                .duration(500)\n                .style('fill', 'green')\n                .attr('r', BIG_RADIUS)\n        }\n    }, [traceIndex])\n\n    return <div ref={el => (mapContainer.current = el)} style={styles}>\n        <div className=\"map-tooltip\" style={{ \"opacity\": 0 }}>\n            <TooltipContents node={hoveredNode} isSelected={DataUtils.nodesAreEqual(hoveredNode, selectedNode)} />\n        </div>\n    </div>\n}\n\nexport default React.memo(MapboxGLMap, (prevProps, nextProps) => {\n    // { setIsLoading, data, selectedNode, setSelectedNode, hoveredNode, setHoveredNode, traceNode, traceList, setTraceList, traceIndex }\n    return prevProps.data === nextProps.data &&\n    prevProps.selectedNode === nextProps.selectedNode &&\n    prevProps.hoveredNode === nextProps.hoveredNode &&\n    prevProps.traceNode === nextProps.traceNode &&\n    prevProps.traceList === nextProps.traceList &&\n    prevProps.traceIndex === nextProps.traceIndex\n})\n","import * as DataConstants from '../../utils/dataConstants'\nimport { DateTime } from  'luxon'\n\nconst KindnessCard = ({ node }) => {\n    console.log('rendering card')\n    // handle null node case\n    if (! node) {\n        return null;\n    }\n\n    console.log(node)\n\n    const timestamp = node[DataConstants.TIMESTAMP_KEY_NAME]\n    const street = node[DataConstants.STREET_KEY_NAME]\n    const city = node[DataConstants.CITY_KEY_NAME]\n    const state = node[DataConstants.STATE_KEY_NAME]\n    const zip = node[DataConstants.ZIP_KEY_NAME]\n    const kindness = node[DataConstants.KINDNESS_KEY_NAME]\n\n    // apply necessary parsing for date\n    const date = DateTime.fromFormat(timestamp, DataConstants.TIMESTAMP_FORMAT)\n    console.log(date)\n\n    return (\n        <div className=\"kindness-card-inner\">\n            <p>Address: <b>{street || 'No street provided.'}</b></p>\n            <p>City: <b>{city || 'No city provided.'}</b></p>\n            <p>State: <b>{state || 'No state provided.'}</b></p>\n            <p>Zip Code: <b>{zip || 'No zip code provided.'}</b></p>\n            <p>Act of Kindness Description:</p>\n            <p><b>{kindness || 'No kindess description provided.'}</b></p>\n        </div>\n    )\n}\n\nexport default KindnessCard","import '../../styles/Loading.css'\n\nconst LoadingSpinner = () => {\n    console.log('rendering loading')\n    return (\n        <div className=\"loading-wrapper\">\n            <div className=\"la-ball-clip-rotate la-2x\">\n                <div></div>\n            </div>\n            <p>Loading...</p>\n        </div>\n    )\n}\n\nexport default LoadingSpinner\n","/*\n    Simple component to render some useful info when no node is selected.\n*/\nconst SidebarInfoCard = () => {\n    console.log('rendering side info card')\n    return (\n        <div>\n            <p>Click a circle to explore that act of kindness further!</p>\n        </div>\n    )\n}\n\nexport default SidebarInfoCard","import * as DataConstants from '../../utils/dataConstants'\n\nconst TraceStepper = ({ traceList, traceIndex, setTraceIndex }) => {\n    console.log('rendering trace')\n    return (\n        traceList ? (\n            traceList.map((d, i) => {\n                return (\n                    <p key={i} onClick={() => setTraceIndex(i)} style={{ color: i == traceIndex ? 'blue' : 'white', cursor: 'pointer' }}>\n                        {d[DataConstants.ID_KEY_NAME]}\n                    </p>\n                )\n            })\n        ) : null\n    )\n}\n\nexport default TraceStepper\n","import React from 'react'\nimport '../../styles/Sidebar.css'\nimport KindessCard from './kindessCard'\nimport LoadingSpinner from './loadingSpinner'\nimport SidebarInfoCard from './infoCard'\nimport TraceStepper from './traceStepper'\n\nconst Sidebar = ({ isLoading, selectedNode, setSelectedNode, setTraceNode, traceList, setTraceList, traceIndex, setTraceIndex }) => {\n    console.log('rendering sidebar')\n    return (\n        <div className=\"sidebar-flex\">\n            <h1>Kindess Tracker</h1>\n            {\n                isLoading ? <LoadingSpinner /> : null\n            }\n            {\n                ! isLoading && ! selectedNode ? <SidebarInfoCard /> : null\n            }\n            <div className=\"selected-card-wrapper\">\n                <KindessCard node={selectedNode} />\n            </div>\n            {\n                selectedNode ? (\n                    <button onClick={() => {\n                        setSelectedNode(null)\n                        setTraceList([])\n                        setTraceIndex(-1)\n                        setTraceNode(null)\n                    }}>Clear Selected Node</button>\n                ) : null\n            }\n            {\n                (selectedNode && traceList.length === 0) ? (\n                    <button onClick={() => setTraceNode(selectedNode)}>Trace this Act!</button>\n                ) : null\n            }\n            <TraceStepper\n                traceList={traceList}\n                traceIndex={traceIndex}\n                setTraceIndex={setTraceIndex}\n            />\n        </div>\n    )\n}\n\nexport default React.memo(Sidebar, (prevProps, nextProps) => {\n    return (prevProps.isLoading === nextProps.isLoading &&\n        prevProps.selectedNode === nextProps.selectedNode &&\n        prevProps.traceNode === nextProps.traceNode &&\n        prevProps.traceIndex === nextProps.traceIndex)\n})\n","import React, { useEffect, useState } from 'react'\nimport Tabletop from 'tabletop'\nimport { Sidebar, MapboxGLMap } from './components'\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl-csp'\nimport MapboxWorker from 'worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker'\nimport * as DataConstants from './utils/dataConstants'\nimport * as DataUtils from './utils/dataUtils'\n\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiY21vcm9uZXkiLCJhIjoiY2tudGNscDJjMDFldDJ3b3pjMTh6ejJyayJ9.YAPmFkdy_Eh9K20cFlIvaQ'\nmapboxgl.workerClass = MapboxWorker\nmapboxgl.accessToken = MAPBOX_ACCESS_TOKEN\n\nimport './styles/App.css'\n\nconst App = () => {\n  const [data, setData] = useState(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const [selectedNode, setSelectedNode] = useState(null)\n  const [hoveredNode, setHoveredNode] = useState(null)\n  const [traceNode, setTraceNode] = useState(null)\n  const [traceList, setTraceList] = useState([])\n  const [traceIndex, setTraceIndex] = useState(-1)\n\n  useEffect(() => {\n    if (data === null) {\n      Tabletop.init({\n        key: DataConstants.SPOOF_DATA_URL,\n        simpleSheet: true,\n      })\n        .then(data => {\n          // process data right away\n          const dataProc = DataUtils.processRawSheetsData(data)\n          setData(dataProc)\n        })\n        .catch(console.warn)\n    }\n  }, [data])\n\n  return (\n    <div className=\"App\">\n      <div className=\"horizontal-stack\">\n        <div className=\"left-sidebar\">\n          <Sidebar\n            isLoading={isLoading}\n            selectedNode={selectedNode}\n            setSelectedNode={setSelectedNode}\n            setTraceNode={setTraceNode}\n            traceList={traceList}\n            setTraceList={setTraceList}\n            traceIndex={traceIndex}\n            setTraceIndex={setTraceIndex}\n          />\n        </div>\n        <div className=\"map-wrapper\">\n          {/* <MapViewDemo data={data} map={map} selectedNode={selectedNode} setSelectedNode={setSelectedNode}  /> */}\n          <MapboxGLMap\n            data={data}\n            setIsLoading={setIsLoading}\n            selectedNode={selectedNode}\n            setSelectedNode={setSelectedNode}\n            hoveredNode={hoveredNode}\n            setHoveredNode={setHoveredNode}\n            traceNode={traceNode}\n            traceList={traceList}\n            setTraceList={setTraceList}\n            traceIndex={traceIndex}\n          />\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}